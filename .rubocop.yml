require:
  - rubocop-capybara
  - rubocop-factory_bot
  - rubocop-rails
  - rubocop-rspec
  - rubocop-rspec_rails

inherit_gem:
  pundit: config/rubocop-rspec.yml

# CUSTOM RULES (keep these simple please! see https://en.wikipedia.org/wiki/Law_of_triviality)
Rails/DefaultScope:
  Enabled: true
  Details: |-
    Default scopes lead to unexpected behavior for future developers!

Rails/SaveBang:
  Enabled: true
  Include:
    - 'spec/**/*'
  Details: |-
    Specs `should fail` if a setup record is invalid.

RSpec/ExampleLength:
  # 667 Offenses when default (Max: 5, CountAsOne: []) used. Aggregating failures make examples longer.
  CountAsOne: ['array', 'hash', 'heredoc', 'method_call']
  Max: 15 # 9 Offenses
  Exclude:
    - 'spec/system/**/*'

RSpec/LetSetup:
  # Only here for the extra details as let! use is extremely common... counter-examples? not so common!
  Details: |-
    Using let! obscures test setup and leads to extra database calls.
    Instead of `let!(:unreferenced_thing) { create(:thing) }`
    Do shared setup in a before block:
      before do
        `create(:thing)`
      end
    OR do the setup in the example itself:
      it "does something" do
        `create(:thing)`
        subject
        ...
      end
    OR when needed for a another let variable, call in the let block of the dependant variable:
      let(:necessary_thing) { `create(:thing)` }
      let(:dependent_thing) do
        `necessary_thing`
        create(:dependent_thing)
      end

RSpec/MultipleExpectations:
  # Allow because we can aggregate failures by default (rails_helper.rb)
  # 958 Offenses when default (1) is used
  Max: 10 # 3 Offenses
  Exclude:
    - 'spec/system/**/*' # expensive per example & async behaviors require expectations after user interaction

RSpec/MultipleMemoizedHelpers:
  # 670 Offenses when default (5) is used
  Max: 20 # 19 Offenses

RSpec/NamedSubject:
  # 321 Offenses; readability/preference only
  Enabled: false

RSpec/NestedGroups:
  # 352 Offenses when default (3) is used
  Max: 5 # 10 Offenses
