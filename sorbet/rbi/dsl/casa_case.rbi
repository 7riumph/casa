# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `CasaCase`.
# Please instead update this file by running `bin/tapioca dsl CasaCase`.

class CasaCase
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { returns(ActiveStorage::Attached::Many) }
  def court_reports; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def court_reports=(attachable); end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def court_report_statuses; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::CasaCase).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::CasaCase).void)).returns(::CasaCase) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::CasaCase).void)).returns(::CasaCase) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::CasaCase).void)).returns(::CasaCase) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::CasaCase).void)).returns(::CasaCase) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::CasaCase).void)).returns(::CasaCase) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::CasaCase]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::CasaCase)) }
    def fifth; end

    sig { returns(::CasaCase) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::CasaCase)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::CasaCase) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::CasaCase).void)).returns(::CasaCase) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::CasaCase).void)).returns(::CasaCase) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::CasaCase).void)).returns(::CasaCase) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::CasaCase) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::CasaCase) }
    def first!; end

    sig { returns(T.nilable(::CasaCase)) }
    def forty_two; end

    sig { returns(::CasaCase) }
    def forty_two!; end

    sig { returns(T.nilable(::CasaCase)) }
    def fourth; end

    sig { returns(::CasaCase) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::CasaCase) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::CasaCase).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::CasaCase).void)).returns(::CasaCase) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::CasaCase).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::CasaCase).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::CasaCase)) }
    def second; end

    sig { returns(::CasaCase) }
    def second!; end

    sig { returns(T.nilable(::CasaCase)) }
    def second_to_last; end

    sig { returns(::CasaCase) }
    def second_to_last!; end

    sig { returns(::CasaCase) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::CasaCase) }
    def take!; end

    sig { returns(T.nilable(::CasaCase)) }
    def third; end

    sig { returns(::CasaCase) }
    def third!; end

    sig { returns(T.nilable(::CasaCase)) }
    def third_to_last; end

    sig { returns(::CasaCase) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def court_report_completed!; end

    sig { returns(T::Boolean) }
    def court_report_completed?; end

    sig { void }
    def court_report_in_review!; end

    sig { returns(T::Boolean) }
    def court_report_in_review?; end

    sig { void }
    def court_report_not_submitted!; end

    sig { returns(T::Boolean) }
    def court_report_not_submitted?; end

    sig { void }
    def court_report_submitted!; end

    sig { returns(T::Boolean) }
    def court_report_submitted?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def active_case_assignment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def active_case_assignment_ids=(ids); end

    sig { returns(::CaseAssignment::PrivateCollectionProxy) }
    def active_case_assignments; end

    sig { params(value: T::Enumerable[::CaseAssignment]).void }
    def active_case_assignments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def assigned_volunteer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def assigned_volunteer_ids=(ids); end

    sig { returns(::Volunteer::PrivateCollectionProxy) }
    def assigned_volunteers; end

    sig { params(value: T::Enumerable[::Volunteer]).void }
    def assigned_volunteers=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CasaOrg) }
    def build_casa_org(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::HearingType) }
    def build_hearing_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Judge) }
    def build_judge(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def casa_case_contact_type_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def casa_case_contact_type_ids=(ids); end

    sig { returns(::CasaCaseContactType::PrivateCollectionProxy) }
    def casa_case_contact_types; end

    sig { params(value: T::Enumerable[::CasaCaseContactType]).void }
    def casa_case_contact_types=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def casa_case_contact_types_attributes=(attributes); end

    sig { returns(::CasaCaseEmancipationCategory::PrivateCollectionProxy) }
    def casa_case_emancipation_categories; end

    sig { params(value: T::Enumerable[::CasaCaseEmancipationCategory]).void }
    def casa_case_emancipation_categories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def casa_case_emancipation_category_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def casa_case_emancipation_category_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def casa_cases_emancipation_option_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def casa_cases_emancipation_option_ids=(ids); end

    sig { returns(::CasaCasesEmancipationOption::PrivateCollectionProxy) }
    def casa_cases_emancipation_options; end

    sig { params(value: T::Enumerable[::CasaCasesEmancipationOption]).void }
    def casa_cases_emancipation_options=(value); end

    sig { returns(T.nilable(::CasaOrg)) }
    def casa_org; end

    sig { params(value: T.nilable(::CasaOrg)).void }
    def casa_org=(value); end

    sig { returns(T::Array[T.untyped]) }
    def case_assignment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def case_assignment_ids=(ids); end

    sig { returns(::CaseAssignment::PrivateCollectionProxy) }
    def case_assignments; end

    sig { params(value: T::Enumerable[::CaseAssignment]).void }
    def case_assignments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def case_contact_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def case_contact_ids=(ids); end

    sig { returns(::CaseContact::PrivateCollectionProxy) }
    def case_contacts; end

    sig { params(value: T::Enumerable[::CaseContact]).void }
    def case_contacts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def case_court_order_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def case_court_order_ids=(ids); end

    sig { returns(::CaseCourtOrder::PrivateCollectionProxy) }
    def case_court_orders; end

    sig { params(value: T::Enumerable[::CaseCourtOrder]).void }
    def case_court_orders=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def case_court_orders_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def contact_type_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def contact_type_ids=(ids); end

    sig { returns(::ContactType::PrivateCollectionProxy) }
    def contact_types; end

    sig { params(value: T::Enumerable[::ContactType]).void }
    def contact_types=(value); end

    sig { returns(T::Array[T.untyped]) }
    def court_date_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def court_date_ids=(ids); end

    sig { returns(::CourtDate::PrivateCollectionProxy) }
    def court_dates; end

    sig { params(value: T::Enumerable[::CourtDate]).void }
    def court_dates=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def court_dates_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def court_reports_attachment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def court_reports_attachment_ids=(ids); end

    sig { returns(::ActiveStorage::Attachment::PrivateCollectionProxy) }
    def court_reports_attachments; end

    sig { params(value: T::Enumerable[::ActiveStorage::Attachment]).void }
    def court_reports_attachments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def court_reports_blob_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def court_reports_blob_ids=(ids); end

    sig { returns(::ActiveStorage::Blob::PrivateCollectionProxy) }
    def court_reports_blobs; end

    sig { params(value: T::Enumerable[::ActiveStorage::Blob]).void }
    def court_reports_blobs=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CasaOrg) }
    def create_casa_org(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CasaOrg) }
    def create_casa_org!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::HearingType) }
    def create_hearing_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::HearingType) }
    def create_hearing_type!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Judge) }
    def create_judge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Judge) }
    def create_judge!(*args, &blk); end

    sig { returns(::EmancipationCategory::PrivateCollectionProxy) }
    def emancipation_categories; end

    sig { params(value: T::Enumerable[::EmancipationCategory]).void }
    def emancipation_categories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def emancipation_category_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def emancipation_category_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def emancipation_option_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def emancipation_option_ids=(ids); end

    sig { returns(::EmancipationOption::PrivateCollectionProxy) }
    def emancipation_options; end

    sig { params(value: T::Enumerable[::EmancipationOption]).void }
    def emancipation_options=(value); end

    sig { returns(T.nilable(::HearingType)) }
    def hearing_type; end

    sig { params(value: T.nilable(::HearingType)).void }
    def hearing_type=(value); end

    sig { returns(T.nilable(::Judge)) }
    def judge; end

    sig { params(value: T.nilable(::Judge)).void }
    def judge=(value); end

    sig { returns(T.nilable(::CasaOrg)) }
    def reload_casa_org; end

    sig { returns(T.nilable(::HearingType)) }
    def reload_hearing_type; end

    sig { returns(T.nilable(::Judge)) }
    def reload_judge; end

    sig { returns(T::Array[T.untyped]) }
    def volunteer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def volunteer_ids=(ids); end

    sig { returns(::User::PrivateCollectionProxy) }
    def volunteers; end

    sig { params(value: T::Enumerable[::User]).void }
    def volunteers=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def volunteers_attributes=(attributes); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def actively_assigned_excluding_volunteer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def actively_assigned_to(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def birthday_next_month(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def court_report_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def court_report_in_review(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def court_report_not_submitted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def court_report_submitted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def due_date_passed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def inactive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def is_transitioned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_assigned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_court_report_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_court_report_in_review(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_court_report_not_submitted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_court_report_submitted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def should_transition(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_attached_court_reports(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def active; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def active=(value); end

    sig { returns(T::Boolean) }
    def active?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_before_last_save; end

    sig { returns(T.untyped) }
    def active_before_type_cast; end

    sig { returns(T::Boolean) }
    def active_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def active_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_previous_change; end

    sig { returns(T::Boolean) }
    def active_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_was; end

    sig { void }
    def active_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def birth_month_year_youth; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def birth_month_year_youth=(value); end

    sig { returns(T::Boolean) }
    def birth_month_year_youth?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def birth_month_year_youth_before_last_save; end

    sig { returns(T.untyped) }
    def birth_month_year_youth_before_type_cast; end

    sig { returns(T::Boolean) }
    def birth_month_year_youth_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def birth_month_year_youth_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def birth_month_year_youth_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def birth_month_year_youth_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def birth_month_year_youth_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def birth_month_year_youth_previous_change; end

    sig { returns(T::Boolean) }
    def birth_month_year_youth_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def birth_month_year_youth_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def birth_month_year_youth_was; end

    sig { void }
    def birth_month_year_youth_will_change!; end

    sig { returns(::Integer) }
    def casa_org_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def casa_org_id=(value); end

    sig { returns(T::Boolean) }
    def casa_org_id?; end

    sig { returns(T.nilable(::Integer)) }
    def casa_org_id_before_last_save; end

    sig { returns(T.untyped) }
    def casa_org_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def casa_org_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def casa_org_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def casa_org_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def casa_org_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def casa_org_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def casa_org_id_previous_change; end

    sig { returns(T::Boolean) }
    def casa_org_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def casa_org_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def casa_org_id_was; end

    sig { void }
    def casa_org_id_will_change!; end

    sig { returns(::String) }
    def case_number; end

    sig { params(value: ::String).returns(::String) }
    def case_number=(value); end

    sig { returns(T::Boolean) }
    def case_number?; end

    sig { returns(T.nilable(::String)) }
    def case_number_before_last_save; end

    sig { returns(T.untyped) }
    def case_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def case_number_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def case_number_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def case_number_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def case_number_changed?; end

    sig { returns(T.nilable(::String)) }
    def case_number_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def case_number_previous_change; end

    sig { returns(T::Boolean) }
    def case_number_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def case_number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def case_number_was; end

    sig { void }
    def case_number_will_change!; end

    sig { returns(T.nilable(::String)) }
    def court_report_status; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def court_report_status=(value); end

    sig { returns(T::Boolean) }
    def court_report_status?; end

    sig { returns(T.nilable(::String)) }
    def court_report_status_before_last_save; end

    sig { returns(T.untyped) }
    def court_report_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def court_report_status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def court_report_status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def court_report_status_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def court_report_status_changed?; end

    sig { returns(T.nilable(::String)) }
    def court_report_status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def court_report_status_previous_change; end

    sig { returns(T::Boolean) }
    def court_report_status_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def court_report_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def court_report_status_was; end

    sig { void }
    def court_report_status_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def court_report_submitted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def court_report_submitted_at=(value); end

    sig { returns(T::Boolean) }
    def court_report_submitted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def court_report_submitted_at_before_last_save; end

    sig { returns(T.untyped) }
    def court_report_submitted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def court_report_submitted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def court_report_submitted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def court_report_submitted_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def court_report_submitted_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def court_report_submitted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def court_report_submitted_at_previous_change; end

    sig { returns(T::Boolean) }
    def court_report_submitted_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def court_report_submitted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def court_report_submitted_at_was; end

    sig { void }
    def court_report_submitted_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def date_in_care; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def date_in_care=(value); end

    sig { returns(T::Boolean) }
    def date_in_care?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def date_in_care_before_last_save; end

    sig { returns(T.untyped) }
    def date_in_care_before_type_cast; end

    sig { returns(T::Boolean) }
    def date_in_care_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def date_in_care_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def date_in_care_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def date_in_care_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def date_in_care_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def date_in_care_previous_change; end

    sig { returns(T::Boolean) }
    def date_in_care_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def date_in_care_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def date_in_care_was; end

    sig { void }
    def date_in_care_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { void }
    def restore_active!; end

    sig { void }
    def restore_birth_month_year_youth!; end

    sig { void }
    def restore_casa_org_id!; end

    sig { void }
    def restore_case_number!; end

    sig { void }
    def restore_court_report_status!; end

    sig { void }
    def restore_court_report_submitted_at!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_date_in_care!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_slug!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_active; end

    sig { returns(T::Boolean) }
    def saved_change_to_active?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_birth_month_year_youth; end

    sig { returns(T::Boolean) }
    def saved_change_to_birth_month_year_youth?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_casa_org_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_casa_org_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_case_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_case_number?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_court_report_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_court_report_status?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_court_report_submitted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_court_report_submitted_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_date_in_care; end

    sig { returns(T::Boolean) }
    def saved_change_to_date_in_care?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_slug; end

    sig { returns(T::Boolean) }
    def saved_change_to_slug?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::String)) }
    def slug; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def slug=(value); end

    sig { returns(T::Boolean) }
    def slug?; end

    sig { returns(T.nilable(::String)) }
    def slug_before_last_save; end

    sig { returns(T.untyped) }
    def slug_before_type_cast; end

    sig { returns(T::Boolean) }
    def slug_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slug_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slug_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def slug_changed?; end

    sig { returns(T.nilable(::String)) }
    def slug_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slug_previous_change; end

    sig { returns(T::Boolean) }
    def slug_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def slug_previously_was; end

    sig { returns(T.nilable(::String)) }
    def slug_was; end

    sig { void }
    def slug_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_active?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_birth_month_year_youth?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_casa_org_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_case_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_court_report_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_court_report_submitted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_date_in_care?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slug?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def actively_assigned_excluding_volunteer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def actively_assigned_to(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def birthday_next_month(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def court_report_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def court_report_in_review(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def court_report_not_submitted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def court_report_submitted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def due_date_passed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def inactive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def is_transitioned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_assigned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_court_report_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_court_report_in_review(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_court_report_not_submitted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_court_report_submitted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def should_transition(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_attached_court_reports(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::CasaCase } }

    sig { returns(T::Array[::CasaCase]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::CasaCase } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::CasaCase } }

    sig do
      params(
        records: T.any(::CasaCase, T::Enumerable[T.any(::CasaCase, T::Enumerable[::CasaCase])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::CasaCase, T::Enumerable[T.any(::CasaCase, T::Enumerable[::CasaCase])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::CasaCase, T::Enumerable[T.any(::CasaCase, T::Enumerable[::CasaCase])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::CasaCase, Integer, String, T::Enumerable[T.any(::CasaCase, Integer, String, T::Enumerable[::CasaCase])])
      ).returns(T::Array[::CasaCase])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::CasaCase, Integer, String, T::Enumerable[T.any(::CasaCase, Integer, String, T::Enumerable[::CasaCase])])
      ).returns(T::Array[::CasaCase])
    end
    def destroy(*records); end

    sig { returns(T::Array[::CasaCase]) }
    def load_target; end

    sig do
      params(
        records: T.any(::CasaCase, T::Enumerable[T.any(::CasaCase, T::Enumerable[::CasaCase])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::CasaCase, T::Enumerable[T.any(::CasaCase, T::Enumerable[::CasaCase])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::CasaCase, T::Enumerable[T.any(::CasaCase, T::Enumerable[::CasaCase])])
      ).returns(T::Array[::CasaCase])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::CasaCase]) }
    def target; end

    sig { returns(T::Array[::CasaCase]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::CasaCase } }

    sig { returns(T::Array[::CasaCase]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::CasaCase } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
