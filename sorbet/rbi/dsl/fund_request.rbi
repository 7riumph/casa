# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `FundRequest`.
# Please instead update this file by running `bin/tapioca dsl FundRequest`.

class FundRequest
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::FundRequest).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::FundRequest).void)
      ).returns(::FundRequest)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::FundRequest).void)
      ).returns(::FundRequest)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::FundRequest).void)
      ).returns(::FundRequest)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::FundRequest).void)
      ).returns(::FundRequest)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::FundRequest).void)
      ).returns(::FundRequest)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::FundRequest]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::FundRequest)) }
    def fifth; end

    sig { returns(::FundRequest) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::FundRequest)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::FundRequest) }
    def find_by!(*args); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::FundRequest).void)
      ).returns(::FundRequest)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::FundRequest).void)
      ).returns(::FundRequest)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::FundRequest).void)
      ).returns(::FundRequest)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::FundRequest) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::FundRequest) }
    def first!; end

    sig { returns(T.nilable(::FundRequest)) }
    def forty_two; end

    sig { returns(::FundRequest) }
    def forty_two!; end

    sig { returns(T.nilable(::FundRequest)) }
    def fourth; end

    sig { returns(::FundRequest) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::FundRequest) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::FundRequest).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::FundRequest).void)
      ).returns(::FundRequest)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::FundRequest).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::FundRequest).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::FundRequest)) }
    def second; end

    sig { returns(::FundRequest) }
    def second!; end

    sig { returns(T.nilable(::FundRequest)) }
    def second_to_last; end

    sig { returns(::FundRequest) }
    def second_to_last!; end

    sig { returns(::FundRequest) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::FundRequest) }
    def take!; end

    sig { returns(T.nilable(::FundRequest)) }
    def third; end

    sig { returns(::FundRequest) }
    def third!; end

    sig { returns(T.nilable(::FundRequest)) }
    def third_to_last; end

    sig { returns(::FundRequest) }
    def third_to_last!; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def deadline; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def deadline=(value); end

    sig { returns(T::Boolean) }
    def deadline?; end

    sig { returns(T.nilable(::String)) }
    def deadline_before_last_save; end

    sig { returns(T.untyped) }
    def deadline_before_type_cast; end

    sig { returns(T::Boolean) }
    def deadline_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def deadline_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def deadline_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def deadline_changed?; end

    sig { returns(T.nilable(::String)) }
    def deadline_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def deadline_previous_change; end

    sig { returns(T::Boolean) }
    def deadline_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def deadline_previously_was; end

    sig { returns(T.nilable(::String)) }
    def deadline_was; end

    sig { void }
    def deadline_will_change!; end

    sig { returns(T.nilable(::String)) }
    def extra_information; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def extra_information=(value); end

    sig { returns(T::Boolean) }
    def extra_information?; end

    sig { returns(T.nilable(::String)) }
    def extra_information_before_last_save; end

    sig { returns(T.untyped) }
    def extra_information_before_type_cast; end

    sig { returns(T::Boolean) }
    def extra_information_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def extra_information_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def extra_information_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def extra_information_changed?; end

    sig { returns(T.nilable(::String)) }
    def extra_information_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def extra_information_previous_change; end

    sig { returns(T::Boolean) }
    def extra_information_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def extra_information_previously_was; end

    sig { returns(T.nilable(::String)) }
    def extra_information_was; end

    sig { void }
    def extra_information_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def impact; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def impact=(value); end

    sig { returns(T::Boolean) }
    def impact?; end

    sig { returns(T.nilable(::String)) }
    def impact_before_last_save; end

    sig { returns(T.untyped) }
    def impact_before_type_cast; end

    sig { returns(T::Boolean) }
    def impact_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def impact_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def impact_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def impact_changed?; end

    sig { returns(T.nilable(::String)) }
    def impact_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def impact_previous_change; end

    sig { returns(T::Boolean) }
    def impact_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def impact_previously_was; end

    sig { returns(T.nilable(::String)) }
    def impact_was; end

    sig { void }
    def impact_will_change!; end

    sig { returns(T.nilable(::String)) }
    def other_funding_source_sought; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def other_funding_source_sought=(value); end

    sig { returns(T::Boolean) }
    def other_funding_source_sought?; end

    sig { returns(T.nilable(::String)) }
    def other_funding_source_sought_before_last_save; end

    sig { returns(T.untyped) }
    def other_funding_source_sought_before_type_cast; end

    sig { returns(T::Boolean) }
    def other_funding_source_sought_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def other_funding_source_sought_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def other_funding_source_sought_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def other_funding_source_sought_changed?; end

    sig { returns(T.nilable(::String)) }
    def other_funding_source_sought_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def other_funding_source_sought_previous_change; end

    sig { returns(T::Boolean) }
    def other_funding_source_sought_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def other_funding_source_sought_previously_was; end

    sig { returns(T.nilable(::String)) }
    def other_funding_source_sought_was; end

    sig { void }
    def other_funding_source_sought_will_change!; end

    sig { returns(T.nilable(::String)) }
    def payee_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def payee_name=(value); end

    sig { returns(T::Boolean) }
    def payee_name?; end

    sig { returns(T.nilable(::String)) }
    def payee_name_before_last_save; end

    sig { returns(T.untyped) }
    def payee_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def payee_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payee_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payee_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def payee_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def payee_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payee_name_previous_change; end

    sig { returns(T::Boolean) }
    def payee_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def payee_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def payee_name_was; end

    sig { void }
    def payee_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def payment_amount; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def payment_amount=(value); end

    sig { returns(T::Boolean) }
    def payment_amount?; end

    sig { returns(T.nilable(::String)) }
    def payment_amount_before_last_save; end

    sig { returns(T.untyped) }
    def payment_amount_before_type_cast; end

    sig { returns(T::Boolean) }
    def payment_amount_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payment_amount_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payment_amount_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def payment_amount_changed?; end

    sig { returns(T.nilable(::String)) }
    def payment_amount_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payment_amount_previous_change; end

    sig { returns(T::Boolean) }
    def payment_amount_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def payment_amount_previously_was; end

    sig { returns(T.nilable(::String)) }
    def payment_amount_was; end

    sig { void }
    def payment_amount_will_change!; end

    sig { returns(T.nilable(::String)) }
    def request_purpose; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def request_purpose=(value); end

    sig { returns(T::Boolean) }
    def request_purpose?; end

    sig { returns(T.nilable(::String)) }
    def request_purpose_before_last_save; end

    sig { returns(T.untyped) }
    def request_purpose_before_type_cast; end

    sig { returns(T::Boolean) }
    def request_purpose_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def request_purpose_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def request_purpose_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def request_purpose_changed?; end

    sig { returns(T.nilable(::String)) }
    def request_purpose_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def request_purpose_previous_change; end

    sig { returns(T::Boolean) }
    def request_purpose_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def request_purpose_previously_was; end

    sig { returns(T.nilable(::String)) }
    def request_purpose_was; end

    sig { void }
    def request_purpose_will_change!; end

    sig { returns(T.nilable(::String)) }
    def requested_by_and_relationship; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def requested_by_and_relationship=(value); end

    sig { returns(T::Boolean) }
    def requested_by_and_relationship?; end

    sig { returns(T.nilable(::String)) }
    def requested_by_and_relationship_before_last_save; end

    sig { returns(T.untyped) }
    def requested_by_and_relationship_before_type_cast; end

    sig { returns(T::Boolean) }
    def requested_by_and_relationship_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def requested_by_and_relationship_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def requested_by_and_relationship_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def requested_by_and_relationship_changed?; end

    sig { returns(T.nilable(::String)) }
    def requested_by_and_relationship_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def requested_by_and_relationship_previous_change; end

    sig { returns(T::Boolean) }
    def requested_by_and_relationship_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def requested_by_and_relationship_previously_was; end

    sig { returns(T.nilable(::String)) }
    def requested_by_and_relationship_was; end

    sig { void }
    def requested_by_and_relationship_will_change!; end

    sig { void }
    def restore_deadline!; end

    sig { void }
    def restore_extra_information!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_impact!; end

    sig { void }
    def restore_other_funding_source_sought!; end

    sig { void }
    def restore_payee_name!; end

    sig { void }
    def restore_payment_amount!; end

    sig { void }
    def restore_request_purpose!; end

    sig { void }
    def restore_requested_by_and_relationship!; end

    sig { void }
    def restore_submitter_email!; end

    sig { void }
    def restore_timestamps!; end

    sig { void }
    def restore_youth_name!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_deadline; end

    sig { returns(T::Boolean) }
    def saved_change_to_deadline?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_extra_information; end

    sig { returns(T::Boolean) }
    def saved_change_to_extra_information?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_impact; end

    sig { returns(T::Boolean) }
    def saved_change_to_impact?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_other_funding_source_sought; end

    sig { returns(T::Boolean) }
    def saved_change_to_other_funding_source_sought?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_payee_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_payee_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_payment_amount; end

    sig { returns(T::Boolean) }
    def saved_change_to_payment_amount?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_request_purpose; end

    sig { returns(T::Boolean) }
    def saved_change_to_request_purpose?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_requested_by_and_relationship; end

    sig { returns(T::Boolean) }
    def saved_change_to_requested_by_and_relationship?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_submitter_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_submitter_email?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_timestamps; end

    sig { returns(T::Boolean) }
    def saved_change_to_timestamps?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_youth_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_youth_name?; end

    sig { returns(T.nilable(::String)) }
    def submitter_email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def submitter_email=(value); end

    sig { returns(T::Boolean) }
    def submitter_email?; end

    sig { returns(T.nilable(::String)) }
    def submitter_email_before_last_save; end

    sig { returns(T.untyped) }
    def submitter_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def submitter_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def submitter_email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def submitter_email_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def submitter_email_changed?; end

    sig { returns(T.nilable(::String)) }
    def submitter_email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def submitter_email_previous_change; end

    sig { returns(T::Boolean) }
    def submitter_email_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def submitter_email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def submitter_email_was; end

    sig { void }
    def submitter_email_will_change!; end

    sig { returns(T.nilable(::String)) }
    def timestamps; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def timestamps=(value); end

    sig { returns(T::Boolean) }
    def timestamps?; end

    sig { returns(T.nilable(::String)) }
    def timestamps_before_last_save; end

    sig { returns(T.untyped) }
    def timestamps_before_type_cast; end

    sig { returns(T::Boolean) }
    def timestamps_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timestamps_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timestamps_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def timestamps_changed?; end

    sig { returns(T.nilable(::String)) }
    def timestamps_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timestamps_previous_change; end

    sig { returns(T::Boolean) }
    def timestamps_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def timestamps_previously_was; end

    sig { returns(T.nilable(::String)) }
    def timestamps_was; end

    sig { void }
    def timestamps_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deadline?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_extra_information?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_impact?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_other_funding_source_sought?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payee_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payment_amount?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_request_purpose?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_requested_by_and_relationship?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_submitter_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_timestamps?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_youth_name?; end

    sig { returns(T.nilable(::String)) }
    def youth_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def youth_name=(value); end

    sig { returns(T::Boolean) }
    def youth_name?; end

    sig { returns(T.nilable(::String)) }
    def youth_name_before_last_save; end

    sig { returns(T.untyped) }
    def youth_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def youth_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def youth_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def youth_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def youth_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def youth_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def youth_name_previous_change; end

    sig { returns(T::Boolean) }
    def youth_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def youth_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def youth_name_was; end

    sig { void }
    def youth_name_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::FundRequest } }

    sig { returns(T::Array[::FundRequest]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::FundRequest } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::FundRequest } }

    sig do
      params(
        records: T.any(::FundRequest, T::Enumerable[T.any(::FundRequest, T::Enumerable[::FundRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::FundRequest, T::Enumerable[T.any(::FundRequest, T::Enumerable[::FundRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::FundRequest, T::Enumerable[T.any(::FundRequest, T::Enumerable[::FundRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::FundRequest, Integer, String, T::Enumerable[T.any(::FundRequest, Integer, String, T::Enumerable[::FundRequest])])
      ).returns(T::Array[::FundRequest])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::FundRequest, Integer, String, T::Enumerable[T.any(::FundRequest, Integer, String, T::Enumerable[::FundRequest])])
      ).returns(T::Array[::FundRequest])
    end
    def destroy(*records); end

    sig { returns(T::Array[::FundRequest]) }
    def load_target; end

    sig do
      params(
        records: T.any(::FundRequest, T::Enumerable[T.any(::FundRequest, T::Enumerable[::FundRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::FundRequest, T::Enumerable[T.any(::FundRequest, T::Enumerable[::FundRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::FundRequest, T::Enumerable[T.any(::FundRequest, T::Enumerable[::FundRequest])])
      ).returns(T::Array[::FundRequest])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::FundRequest]) }
    def target; end

    sig { returns(T::Array[::FundRequest]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::FundRequest } }

    sig { returns(T::Array[::FundRequest]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::FundRequest } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
