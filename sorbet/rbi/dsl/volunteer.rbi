# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Volunteer`.
# Please instead update this file by running `bin/tapioca dsl Volunteer`.

class Volunteer
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Volunteer).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Volunteer).void)
      ).returns(::Volunteer)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Volunteer).void)
      ).returns(::Volunteer)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Volunteer).void)
      ).returns(::Volunteer)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Volunteer).void)
      ).returns(::Volunteer)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Volunteer).void)
      ).returns(::Volunteer)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Volunteer]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Volunteer)) }
    def fifth; end

    sig { returns(::Volunteer) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Volunteer)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Volunteer) }
    def find_by!(*args); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Volunteer).void)
      ).returns(::Volunteer)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Volunteer).void)
      ).returns(::Volunteer)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Volunteer).void)
      ).returns(::Volunteer)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Volunteer) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Volunteer) }
    def first!; end

    sig { returns(T.nilable(::Volunteer)) }
    def forty_two; end

    sig { returns(::Volunteer) }
    def forty_two!; end

    sig { returns(T.nilable(::Volunteer)) }
    def fourth; end

    sig { returns(::Volunteer) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Volunteer) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Volunteer).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Volunteer).void)
      ).returns(::Volunteer)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Volunteer).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Volunteer).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Volunteer)) }
    def second; end

    sig { returns(::Volunteer) }
    def second!; end

    sig { returns(T.nilable(::Volunteer)) }
    def second_to_last; end

    sig { returns(::Volunteer) }
    def second_to_last!; end

    sig { returns(::Volunteer) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Volunteer) }
    def take!; end

    sig { returns(T.nilable(::Volunteer)) }
    def third; end

    sig { returns(::Volunteer) }
    def third!; end

    sig { returns(T.nilable(::Volunteer)) }
    def third_to_last; end

    sig { returns(::Volunteer) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::Address)) }
    def address; end

    sig { params(value: T.nilable(::Address)).void }
    def address=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def address_attributes=(attributes); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Address) }
    def build_address(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CasaOrg) }
    def build_casa_org(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PreferenceSet) }
    def build_preference_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_supervisor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SupervisorVolunteer) }
    def build_supervisor_volunteer(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def casa_case_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def casa_case_ids=(ids); end

    sig { returns(::CasaCase::PrivateCollectionProxy) }
    def casa_cases; end

    sig { params(value: T::Enumerable[::CasaCase]).void }
    def casa_cases=(value); end

    sig { returns(T.nilable(::CasaOrg)) }
    def casa_org; end

    sig { params(value: T.nilable(::CasaOrg)).void }
    def casa_org=(value); end

    sig { returns(T::Array[T.untyped]) }
    def case_assignment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def case_assignment_ids=(ids); end

    sig { returns(::CaseAssignment::PrivateCollectionProxy) }
    def case_assignments; end

    sig { params(value: T::Enumerable[::CaseAssignment]).void }
    def case_assignments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def case_contact_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def case_contact_ids=(ids); end

    sig { returns(::CaseContact::PrivateCollectionProxy) }
    def case_contacts; end

    sig { params(value: T::Enumerable[::CaseContact]).void }
    def case_contacts=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Address) }
    def create_address(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Address) }
    def create_address!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CasaOrg) }
    def create_casa_org(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CasaOrg) }
    def create_casa_org!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PreferenceSet) }
    def create_preference_set(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PreferenceSet) }
    def create_preference_set!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_supervisor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_supervisor!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SupervisorVolunteer) }
    def create_supervisor_volunteer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SupervisorVolunteer) }
    def create_supervisor_volunteer!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def followup_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def followup_ids=(ids); end

    sig { returns(::Followup::PrivateCollectionProxy) }
    def followups; end

    sig { params(value: T::Enumerable[::Followup]).void }
    def followups=(value); end

    sig { returns(T.untyped) }
    def invited_by; end

    sig { params(value: T.untyped).void }
    def invited_by=(value); end

    sig { returns(T::Array[T.untyped]) }
    def language_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def language_ids=(ids); end

    sig { returns(::Language::PrivateCollectionProxy) }
    def languages; end

    sig { params(value: T::Enumerable[::Language]).void }
    def languages=(value); end

    sig { returns(T::Array[T.untyped]) }
    def learning_hour_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def learning_hour_ids=(ids); end

    sig { returns(::LearningHour::PrivateCollectionProxy) }
    def learning_hours; end

    sig { params(value: T::Enumerable[::LearningHour]).void }
    def learning_hours=(value); end

    sig { returns(T::Array[T.untyped]) }
    def note_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def note_ids=(ids); end

    sig { returns(::Note::PrivateCollectionProxy) }
    def notes; end

    sig { params(value: T::Enumerable[::Note]).void }
    def notes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def notification_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def notification_ids=(ids); end

    sig { returns(::Notification::PrivateCollectionProxy) }
    def notifications; end

    sig { params(value: T::Enumerable[::Notification]).void }
    def notifications=(value); end

    sig { returns(::OtherDuty::PrivateCollectionProxy) }
    def other_duties; end

    sig { params(value: T::Enumerable[::OtherDuty]).void }
    def other_duties=(value); end

    sig { returns(T::Array[T.untyped]) }
    def other_duty_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def other_duty_ids=(ids); end

    sig { returns(T.nilable(::PreferenceSet)) }
    def preference_set; end

    sig { params(value: T.nilable(::PreferenceSet)).void }
    def preference_set=(value); end

    sig { returns(T.nilable(::Address)) }
    def reload_address; end

    sig { returns(T.nilable(::CasaOrg)) }
    def reload_casa_org; end

    sig { returns(T.untyped) }
    def reload_invited_by; end

    sig { returns(T.nilable(::PreferenceSet)) }
    def reload_preference_set; end

    sig { returns(T.nilable(::User)) }
    def reload_supervisor; end

    sig { returns(T.nilable(::SupervisorVolunteer)) }
    def reload_supervisor_volunteer; end

    sig { returns(T::Array[T.untyped]) }
    def sent_email_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sent_email_ids=(ids); end

    sig { returns(::SentEmail::PrivateCollectionProxy) }
    def sent_emails; end

    sig { params(value: T::Enumerable[::SentEmail]).void }
    def sent_emails=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sms_notification_event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sms_notification_event_ids=(ids); end

    sig { returns(::SmsNotificationEvent::PrivateCollectionProxy) }
    def sms_notification_events; end

    sig { params(value: T::Enumerable[::SmsNotificationEvent]).void }
    def sms_notification_events=(value); end

    sig { returns(T.nilable(::User)) }
    def supervisor; end

    sig { params(value: T.nilable(::User)).void }
    def supervisor=(value); end

    sig { returns(T.nilable(::SupervisorVolunteer)) }
    def supervisor_volunteer; end

    sig { params(value: T.nilable(::SupervisorVolunteer)).void }
    def supervisor_volunteer=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_language_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_language_ids=(ids); end

    sig { returns(::UserLanguage::PrivateCollectionProxy) }
    def user_languages; end

    sig { params(value: T::Enumerable[::UserLanguage]).void }
    def user_languages=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_sms_notification_event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_sms_notification_event_ids=(ids); end

    sig { returns(::UserSmsNotificationEvent::PrivateCollectionProxy) }
    def user_sms_notification_events; end

    sig { params(value: T::Enumerable[::UserSmsNotificationEvent]).void }
    def user_sms_notification_events=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def user_sms_notification_events_attributes=(attributes); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_by_invite(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def inactive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invitation_accepted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invitation_not_accepted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def no_active_invitation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_assigned_cases(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_no_assigned_cases(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_no_supervisor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(T::Boolean)) }
    def active; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def active=(value); end

    sig { returns(T::Boolean) }
    def active?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_before_last_save; end

    sig { returns(T.untyped) }
    def active_before_type_cast; end

    sig { returns(T::Boolean) }
    def active_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def active_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_previous_change; end

    sig { returns(T::Boolean) }
    def active_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_was; end

    sig { void }
    def active_will_change!; end

    sig { returns(::Integer) }
    def casa_org_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def casa_org_id=(value); end

    sig { returns(T::Boolean) }
    def casa_org_id?; end

    sig { returns(T.nilable(::Integer)) }
    def casa_org_id_before_last_save; end

    sig { returns(T.untyped) }
    def casa_org_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def casa_org_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def casa_org_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def casa_org_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def casa_org_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def casa_org_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def casa_org_id_previous_change; end

    sig { returns(T::Boolean) }
    def casa_org_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def casa_org_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def casa_org_id_was; end

    sig { void }
    def casa_org_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at=(value); end

    sig { returns(T::Boolean) }
    def current_sign_in_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_before_last_save; end

    sig { returns(T.untyped) }
    def current_sign_in_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def current_sign_in_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def current_sign_in_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_previous_change; end

    sig { returns(T::Boolean) }
    def current_sign_in_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_was; end

    sig { void }
    def current_sign_in_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def current_sign_in_ip=(value); end

    sig { returns(T::Boolean) }
    def current_sign_in_ip?; end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip_before_last_save; end

    sig { returns(T.untyped) }
    def current_sign_in_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def current_sign_in_ip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def current_sign_in_ip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def current_sign_in_ip_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def current_sign_in_ip_changed?; end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def current_sign_in_ip_previous_change; end

    sig { returns(T::Boolean) }
    def current_sign_in_ip_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip_was; end

    sig { void }
    def current_sign_in_ip_will_change!; end

    sig { returns(::String) }
    def display_name; end

    sig { params(value: ::String).returns(::String) }
    def display_name=(value); end

    sig { returns(T::Boolean) }
    def display_name?; end

    sig { returns(T.nilable(::String)) }
    def display_name_before_last_save; end

    sig { returns(T.untyped) }
    def display_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def display_name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def display_name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def display_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def display_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def display_name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def display_name_previous_change; end

    sig { returns(T::Boolean) }
    def display_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def display_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def display_name_was; end

    sig { void }
    def display_name_will_change!; end

    sig { returns(::String) }
    def email; end

    sig { params(value: ::String).returns(::String) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def email_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_previous_change; end

    sig { returns(T::Boolean) }
    def email_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(::String) }
    def encrypted_password; end

    sig { params(value: ::String).returns(::String) }
    def encrypted_password=(value); end

    sig { returns(T::Boolean) }
    def encrypted_password?; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_before_last_save; end

    sig { returns(T.untyped) }
    def encrypted_password_before_type_cast; end

    sig { returns(T::Boolean) }
    def encrypted_password_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def encrypted_password_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def encrypted_password_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def encrypted_password_changed?; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def encrypted_password_previous_change; end

    sig { returns(T::Boolean) }
    def encrypted_password_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_previously_was; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_was; end

    sig { void }
    def encrypted_password_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_accepted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_accepted_at=(value); end

    sig { returns(T::Boolean) }
    def invitation_accepted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_accepted_at_before_last_save; end

    sig { returns(T.untyped) }
    def invitation_accepted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def invitation_accepted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_accepted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_accepted_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invitation_accepted_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_accepted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_accepted_at_previous_change; end

    sig { returns(T::Boolean) }
    def invitation_accepted_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_accepted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_accepted_at_was; end

    sig { void }
    def invitation_accepted_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_created_at=(value); end

    sig { returns(T::Boolean) }
    def invitation_created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_created_at_before_last_save; end

    sig { returns(T.untyped) }
    def invitation_created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def invitation_created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invitation_created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_created_at_previous_change; end

    sig { returns(T::Boolean) }
    def invitation_created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_created_at_was; end

    sig { void }
    def invitation_created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def invitation_limit; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def invitation_limit=(value); end

    sig { returns(T::Boolean) }
    def invitation_limit?; end

    sig { returns(T.nilable(::Integer)) }
    def invitation_limit_before_last_save; end

    sig { returns(T.untyped) }
    def invitation_limit_before_type_cast; end

    sig { returns(T::Boolean) }
    def invitation_limit_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invitation_limit_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invitation_limit_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invitation_limit_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def invitation_limit_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invitation_limit_previous_change; end

    sig { returns(T::Boolean) }
    def invitation_limit_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def invitation_limit_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def invitation_limit_was; end

    sig { void }
    def invitation_limit_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_sent_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_sent_at=(value); end

    sig { returns(T::Boolean) }
    def invitation_sent_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_sent_at_before_last_save; end

    sig { returns(T.untyped) }
    def invitation_sent_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def invitation_sent_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_sent_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_sent_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invitation_sent_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_sent_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def invitation_sent_at_previous_change; end

    sig { returns(T::Boolean) }
    def invitation_sent_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_sent_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def invitation_sent_at_was; end

    sig { void }
    def invitation_sent_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def invitation_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def invitation_token=(value); end

    sig { returns(T::Boolean) }
    def invitation_token?; end

    sig { returns(T.nilable(::String)) }
    def invitation_token_before_last_save; end

    sig { returns(T.untyped) }
    def invitation_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def invitation_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invitation_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invitation_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invitation_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def invitation_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invitation_token_previous_change; end

    sig { returns(T::Boolean) }
    def invitation_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def invitation_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def invitation_token_was; end

    sig { void }
    def invitation_token_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def invitations_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def invitations_count=(value); end

    sig { returns(T::Boolean) }
    def invitations_count?; end

    sig { returns(T.nilable(::Integer)) }
    def invitations_count_before_last_save; end

    sig { returns(T.untyped) }
    def invitations_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def invitations_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invitations_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invitations_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invitations_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def invitations_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invitations_count_previous_change; end

    sig { returns(T::Boolean) }
    def invitations_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def invitations_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def invitations_count_was; end

    sig { void }
    def invitations_count_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def invited_by_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def invited_by_id=(value); end

    sig { returns(T::Boolean) }
    def invited_by_id?; end

    sig { returns(T.nilable(::Integer)) }
    def invited_by_id_before_last_save; end

    sig { returns(T.untyped) }
    def invited_by_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def invited_by_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invited_by_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invited_by_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invited_by_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def invited_by_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def invited_by_id_previous_change; end

    sig { returns(T::Boolean) }
    def invited_by_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def invited_by_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def invited_by_id_was; end

    sig { void }
    def invited_by_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def invited_by_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def invited_by_type=(value); end

    sig { returns(T::Boolean) }
    def invited_by_type?; end

    sig { returns(T.nilable(::String)) }
    def invited_by_type_before_last_save; end

    sig { returns(T.untyped) }
    def invited_by_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def invited_by_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invited_by_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invited_by_type_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def invited_by_type_changed?; end

    sig { returns(T.nilable(::String)) }
    def invited_by_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def invited_by_type_previous_change; end

    sig { returns(T::Boolean) }
    def invited_by_type_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def invited_by_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def invited_by_type_was; end

    sig { void }
    def invited_by_type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at=(value); end

    sig { returns(T::Boolean) }
    def last_sign_in_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_sign_in_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_sign_in_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def last_sign_in_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_previous_change; end

    sig { returns(T::Boolean) }
    def last_sign_in_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_was; end

    sig { void }
    def last_sign_in_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_sign_in_ip=(value); end

    sig { returns(T::Boolean) }
    def last_sign_in_ip?; end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip_before_last_save; end

    sig { returns(T.untyped) }
    def last_sign_in_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_sign_in_ip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sign_in_ip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sign_in_ip_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def last_sign_in_ip_changed?; end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sign_in_ip_previous_change; end

    sig { returns(T::Boolean) }
    def last_sign_in_ip_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip_was; end

    sig { void }
    def last_sign_in_ip_will_change!; end

    sig { returns(T.nilable(::String)) }
    def phone_number; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def phone_number=(value); end

    sig { returns(T::Boolean) }
    def phone_number?; end

    sig { returns(T.nilable(::String)) }
    def phone_number_before_last_save; end

    sig { returns(T.untyped) }
    def phone_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def phone_number_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_number_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_number_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def phone_number_changed?; end

    sig { returns(T.nilable(::String)) }
    def phone_number_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def phone_number_previous_change; end

    sig { returns(T::Boolean) }
    def phone_number_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def phone_number_previously_was; end

    sig { returns(T.nilable(::String)) }
    def phone_number_was; end

    sig { void }
    def phone_number_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def receive_email_notifications; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def receive_email_notifications=(value); end

    sig { returns(T::Boolean) }
    def receive_email_notifications?; end

    sig { returns(T.nilable(T::Boolean)) }
    def receive_email_notifications_before_last_save; end

    sig { returns(T.untyped) }
    def receive_email_notifications_before_type_cast; end

    sig { returns(T::Boolean) }
    def receive_email_notifications_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def receive_email_notifications_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def receive_email_notifications_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def receive_email_notifications_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def receive_email_notifications_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def receive_email_notifications_previous_change; end

    sig { returns(T::Boolean) }
    def receive_email_notifications_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def receive_email_notifications_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def receive_email_notifications_was; end

    sig { void }
    def receive_email_notifications_will_change!; end

    sig { returns(T::Boolean) }
    def receive_sms_notifications; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def receive_sms_notifications=(value); end

    sig { returns(T::Boolean) }
    def receive_sms_notifications?; end

    sig { returns(T.nilable(T::Boolean)) }
    def receive_sms_notifications_before_last_save; end

    sig { returns(T.untyped) }
    def receive_sms_notifications_before_type_cast; end

    sig { returns(T::Boolean) }
    def receive_sms_notifications_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def receive_sms_notifications_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def receive_sms_notifications_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def receive_sms_notifications_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def receive_sms_notifications_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def receive_sms_notifications_previous_change; end

    sig { returns(T::Boolean) }
    def receive_sms_notifications_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def receive_sms_notifications_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def receive_sms_notifications_was; end

    sig { void }
    def receive_sms_notifications_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at=(value); end

    sig { returns(T::Boolean) }
    def reset_password_sent_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_before_last_save; end

    sig { returns(T.untyped) }
    def reset_password_sent_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def reset_password_sent_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_sent_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_sent_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def reset_password_sent_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_sent_at_previous_change; end

    sig { returns(T::Boolean) }
    def reset_password_sent_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_was; end

    sig { void }
    def reset_password_sent_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def reset_password_token=(value); end

    sig { returns(T::Boolean) }
    def reset_password_token?; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_before_last_save; end

    sig { returns(T.untyped) }
    def reset_password_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def reset_password_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def reset_password_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_previous_change; end

    sig { returns(T::Boolean) }
    def reset_password_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_was; end

    sig { void }
    def reset_password_token_will_change!; end

    sig { void }
    def restore_active!; end

    sig { void }
    def restore_casa_org_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_current_sign_in_at!; end

    sig { void }
    def restore_current_sign_in_ip!; end

    sig { void }
    def restore_display_name!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_encrypted_password!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_invitation_accepted_at!; end

    sig { void }
    def restore_invitation_created_at!; end

    sig { void }
    def restore_invitation_limit!; end

    sig { void }
    def restore_invitation_sent_at!; end

    sig { void }
    def restore_invitation_token!; end

    sig { void }
    def restore_invitations_count!; end

    sig { void }
    def restore_invited_by_id!; end

    sig { void }
    def restore_invited_by_type!; end

    sig { void }
    def restore_last_sign_in_at!; end

    sig { void }
    def restore_last_sign_in_ip!; end

    sig { void }
    def restore_phone_number!; end

    sig { void }
    def restore_receive_email_notifications!; end

    sig { void }
    def restore_receive_sms_notifications!; end

    sig { void }
    def restore_reset_password_sent_at!; end

    sig { void }
    def restore_reset_password_token!; end

    sig { void }
    def restore_sign_in_count!; end

    sig { void }
    def restore_type!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_active; end

    sig { returns(T::Boolean) }
    def saved_change_to_active?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_casa_org_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_casa_org_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_current_sign_in_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_current_sign_in_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_current_sign_in_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_current_sign_in_ip?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_display_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_display_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_encrypted_password; end

    sig { returns(T::Boolean) }
    def saved_change_to_encrypted_password?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_invitation_accepted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_invitation_accepted_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_invitation_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_invitation_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_invitation_limit; end

    sig { returns(T::Boolean) }
    def saved_change_to_invitation_limit?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_invitation_sent_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_invitation_sent_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_invitation_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_invitation_token?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_invitations_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_invitations_count?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_invited_by_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_invited_by_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_invited_by_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_invited_by_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_sign_in_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_sign_in_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_sign_in_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_sign_in_ip?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_phone_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_phone_number?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_receive_email_notifications; end

    sig { returns(T::Boolean) }
    def saved_change_to_receive_email_notifications?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_receive_sms_notifications; end

    sig { returns(T::Boolean) }
    def saved_change_to_receive_sms_notifications?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_reset_password_sent_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_reset_password_sent_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_reset_password_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_reset_password_token?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sign_in_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_sign_in_count?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(::Integer) }
    def sign_in_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sign_in_count=(value); end

    sig { returns(T::Boolean) }
    def sign_in_count?; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_before_last_save; end

    sig { returns(T.untyped) }
    def sign_in_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def sign_in_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def sign_in_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_previous_change; end

    sig { returns(T::Boolean) }
    def sign_in_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_was; end

    sig { void }
    def sign_in_count_will_change!; end

    sig { returns(T.nilable(::String)) }
    def type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def type=(value); end

    sig { returns(T::Boolean) }
    def type?; end

    sig { returns(T.nilable(::String)) }
    def type_before_last_save; end

    sig { returns(T.untyped) }
    def type_before_type_cast; end

    sig { returns(T::Boolean) }
    def type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def type_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def type_changed?; end

    sig { returns(T.nilable(::String)) }
    def type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def type_previous_change; end

    sig { returns(T::Boolean) }
    def type_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def type_was; end

    sig { void }
    def type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_active?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_casa_org_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_current_sign_in_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_current_sign_in_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_display_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_encrypted_password?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invitation_accepted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invitation_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invitation_limit?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invitation_sent_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invitation_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invitations_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invited_by_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_invited_by_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_sign_in_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_sign_in_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_phone_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_receive_email_notifications?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_receive_sms_notifications?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reset_password_sent_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reset_password_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sign_in_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_by_invite(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def inactive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invitation_accepted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invitation_not_accepted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def no_active_invitation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_assigned_cases(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_no_assigned_cases(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_no_supervisor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Volunteer } }

    sig { returns(T::Array[::Volunteer]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Volunteer } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Volunteer } }

    sig do
      params(
        records: T.any(::Volunteer, T::Enumerable[T.any(::Volunteer, T::Enumerable[::Volunteer])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Volunteer, T::Enumerable[T.any(::Volunteer, T::Enumerable[::Volunteer])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Volunteer, T::Enumerable[T.any(::Volunteer, T::Enumerable[::Volunteer])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Volunteer, Integer, String, T::Enumerable[T.any(::Volunteer, Integer, String, T::Enumerable[::Volunteer])])
      ).returns(T::Array[::Volunteer])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Volunteer, Integer, String, T::Enumerable[T.any(::Volunteer, Integer, String, T::Enumerable[::Volunteer])])
      ).returns(T::Array[::Volunteer])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Volunteer]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Volunteer, T::Enumerable[T.any(::Volunteer, T::Enumerable[::Volunteer])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Volunteer, T::Enumerable[T.any(::Volunteer, T::Enumerable[::Volunteer])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Volunteer, T::Enumerable[T.any(::Volunteer, T::Enumerable[::Volunteer])])
      ).returns(T::Array[::Volunteer])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Volunteer]) }
    def target; end

    sig { returns(T::Array[::Volunteer]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Volunteer } }

    sig { returns(T::Array[::Volunteer]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Volunteer } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
