# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `CaseContact`.
# Please instead update this file by running `bin/tapioca dsl CaseContact`.

class CaseContact
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::CaseContact).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CaseContact).void)
      ).returns(::CaseContact)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CaseContact).void)
      ).returns(::CaseContact)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CaseContact).void)
      ).returns(::CaseContact)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CaseContact).void)
      ).returns(::CaseContact)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CaseContact).void)
      ).returns(::CaseContact)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::CaseContact]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::CaseContact)) }
    def fifth; end

    sig { returns(::CaseContact) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::CaseContact)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::CaseContact) }
    def find_by!(*args); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CaseContact).void)
      ).returns(::CaseContact)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CaseContact).void)
      ).returns(::CaseContact)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CaseContact).void)
      ).returns(::CaseContact)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::CaseContact) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::CaseContact) }
    def first!; end

    sig { returns(T.nilable(::CaseContact)) }
    def forty_two; end

    sig { returns(::CaseContact) }
    def forty_two!; end

    sig { returns(T.nilable(::CaseContact)) }
    def fourth; end

    sig { returns(::CaseContact) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::CaseContact) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::CaseContact).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::CaseContact).void)
      ).returns(::CaseContact)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::CaseContact).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::CaseContact).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::CaseContact)) }
    def second; end

    sig { returns(::CaseContact) }
    def second!; end

    sig { returns(T.nilable(::CaseContact)) }
    def second_to_last; end

    sig { returns(::CaseContact) }
    def second_to_last!; end

    sig { returns(::CaseContact) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::CaseContact) }
    def take!; end

    sig { returns(T.nilable(::CaseContact)) }
    def third; end

    sig { returns(::CaseContact) }
    def third!; end

    sig { returns(T.nilable(::CaseContact)) }
    def third_to_last; end

    sig { returns(::CaseContact) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def additional_expense_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def additional_expense_ids=(ids); end

    sig { returns(::AdditionalExpense::PrivateCollectionProxy) }
    def additional_expenses; end

    sig { params(value: T::Enumerable[::AdditionalExpense]).void }
    def additional_expenses=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def additional_expenses_attributes=(attributes); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CasaCase) }
    def build_casa_case(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_creator(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_supervisor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SupervisorVolunteer) }
    def build_supervisor_volunteer(*args, &blk); end

    sig { returns(T.nilable(::CasaCase)) }
    def casa_case; end

    sig { params(value: T.nilable(::CasaCase)).void }
    def casa_case=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def casa_case_attributes=(attributes); end

    sig { returns(::CaseContactContactType::PrivateCollectionProxy) }
    def case_contact_contact_type; end

    sig { params(value: T::Enumerable[::CaseContactContactType]).void }
    def case_contact_contact_type=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def case_contact_contact_type_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def case_contact_contact_type_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def case_contact_contact_type_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def contact_type_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def contact_type_ids=(ids); end

    sig { returns(::ContactType::PrivateCollectionProxy) }
    def contact_types; end

    sig { params(value: T::Enumerable[::ContactType]).void }
    def contact_types=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CasaCase) }
    def create_casa_case(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CasaCase) }
    def create_casa_case!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_creator(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_creator!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_supervisor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_supervisor!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SupervisorVolunteer) }
    def create_supervisor_volunteer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SupervisorVolunteer) }
    def create_supervisor_volunteer!(*args, &blk); end

    sig { returns(T.nilable(::User)) }
    def creator; end

    sig { params(value: T.nilable(::User)).void }
    def creator=(value); end

    sig { returns(T::Array[T.untyped]) }
    def followup_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def followup_ids=(ids); end

    sig { returns(::Followup::PrivateCollectionProxy) }
    def followups; end

    sig { params(value: T::Enumerable[::Followup]).void }
    def followups=(value); end

    sig { returns(T.nilable(::CasaCase)) }
    def reload_casa_case; end

    sig { returns(T.nilable(::User)) }
    def reload_creator; end

    sig { returns(T.nilable(::User)) }
    def reload_supervisor; end

    sig { returns(T.nilable(::SupervisorVolunteer)) }
    def reload_supervisor_volunteer; end

    sig { returns(T.nilable(::User)) }
    def supervisor; end

    sig { params(value: T.nilable(::User)).void }
    def supervisor=(value); end

    sig { returns(T.nilable(::SupervisorVolunteer)) }
    def supervisor_volunteer; end

    sig { params(value: T.nilable(::SupervisorVolunteer)).void }
    def supervisor_volunteer=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def casa_org(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def contact_made(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def contact_medium(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def contact_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def contact_type_groups(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def contact_types(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_max_ago(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def creators(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_reimbursement_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def grab_all(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def has_transitioned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def occurred_between(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def occurred_ending_at(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def occurred_starting_at(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sorted_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def supervisors(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def want_driving_reimbursement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::Integer) }
    def casa_case_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def casa_case_id=(value); end

    sig { returns(T::Boolean) }
    def casa_case_id?; end

    sig { returns(T.nilable(::Integer)) }
    def casa_case_id_before_last_save; end

    sig { returns(T.untyped) }
    def casa_case_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def casa_case_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def casa_case_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def casa_case_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def casa_case_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def casa_case_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def casa_case_id_previous_change; end

    sig { returns(T::Boolean) }
    def casa_case_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def casa_case_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def casa_case_id_was; end

    sig { void }
    def casa_case_id_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def contact_made; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def contact_made=(value); end

    sig { returns(T::Boolean) }
    def contact_made?; end

    sig { returns(T.nilable(T::Boolean)) }
    def contact_made_before_last_save; end

    sig { returns(T.untyped) }
    def contact_made_before_type_cast; end

    sig { returns(T::Boolean) }
    def contact_made_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def contact_made_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def contact_made_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def contact_made_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def contact_made_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def contact_made_previous_change; end

    sig { returns(T::Boolean) }
    def contact_made_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def contact_made_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def contact_made_was; end

    sig { void }
    def contact_made_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Integer) }
    def creator_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def creator_id=(value); end

    sig { returns(T::Boolean) }
    def creator_id?; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_before_last_save; end

    sig { returns(T.untyped) }
    def creator_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def creator_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def creator_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def creator_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def creator_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def creator_id_previous_change; end

    sig { returns(T::Boolean) }
    def creator_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_was; end

    sig { void }
    def creator_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at=(value); end

    sig { returns(T::Boolean) }
    def deleted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_before_last_save; end

    sig { returns(T.untyped) }
    def deleted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def deleted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def deleted_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_previous_change; end

    sig { returns(T::Boolean) }
    def deleted_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_was; end

    sig { void }
    def deleted_at_will_change!; end

    sig { returns(::Integer) }
    def duration_minutes; end

    sig { params(value: ::Integer).returns(::Integer) }
    def duration_minutes=(value); end

    sig { returns(T::Boolean) }
    def duration_minutes?; end

    sig { returns(T.nilable(::Integer)) }
    def duration_minutes_before_last_save; end

    sig { returns(T.untyped) }
    def duration_minutes_before_type_cast; end

    sig { returns(T::Boolean) }
    def duration_minutes_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def duration_minutes_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def duration_minutes_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def duration_minutes_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def duration_minutes_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def duration_minutes_previous_change; end

    sig { returns(T::Boolean) }
    def duration_minutes_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def duration_minutes_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def duration_minutes_was; end

    sig { void }
    def duration_minutes_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def medium_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def medium_type=(value); end

    sig { returns(T::Boolean) }
    def medium_type?; end

    sig { returns(T.nilable(::String)) }
    def medium_type_before_last_save; end

    sig { returns(T.untyped) }
    def medium_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def medium_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def medium_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def medium_type_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def medium_type_changed?; end

    sig { returns(T.nilable(::String)) }
    def medium_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def medium_type_previous_change; end

    sig { returns(T::Boolean) }
    def medium_type_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def medium_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def medium_type_was; end

    sig { void }
    def medium_type_will_change!; end

    sig { returns(::Integer) }
    def miles_driven; end

    sig { params(value: ::Integer).returns(::Integer) }
    def miles_driven=(value); end

    sig { returns(T::Boolean) }
    def miles_driven?; end

    sig { returns(T.nilable(::Integer)) }
    def miles_driven_before_last_save; end

    sig { returns(T.untyped) }
    def miles_driven_before_type_cast; end

    sig { returns(T::Boolean) }
    def miles_driven_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def miles_driven_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def miles_driven_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def miles_driven_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def miles_driven_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def miles_driven_previous_change; end

    sig { returns(T::Boolean) }
    def miles_driven_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def miles_driven_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def miles_driven_was; end

    sig { void }
    def miles_driven_will_change!; end

    sig { returns(T.nilable(::String)) }
    def notes; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def notes=(value); end

    sig { returns(T::Boolean) }
    def notes?; end

    sig { returns(T.nilable(::String)) }
    def notes_before_last_save; end

    sig { returns(T.untyped) }
    def notes_before_type_cast; end

    sig { returns(T::Boolean) }
    def notes_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notes_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notes_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def notes_changed?; end

    sig { returns(T.nilable(::String)) }
    def notes_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def notes_previous_change; end

    sig { returns(T::Boolean) }
    def notes_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def notes_previously_was; end

    sig { returns(T.nilable(::String)) }
    def notes_was; end

    sig { void }
    def notes_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def occurred_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def occurred_at=(value); end

    sig { returns(T::Boolean) }
    def occurred_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def occurred_at_before_last_save; end

    sig { returns(T.untyped) }
    def occurred_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def occurred_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def occurred_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def occurred_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def occurred_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def occurred_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def occurred_at_previous_change; end

    sig { returns(T::Boolean) }
    def occurred_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def occurred_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def occurred_at_was; end

    sig { void }
    def occurred_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def reimbursement_complete; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def reimbursement_complete=(value); end

    sig { returns(T::Boolean) }
    def reimbursement_complete?; end

    sig { returns(T.nilable(T::Boolean)) }
    def reimbursement_complete_before_last_save; end

    sig { returns(T.untyped) }
    def reimbursement_complete_before_type_cast; end

    sig { returns(T::Boolean) }
    def reimbursement_complete_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def reimbursement_complete_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def reimbursement_complete_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def reimbursement_complete_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def reimbursement_complete_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def reimbursement_complete_previous_change; end

    sig { returns(T::Boolean) }
    def reimbursement_complete_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def reimbursement_complete_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def reimbursement_complete_was; end

    sig { void }
    def reimbursement_complete_will_change!; end

    sig { void }
    def restore_casa_case_id!; end

    sig { void }
    def restore_contact_made!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_creator_id!; end

    sig { void }
    def restore_deleted_at!; end

    sig { void }
    def restore_duration_minutes!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_medium_type!; end

    sig { void }
    def restore_miles_driven!; end

    sig { void }
    def restore_notes!; end

    sig { void }
    def restore_occurred_at!; end

    sig { void }
    def restore_reimbursement_complete!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_want_driving_reimbursement!; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_casa_case_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_casa_case_id?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_contact_made; end

    sig { returns(T::Boolean) }
    def saved_change_to_contact_made?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_creator_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_creator_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_deleted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_deleted_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_duration_minutes; end

    sig { returns(T::Boolean) }
    def saved_change_to_duration_minutes?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_medium_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_medium_type?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_miles_driven; end

    sig { returns(T::Boolean) }
    def saved_change_to_miles_driven?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_notes; end

    sig { returns(T::Boolean) }
    def saved_change_to_notes?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_occurred_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_occurred_at?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_reimbursement_complete; end

    sig { returns(T::Boolean) }
    def saved_change_to_reimbursement_complete?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_want_driving_reimbursement; end

    sig { returns(T::Boolean) }
    def saved_change_to_want_driving_reimbursement?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def want_driving_reimbursement; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def want_driving_reimbursement=(value); end

    sig { returns(T::Boolean) }
    def want_driving_reimbursement?; end

    sig { returns(T.nilable(T::Boolean)) }
    def want_driving_reimbursement_before_last_save; end

    sig { returns(T.untyped) }
    def want_driving_reimbursement_before_type_cast; end

    sig { returns(T::Boolean) }
    def want_driving_reimbursement_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def want_driving_reimbursement_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def want_driving_reimbursement_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def want_driving_reimbursement_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def want_driving_reimbursement_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def want_driving_reimbursement_previous_change; end

    sig { returns(T::Boolean) }
    def want_driving_reimbursement_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def want_driving_reimbursement_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def want_driving_reimbursement_was; end

    sig { void }
    def want_driving_reimbursement_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_casa_case_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_contact_made?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_creator_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deleted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_duration_minutes?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_medium_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_miles_driven?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_notes?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_occurred_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reimbursement_complete?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_want_driving_reimbursement?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def casa_org(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def contact_made(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def contact_medium(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def contact_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def contact_type_groups(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def contact_types(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_max_ago(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def creators(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_reimbursement_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def grab_all(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def has_transitioned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def occurred_between(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def occurred_ending_at(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def occurred_starting_at(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sorted_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def supervisors(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def want_driving_reimbursement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::CaseContact } }

    sig { returns(T::Array[::CaseContact]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::CaseContact } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::CaseContact } }

    sig do
      params(
        records: T.any(::CaseContact, T::Enumerable[T.any(::CaseContact, T::Enumerable[::CaseContact])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::CaseContact, T::Enumerable[T.any(::CaseContact, T::Enumerable[::CaseContact])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::CaseContact, T::Enumerable[T.any(::CaseContact, T::Enumerable[::CaseContact])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::CaseContact, Integer, String, T::Enumerable[T.any(::CaseContact, Integer, String, T::Enumerable[::CaseContact])])
      ).returns(T::Array[::CaseContact])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::CaseContact, Integer, String, T::Enumerable[T.any(::CaseContact, Integer, String, T::Enumerable[::CaseContact])])
      ).returns(T::Array[::CaseContact])
    end
    def destroy(*records); end

    sig { returns(T::Array[::CaseContact]) }
    def load_target; end

    sig do
      params(
        records: T.any(::CaseContact, T::Enumerable[T.any(::CaseContact, T::Enumerable[::CaseContact])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::CaseContact, T::Enumerable[T.any(::CaseContact, T::Enumerable[::CaseContact])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::CaseContact, T::Enumerable[T.any(::CaseContact, T::Enumerable[::CaseContact])])
      ).returns(T::Array[::CaseContact])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::CaseContact]) }
    def target; end

    sig { returns(T::Array[::CaseContact]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::CaseContact } }

    sig { returns(T::Array[::CaseContact]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::CaseContact } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
