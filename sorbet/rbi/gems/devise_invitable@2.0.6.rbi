# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `devise_invitable` gem.
# Please instead update this file by running `bin/tapioca gem devise_invitable`.

# source://devise_invitable//lib/devise_invitable/routes.rb#1
module ActionDispatch::Routing; end

# source://actionpack/7.0.4/lib/action_dispatch/routing.rb#258
ActionDispatch::Routing::HTTP_METHODS = T.let(T.unsafe(nil), Array)

# source://devise_invitable//lib/devise_invitable/routes.rb#2
class ActionDispatch::Routing::Mapper
  # source://actionpack/7.0.4/lib/action_dispatch/routing/mapper.rb#2279
  def initialize(set); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#363
  def as(scope); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#290
  def authenticate(scope = T.unsafe(nil), block = T.unsafe(nil)); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#314
  def authenticated(scope = T.unsafe(nil), block = T.unsafe(nil)); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#226
  def devise_for(*resources); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#363
  def devise_scope(scope); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#331
  def unauthenticated(scope = T.unsafe(nil)); end

  protected

  # source://devise/4.8.1/lib/devise/rails/routes.rb#477
  def constraints_for(method_to_apply, scope = T.unsafe(nil), block = T.unsafe(nil)); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#390
  def devise_confirmation(mapping, controllers); end

  # source://devise_invitable//lib/devise_invitable/routes.rb#6
  def devise_invitation(mapping, controllers); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#421
  def devise_omniauth_callback(mapping, controllers); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#385
  def devise_password(mapping, controllers); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#402
  def devise_registration(mapping, controllers); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#377
  def devise_session(mapping, controllers); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#395
  def devise_unlock(mapping, controllers); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#509
  def raise_no_devise_method_error!(klass); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#499
  def raise_no_secret_key; end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#488
  def set_omniauth_path_prefix!(path_prefix); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#461
  def with_devise_exclusive_scope(new_path, new_as, options); end

  class << self
    # source://actionpack/7.0.4/lib/action_dispatch/routing/mapper.rb#381
    def normalize_name(name); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/mapper.rb#364
    def normalize_path(path); end
  end
end

# source://actionpack/7.0.4/lib/action_dispatch/routing/mapper.rb#13
ActionDispatch::Routing::Mapper::URL_OPTIONS = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.4/lib/action_dispatch/routing.rb#257
ActionDispatch::Routing::SEPARATORS = T.let(T.unsafe(nil), Array)

# source://devise_invitable//lib/devise_invitable.rb#16
module Devise
  # source://devise_invitable//lib/devise_invitable.rb#78
  def allow_insecure_sign_in_after_accept; end

  # source://devise_invitable//lib/devise_invitable.rb#78
  def allow_insecure_sign_in_after_accept=(val); end

  # source://devise/4.8.1/lib/devise.rb#136
  def allow_unconfirmed_access_for; end

  # source://devise/4.8.1/lib/devise.rb#136
  def allow_unconfirmed_access_for=(val); end

  # source://devise/4.8.1/lib/devise.rb#81
  def authentication_keys; end

  # source://devise/4.8.1/lib/devise.rb#81
  def authentication_keys=(val); end

  # source://devise/4.8.1/lib/devise.rb#89
  def case_insensitive_keys; end

  # source://devise/4.8.1/lib/devise.rb#89
  def case_insensitive_keys=(val); end

  # source://devise/4.8.1/lib/devise.rb#254
  def clean_up_csrf_token_on_authentication; end

  # source://devise/4.8.1/lib/devise.rb#254
  def clean_up_csrf_token_on_authentication=(val); end

  # source://devise/4.8.1/lib/devise.rb#140
  def confirm_within; end

  # source://devise/4.8.1/lib/devise.rb#140
  def confirm_within=(val); end

  # source://devise/4.8.1/lib/devise.rb#144
  def confirmation_keys; end

  # source://devise/4.8.1/lib/devise.rb#144
  def confirmation_keys=(val); end

  # source://devise/4.8.1/lib/devise.rb#207
  def default_scope; end

  # source://devise/4.8.1/lib/devise.rb#207
  def default_scope=(val); end

  # source://devise/4.8.1/lib/devise.rb#115
  def email_regexp; end

  # source://devise/4.8.1/lib/devise.rb#115
  def email_regexp=(val); end

  # source://devise/4.8.1/lib/devise.rb#131
  def expire_all_remember_me_on_sign_out; end

  # source://devise/4.8.1/lib/devise.rb#131
  def expire_all_remember_me_on_sign_out=(val); end

  # source://devise/4.8.1/lib/devise.rb#127
  def extend_remember_period; end

  # source://devise/4.8.1/lib/devise.rb#127
  def extend_remember_period=(val); end

  # source://devise/4.8.1/lib/devise.rb#275
  def helpers; end

  # source://devise/4.8.1/lib/devise.rb#97
  def http_authenticatable; end

  # source://devise/4.8.1/lib/devise.rb#97
  def http_authenticatable=(val); end

  # source://devise/4.8.1/lib/devise.rb#101
  def http_authenticatable_on_xhr; end

  # source://devise/4.8.1/lib/devise.rb#101
  def http_authenticatable_on_xhr=(val); end

  # source://devise/4.8.1/lib/devise.rb#77
  def http_authentication_key; end

  # source://devise/4.8.1/lib/devise.rb#77
  def http_authentication_key=(val); end

  # source://devise/4.8.1/lib/devise.rb#109
  def http_authentication_realm; end

  # source://devise/4.8.1/lib/devise.rb#109
  def http_authentication_realm=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#40
  def invitation_limit; end

  # source://devise_invitable//lib/devise_invitable.rb#40
  def invitation_limit=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#22
  def invite_for; end

  # source://devise_invitable//lib/devise_invitable.rb#22
  def invite_for=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#49
  def invite_key; end

  # source://devise_invitable//lib/devise_invitable.rb#49
  def invite_key=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#63
  def invited_by_class_name; end

  # source://devise_invitable//lib/devise_invitable.rb#63
  def invited_by_class_name=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#73
  def invited_by_counter_cache; end

  # source://devise_invitable//lib/devise_invitable.rb#73
  def invited_by_counter_cache=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#68
  def invited_by_foreign_key; end

  # source://devise_invitable//lib/devise_invitable.rb#68
  def invited_by_foreign_key=(val); end

  # source://devise/4.8.1/lib/devise.rb#289
  def last_attempt_warning; end

  # source://devise/4.8.1/lib/devise.rb#289
  def last_attempt_warning=(val); end

  # source://devise/4.8.1/lib/devise.rb#174
  def lock_strategy; end

  # source://devise/4.8.1/lib/devise.rb#174
  def lock_strategy=(val); end

  # source://devise/4.8.1/lib/devise.rb#211
  def mailer_sender; end

  # source://devise/4.8.1/lib/devise.rb#211
  def mailer_sender=(val); end

  # source://devise/4.8.1/lib/devise.rb#267
  def mappings; end

  # source://devise/4.8.1/lib/devise.rb#187
  def maximum_attempts; end

  # source://devise/4.8.1/lib/devise.rb#187
  def maximum_attempts=(val); end

  # source://devise/4.8.1/lib/devise.rb#219
  def navigational_formats; end

  # source://devise/4.8.1/lib/devise.rb#219
  def navigational_formats=(val); end

  # source://devise/4.8.1/lib/devise.rb#271
  def omniauth_configs; end

  # source://devise/4.8.1/lib/devise.rb#250
  def omniauth_path_prefix; end

  # source://devise/4.8.1/lib/devise.rb#250
  def omniauth_path_prefix=(val); end

  # source://devise/4.8.1/lib/devise.rb#105
  def params_authenticatable; end

  # source://devise/4.8.1/lib/devise.rb#105
  def params_authenticatable=(val); end

  # source://devise/4.8.1/lib/devise.rb#285
  def paranoid; end

  # source://devise/4.8.1/lib/devise.rb#285
  def paranoid=(val); end

  # source://devise/4.8.1/lib/devise.rb#233
  def parent_controller; end

  # source://devise/4.8.1/lib/devise.rb#233
  def parent_controller=(val); end

  # source://devise/4.8.1/lib/devise.rb#239
  def parent_mailer; end

  # source://devise/4.8.1/lib/devise.rb#239
  def parent_mailer=(val); end

  # source://devise/4.8.1/lib/devise.rb#119
  def password_length; end

  # source://devise/4.8.1/lib/devise.rb#119
  def password_length=(val); end

  # source://devise/4.8.1/lib/devise.rb#156
  def pepper; end

  # source://devise/4.8.1/lib/devise.rb#156
  def pepper=(val); end

  # source://devise/4.8.1/lib/devise.rb#148
  def reconfirmable; end

  # source://devise/4.8.1/lib/devise.rb#148
  def reconfirmable=(val); end

  # source://devise/4.8.1/lib/devise.rb#261
  def reload_routes; end

  # source://devise/4.8.1/lib/devise.rb#261
  def reload_routes=(val); end

  # source://devise/4.8.1/lib/devise.rb#123
  def remember_for; end

  # source://devise/4.8.1/lib/devise.rb#123
  def remember_for=(val); end

  # source://devise/4.8.1/lib/devise.rb#69
  def rememberable_options; end

  # source://devise/4.8.1/lib/devise.rb#69
  def rememberable_options=(val); end

  # source://devise/4.8.1/lib/devise.rb#85
  def request_keys; end

  # source://devise/4.8.1/lib/devise.rb#85
  def request_keys=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#84
  def require_password_on_accepting; end

  # source://devise_invitable//lib/devise_invitable.rb#84
  def require_password_on_accepting=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#58
  def resend_invitation; end

  # source://devise_invitable//lib/devise_invitable.rb#58
  def resend_invitation=(val); end

  # source://devise/4.8.1/lib/devise.rb#195
  def reset_password_keys; end

  # source://devise/4.8.1/lib/devise.rb#195
  def reset_password_keys=(val); end

  # source://devise/4.8.1/lib/devise.rb#199
  def reset_password_within; end

  # source://devise/4.8.1/lib/devise.rb#199
  def reset_password_within=(val); end

  # source://devise/4.8.1/lib/devise.rb#245
  def router_name; end

  # source://devise/4.8.1/lib/devise.rb#245
  def router_name=(val); end

  # source://devise/4.8.1/lib/devise.rb#169
  def scoped_views; end

  # source://devise/4.8.1/lib/devise.rb#169
  def scoped_views=(val); end

  # source://devise/4.8.1/lib/devise.rb#65
  def secret_key; end

  # source://devise/4.8.1/lib/devise.rb#65
  def secret_key=(val); end

  # source://devise/4.8.1/lib/devise.rb#160
  def send_email_changed_notification; end

  # source://devise/4.8.1/lib/devise.rb#160
  def send_email_changed_notification=(val); end

  # source://devise/4.8.1/lib/devise.rb#164
  def send_password_change_notification; end

  # source://devise/4.8.1/lib/devise.rb#164
  def send_password_change_notification=(val); end

  # source://devise/4.8.1/lib/devise.rb#297
  def sign_in_after_change_password; end

  # source://devise/4.8.1/lib/devise.rb#297
  def sign_in_after_change_password=(val); end

  # source://devise/4.8.1/lib/devise.rb#203
  def sign_in_after_reset_password; end

  # source://devise/4.8.1/lib/devise.rb#203
  def sign_in_after_reset_password=(val); end

  # source://devise/4.8.1/lib/devise.rb#223
  def sign_out_all_scopes; end

  # source://devise/4.8.1/lib/devise.rb#223
  def sign_out_all_scopes=(val); end

  # source://devise/4.8.1/lib/devise.rb#227
  def sign_out_via; end

  # source://devise/4.8.1/lib/devise.rb#227
  def sign_out_via=(val); end

  # source://devise/4.8.1/lib/devise.rb#215
  def skip_session_storage; end

  # source://devise/4.8.1/lib/devise.rb#215
  def skip_session_storage=(val); end

  # source://devise/4.8.1/lib/devise.rb#73
  def stretches; end

  # source://devise/4.8.1/lib/devise.rb#73
  def stretches=(val); end

  # source://devise/4.8.1/lib/devise.rb#93
  def strip_whitespace_keys; end

  # source://devise/4.8.1/lib/devise.rb#93
  def strip_whitespace_keys=(val); end

  # source://devise/4.8.1/lib/devise.rb#152
  def timeout_in; end

  # source://devise/4.8.1/lib/devise.rb#152
  def timeout_in=(val); end

  # source://devise/4.8.1/lib/devise.rb#293
  def token_generator; end

  # source://devise/4.8.1/lib/devise.rb#293
  def token_generator=(val); end

  # source://devise/4.8.1/lib/devise.rb#191
  def unlock_in; end

  # source://devise/4.8.1/lib/devise.rb#191
  def unlock_in=(val); end

  # source://devise/4.8.1/lib/devise.rb#178
  def unlock_keys; end

  # source://devise/4.8.1/lib/devise.rb#178
  def unlock_keys=(val); end

  # source://devise/4.8.1/lib/devise.rb#183
  def unlock_strategy; end

  # source://devise/4.8.1/lib/devise.rb#183
  def unlock_strategy=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#32
  def validate_on_invite; end

  # source://devise_invitable//lib/devise_invitable.rb#32
  def validate_on_invite=(val); end

  # source://devise/4.8.1/lib/devise.rb#280
  def warden_config; end

  # source://devise/4.8.1/lib/devise.rb#280
  def warden_config=(val); end

  class << self
    # source://devise/4.8.1/lib/devise.rb#300
    def activerecord51?; end

    # source://devise/4.8.1/lib/devise.rb#353
    def add_mapping(resource, options); end

    # source://devise/4.8.1/lib/devise.rb#386
    def add_module(module_name, options = T.unsafe(nil)); end

    # source://devise_invitable//lib/devise_invitable.rb#78
    def allow_insecure_sign_in_after_accept; end

    # source://devise_invitable//lib/devise_invitable.rb#78
    def allow_insecure_sign_in_after_accept=(val); end

    # source://devise/4.8.1/lib/devise.rb#136
    def allow_unconfirmed_access_for; end

    # source://devise/4.8.1/lib/devise.rb#136
    def allow_unconfirmed_access_for=(val); end

    # source://devise/4.8.1/lib/devise.rb#81
    def authentication_keys; end

    # source://devise/4.8.1/lib/devise.rb#81
    def authentication_keys=(val); end

    # source://devise/4.8.1/lib/devise.rb#333
    def available_router_name; end

    # source://devise/4.8.1/lib/devise.rb#89
    def case_insensitive_keys; end

    # source://devise/4.8.1/lib/devise.rb#89
    def case_insensitive_keys=(val); end

    # source://devise/4.8.1/lib/devise.rb#254
    def clean_up_csrf_token_on_authentication; end

    # source://devise/4.8.1/lib/devise.rb#254
    def clean_up_csrf_token_on_authentication=(val); end

    # source://devise/4.8.1/lib/devise.rb#475
    def configure_warden!; end

    # source://devise/4.8.1/lib/devise.rb#140
    def confirm_within; end

    # source://devise/4.8.1/lib/devise.rb#140
    def confirm_within=(val); end

    # source://devise/4.8.1/lib/devise.rb#144
    def confirmation_keys; end

    # source://devise/4.8.1/lib/devise.rb#144
    def confirmation_keys=(val); end

    # source://devise/4.8.1/lib/devise.rb#207
    def default_scope; end

    # source://devise/4.8.1/lib/devise.rb#207
    def default_scope=(val); end

    # source://devise/4.8.1/lib/devise.rb#115
    def email_regexp; end

    # source://devise/4.8.1/lib/devise.rb#115
    def email_regexp=(val); end

    # source://devise/4.8.1/lib/devise.rb#131
    def expire_all_remember_me_on_sign_out; end

    # source://devise/4.8.1/lib/devise.rb#131
    def expire_all_remember_me_on_sign_out=(val); end

    # source://devise/4.8.1/lib/devise.rb#127
    def extend_remember_period; end

    # source://devise/4.8.1/lib/devise.rb#127
    def extend_remember_period=(val); end

    # source://devise/4.8.1/lib/devise.rb#500
    def friendly_token(length = T.unsafe(nil)); end

    # source://devise/4.8.1/lib/devise.rb#275
    def helpers; end

    # source://devise/4.8.1/lib/devise.rb#97
    def http_authenticatable; end

    # source://devise/4.8.1/lib/devise.rb#97
    def http_authenticatable=(val); end

    # source://devise/4.8.1/lib/devise.rb#101
    def http_authenticatable_on_xhr; end

    # source://devise/4.8.1/lib/devise.rb#101
    def http_authenticatable_on_xhr=(val); end

    # source://devise/4.8.1/lib/devise.rb#77
    def http_authentication_key; end

    # source://devise/4.8.1/lib/devise.rb#77
    def http_authentication_key=(val); end

    # source://devise/4.8.1/lib/devise.rb#109
    def http_authentication_realm; end

    # source://devise/4.8.1/lib/devise.rb#109
    def http_authentication_realm=(val); end

    # source://devise/4.8.1/lib/devise.rb#456
    def include_helpers(scope); end

    # source://devise_invitable//lib/devise_invitable.rb#40
    def invitation_limit; end

    # source://devise_invitable//lib/devise_invitable.rb#40
    def invitation_limit=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#22
    def invite_for; end

    # source://devise_invitable//lib/devise_invitable.rb#22
    def invite_for=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#49
    def invite_key; end

    # source://devise_invitable//lib/devise_invitable.rb#49
    def invite_key=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#63
    def invited_by_class_name; end

    # source://devise_invitable//lib/devise_invitable.rb#63
    def invited_by_class_name=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#73
    def invited_by_counter_cache; end

    # source://devise_invitable//lib/devise_invitable.rb#73
    def invited_by_counter_cache=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#68
    def invited_by_foreign_key; end

    # source://devise_invitable//lib/devise_invitable.rb#68
    def invited_by_foreign_key=(val); end

    # source://devise/4.8.1/lib/devise.rb#289
    def last_attempt_warning; end

    # source://devise/4.8.1/lib/devise.rb#289
    def last_attempt_warning=(val); end

    # source://devise/4.8.1/lib/devise.rb#174
    def lock_strategy; end

    # source://devise/4.8.1/lib/devise.rb#174
    def lock_strategy=(val); end

    # source://devise/4.8.1/lib/devise.rb#342
    def mailer; end

    # source://devise/4.8.1/lib/devise.rb#347
    def mailer=(class_name); end

    # source://devise/4.8.1/lib/devise.rb#211
    def mailer_sender; end

    # source://devise/4.8.1/lib/devise.rb#211
    def mailer_sender=(val); end

    # source://devise/4.8.1/lib/devise.rb#267
    def mappings; end

    # source://devise/4.8.1/lib/devise.rb#187
    def maximum_attempts; end

    # source://devise/4.8.1/lib/devise.rb#187
    def maximum_attempts=(val); end

    # source://devise/4.8.1/lib/devise.rb#219
    def navigational_formats; end

    # source://devise/4.8.1/lib/devise.rb#219
    def navigational_formats=(val); end

    # source://devise/4.8.1/lib/devise.rb#450
    def omniauth(provider, *args); end

    # source://devise/4.8.1/lib/devise.rb#271
    def omniauth_configs; end

    # source://devise/4.8.1/lib/devise.rb#250
    def omniauth_path_prefix; end

    # source://devise/4.8.1/lib/devise.rb#250
    def omniauth_path_prefix=(val); end

    # source://devise/4.8.1/lib/devise.rb#337
    def omniauth_providers; end

    # source://devise/4.8.1/lib/devise.rb#105
    def params_authenticatable; end

    # source://devise/4.8.1/lib/devise.rb#105
    def params_authenticatable=(val); end

    # source://devise/4.8.1/lib/devise.rb#285
    def paranoid; end

    # source://devise/4.8.1/lib/devise.rb#285
    def paranoid=(val); end

    # source://devise/4.8.1/lib/devise.rb#233
    def parent_controller; end

    # source://devise/4.8.1/lib/devise.rb#233
    def parent_controller=(val); end

    # source://devise/4.8.1/lib/devise.rb#239
    def parent_mailer; end

    # source://devise/4.8.1/lib/devise.rb#239
    def parent_mailer=(val); end

    # source://devise/4.8.1/lib/devise.rb#119
    def password_length; end

    # source://devise/4.8.1/lib/devise.rb#119
    def password_length=(val); end

    # source://devise/4.8.1/lib/devise.rb#156
    def pepper; end

    # source://devise/4.8.1/lib/devise.rb#156
    def pepper=(val); end

    # source://devise/4.8.1/lib/devise.rb#148
    def reconfirmable; end

    # source://devise/4.8.1/lib/devise.rb#148
    def reconfirmable=(val); end

    # source://devise/4.8.1/lib/devise.rb#325
    def ref(arg); end

    # source://devise/4.8.1/lib/devise.rb#468
    def regenerate_helpers!; end

    # source://devise/4.8.1/lib/devise.rb#261
    def reload_routes; end

    # source://devise/4.8.1/lib/devise.rb#261
    def reload_routes=(val); end

    # source://devise/4.8.1/lib/devise.rb#123
    def remember_for; end

    # source://devise/4.8.1/lib/devise.rb#123
    def remember_for=(val); end

    # source://devise/4.8.1/lib/devise.rb#69
    def rememberable_options; end

    # source://devise/4.8.1/lib/devise.rb#69
    def rememberable_options=(val); end

    # source://devise/4.8.1/lib/devise.rb#85
    def request_keys; end

    # source://devise/4.8.1/lib/devise.rb#85
    def request_keys=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#84
    def require_password_on_accepting; end

    # source://devise_invitable//lib/devise_invitable.rb#84
    def require_password_on_accepting=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#58
    def resend_invitation; end

    # source://devise_invitable//lib/devise_invitable.rb#58
    def resend_invitation=(val); end

    # source://devise/4.8.1/lib/devise.rb#195
    def reset_password_keys; end

    # source://devise/4.8.1/lib/devise.rb#195
    def reset_password_keys=(val); end

    # source://devise/4.8.1/lib/devise.rb#199
    def reset_password_within; end

    # source://devise/4.8.1/lib/devise.rb#199
    def reset_password_within=(val); end

    # source://devise/4.8.1/lib/devise.rb#245
    def router_name; end

    # source://devise/4.8.1/lib/devise.rb#245
    def router_name=(val); end

    # source://devise/4.8.1/lib/devise.rb#169
    def scoped_views; end

    # source://devise/4.8.1/lib/devise.rb#169
    def scoped_views=(val); end

    # source://devise/4.8.1/lib/devise.rb#65
    def secret_key; end

    # source://devise/4.8.1/lib/devise.rb#65
    def secret_key=(val); end

    # source://devise/4.8.1/lib/devise.rb#508
    def secure_compare(a, b); end

    # source://devise/4.8.1/lib/devise.rb#160
    def send_email_changed_notification; end

    # source://devise/4.8.1/lib/devise.rb#160
    def send_email_changed_notification=(val); end

    # source://devise/4.8.1/lib/devise.rb#164
    def send_password_change_notification; end

    # source://devise/4.8.1/lib/devise.rb#164
    def send_password_change_notification=(val); end

    # source://devise/4.8.1/lib/devise.rb#306
    def setup; end

    # source://devise/4.8.1/lib/devise.rb#297
    def sign_in_after_change_password; end

    # source://devise/4.8.1/lib/devise.rb#297
    def sign_in_after_change_password=(val); end

    # source://devise/4.8.1/lib/devise.rb#203
    def sign_in_after_reset_password; end

    # source://devise/4.8.1/lib/devise.rb#203
    def sign_in_after_reset_password=(val); end

    # source://devise/4.8.1/lib/devise.rb#223
    def sign_out_all_scopes; end

    # source://devise/4.8.1/lib/devise.rb#223
    def sign_out_all_scopes=(val); end

    # source://devise/4.8.1/lib/devise.rb#227
    def sign_out_via; end

    # source://devise/4.8.1/lib/devise.rb#227
    def sign_out_via=(val); end

    # source://devise/4.8.1/lib/devise.rb#215
    def skip_session_storage; end

    # source://devise/4.8.1/lib/devise.rb#215
    def skip_session_storage=(val); end

    # source://devise/4.8.1/lib/devise.rb#73
    def stretches; end

    # source://devise/4.8.1/lib/devise.rb#73
    def stretches=(val); end

    # source://devise/4.8.1/lib/devise.rb#93
    def strip_whitespace_keys; end

    # source://devise/4.8.1/lib/devise.rb#93
    def strip_whitespace_keys=(val); end

    # source://devise/4.8.1/lib/devise.rb#152
    def timeout_in; end

    # source://devise/4.8.1/lib/devise.rb#152
    def timeout_in=(val); end

    # source://devise/4.8.1/lib/devise.rb#293
    def token_generator; end

    # source://devise/4.8.1/lib/devise.rb#293
    def token_generator=(val); end

    # source://devise/4.8.1/lib/devise.rb#191
    def unlock_in; end

    # source://devise/4.8.1/lib/devise.rb#191
    def unlock_in=(val); end

    # source://devise/4.8.1/lib/devise.rb#178
    def unlock_keys; end

    # source://devise/4.8.1/lib/devise.rb#178
    def unlock_keys=(val); end

    # source://devise/4.8.1/lib/devise.rb#183
    def unlock_strategy; end

    # source://devise/4.8.1/lib/devise.rb#183
    def unlock_strategy=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#32
    def validate_on_invite; end

    # source://devise_invitable//lib/devise_invitable.rb#32
    def validate_on_invite=(val); end

    # source://devise/4.8.1/lib/devise.rb#442
    def warden(&block); end

    # source://devise/4.8.1/lib/devise.rb#280
    def warden_config; end

    # source://devise/4.8.1/lib/devise.rb#280
    def warden_config=(val); end
  end
end

# source://devise/4.8.1/lib/devise.rb#52
Devise::ALL = T.let(T.unsafe(nil), Array)

# source://devise/4.8.1/lib/devise.rb#53
Devise::CONTROLLERS = T.let(T.unsafe(nil), Hash)

# source://devise/4.8.1/lib/devise/rails/deprecated_constant_accessor.rb#7
Devise::DeprecatedConstantAccessor = ActiveSupport::Deprecation::DeprecatedConstantAccessor

# source://devise_invitable//lib/devise_invitable/models/authenticatable.rb#2
module Devise::Models
  # source://devise/4.8.1/lib/devise/models.rb#79
  def devise(*modules); end

  # source://devise/4.8.1/lib/devise/models.rb#115
  def devise_modules_hook!; end

  class << self
    # source://devise/4.8.1/lib/devise/models.rb#54
    def check_fields!(klass); end

    # source://devise/4.8.1/lib/devise/models.rb#31
    def config(mod, *accessors); end
  end
end

# source://devise_invitable//lib/devise_invitable/models/authenticatable.rb#3
module Devise::Models::Authenticatable
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Devise::Models::Authenticatable::ClassMethods

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#93
  def active_for_authentication?; end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#101
  def authenticatable_salt; end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#97
  def inactive_message; end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#124
  def inspect; end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#109
  def serializable_hash(options = T.unsafe(nil)); end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#89
  def unauthenticated_message; end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#85
  def valid_for_authentication?; end

  protected

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#218
  def apply_to_attribute_or_variable(attr, method); end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#133
  def devise_mailer; end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#210
  def downcase_keys; end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#200
  def send_devise_notification(notification, *args); end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#214
  def strip_whitespace; end

  class << self
    # source://devise/4.8.1/lib/devise/models/authenticatable.rb#75
    def required_fields(klass); end
  end

  module GeneratedClassMethods
    def devise_modules; end
    def devise_modules=(value); end
    def devise_modules?; end
  end

  module GeneratedInstanceMethods
    def devise_modules; end
    def devise_modules?; end
  end
end

# source://devise/4.8.1/lib/devise/models/authenticatable.rb#59
Devise::Models::Authenticatable::UNSAFE_ATTRIBUTES_FOR_SERIALIZATION = T.let(T.unsafe(nil), Array)

# Invitable is responsible for sending invitation emails.
# When an invitation is sent to an email address, an account is created for it.
# Invitation email contains a link allowing the user to accept the invitation
# by setting a password (as reset password from Devise's recoverable module).
#
# Configuration:
#
#   invite_for: The period the generated invitation token is valid.
#               After this period, the invited resource won't be able to accept the invitation.
#               When invite_for is 0 (the default), the invitation won't expire.
#
# Examples:
#
#   User.find(1).invited_to_sign_up?                    # => true/false
#   User.invite!(email: 'someone@example.com')          # => send invitation
#   User.accept_invitation!(invitation_token: '...')    # => accept invitation with a token
#   User.find(1).accept_invitation!                     # => accept invitation
#   User.find(1).invite!                                # => reset invitation status and send invitation again
#
# source://devise_invitable//lib/devise_invitable/models.rb#24
module Devise::Models::Invitable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::DeviseInvitable::Inviter
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Devise::Models::Invitable::ClassMethods
  mixes_in_class_methods ::DeviseInvitable::Inviter::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  # Accept an invitation by clearing invitation token and and setting invitation_accepted_at
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#86
  def accept_invitation; end

  # Accept an invitation by clearing invitation token and and setting invitation_accepted_at
  # Saves the model and confirms it if model is confirmable, running invitation_accepted callbacks
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#93
  def accept_invitation!; end

  # Verifies whether a user has accepted an invitation (false when user is accepting it), or was never invited
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#134
  def accepted_or_not_invited?; end

  # Returns true if accept_invitation! was called
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#124
  def accepting_invitation?; end

  # source://devise_invitable//lib/devise_invitable/models.rb#231
  def add_taken_error(key); end

  # source://devise_invitable//lib/devise_invitable/models.rb#201
  def clear_errors_on_valid_keys; end

  # source://devise_invitable//lib/devise_invitable/models.rb#195
  def clear_reset_password_token; end

  # Returns the value of attribute completing_invite.
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#28
  def completing_invite; end

  # Sets the attribute completing_invite
  #
  # @param value the value to set the attribute completing_invite to.
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#28
  def completing_invite=(_arg0); end

  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#219
  def confirmation_required_for_invited?; end

  # Verify wheather a user is created by invitation, irrespective to invitation status
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#114
  def created_by_invite?; end

  # Deliver the invitation email
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#208
  def deliver_invitation(options = T.unsafe(nil)); end

  # provide alias to the encrypted invitation_token stored by devise
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#215
  def encrypted_invitation_token; end

  # Verifies whether a user accepted an invitation (false when user is accepting it)
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#129
  def invitation_accepted?; end

  # source://devise_invitable//lib/devise_invitable/models.rb#223
  def invitation_due_at; end

  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#235
  def invitation_taken?; end

  # Reset invitation token and send invitation again
  #
  # @yield [_self]
  # @yieldparam _self [Devise::Models::Invitable] the object that the method was called on
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#139
  def invite!(invited_by = T.unsafe(nil), options = T.unsafe(nil)); end

  # Verifies whether a user has been invited or not
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#119
  def invited_to_sign_up?; end

  # Enforce password when invitation is being accepted
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#187
  def password_required?; end

  # Returns the value of attribute raw_invitation_token.
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#29
  def raw_invitation_token; end

  # source://devise_invitable//lib/devise_invitable/models.rb#107
  def rollback_accepted_invitation; end

  # Prevent password changed email when accepting invitation
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#182
  def send_password_change_notification?; end

  # Returns the value of attribute skip_invitation.
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#27
  def skip_invitation; end

  # Sets the attribute skip_invitation
  #
  # @param value the value to set the attribute skip_invitation to.
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#27
  def skip_invitation=(_arg0); end

  # source://devise_invitable//lib/devise_invitable/models.rb#191
  def unauthenticated_message; end

  # Verify whether a invitation is active or not. If the user has been
  # invited, we need to calculate if the invitation time has not expired
  # for this user, in other words, if the invitation is still valid.
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#172
  def valid_invitation?; end

  # Only verify password when is not invited
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#177
  def valid_password?(password); end

  protected

  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#241
  def block_from_invitation?; end

  # Generates a new random token for invitation, and stores the time
  # this token is being generated
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#271
  def generate_invitation_token; end

  # source://devise_invitable//lib/devise_invitable/models.rb#277
  def generate_invitation_token!; end

  # Checks if the invitation for the user is within the limit time.
  # We do this by calculating if the difference between today and the
  # invitation sent date does not exceed the invite for time configured.
  # Invite_for is a model configuration, must always be an integer value.
  #
  # Example:
  #
  #   # invite_for = 1.day and invitation_sent_at = today
  #   invitation_period_valid?   # returns true
  #
  #   # invite_for = 5.days and invitation_sent_at = 4.days.ago
  #   invitation_period_valid?   # returns true
  #
  #   # invite_for = 5.days and invitation_sent_at = 5.days.ago
  #   invitation_period_valid?   # returns false
  #
  #   # invite_for = nil
  #   invitation_period_valid?   # will always return true
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#264
  def invitation_period_valid?; end

  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#281
  def new_record_and_responds_to?(method); end

  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#285
  def no_token_present_or_skip_invitation?; end

  class << self
    # source://devise_invitable//lib/devise_invitable/models.rb#77
    def required_fields(klass); end
  end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://devise_invitable//lib/devise_invitable/models.rb#289
module Devise::Models::Invitable::ClassMethods
  # Attempt to find a user by its email. If a record is not found,
  # create a new user and send an invitation to it. If the user is found,
  # return the user with an email already exists error.
  # If the user is found and still has a pending invitation, invitation
  # email is resent unless resend_invitation is set to false.
  # Attributes must contain the user's email, other attributes will be
  # set in the record
  #
  # @yield [invitable]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#302
  def _invite(attributes = T.unsafe(nil), invited_by = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Attempt to find a user by it's invitation_token to set it's password.
  # If a user is found, reset it's password and automatically try saving
  # the record. If not user is found, returns a new user containing an
  # error in invitation_token attribute.
  # Attributes must contain invitation_token, password and confirmation
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#346
  def accept_invitation!(attributes = T.unsafe(nil)); end

  # source://devise_invitable//lib/devise_invitable/models.rb#377
  def after_invitation_accepted(*args, &blk); end

  # source://devise_invitable//lib/devise_invitable/models.rb#369
  def after_invitation_created(*args, &blk); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def allow_insecure_sign_in_after_accept; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def allow_insecure_sign_in_after_accept=(value); end

  # source://devise_invitable//lib/devise_invitable/models.rb#373
  def before_invitation_accepted(*args, &blk); end

  # Callback convenience methods
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#365
  def before_invitation_created(*args, &blk); end

  # source://devise_invitable//lib/devise_invitable/models.rb#356
  def find_by_invitation_token(original_token, only_valid); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def invitation_limit; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def invitation_limit=(value); end

  # source://devise_invitable//lib/devise_invitable/models.rb#332
  def invite!(attributes = T.unsafe(nil), invited_by = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def invite_for; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def invite_for=(value); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def invite_key; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def invite_key=(value); end

  # Return fields to invite
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#291
  def invite_key_fields; end

  # source://devise_invitable//lib/devise_invitable/models.rb#337
  def invite_mail!(attributes = T.unsafe(nil), invited_by = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def invited_by_class_name; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def invited_by_class_name=(value); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def invited_by_counter_cache; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def invited_by_counter_cache=(value); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def invited_by_foreign_key; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def invited_by_foreign_key=(value); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def require_password_on_accepting; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def require_password_on_accepting=(value); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def resend_invitation; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def resend_invitation=(value); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def validate_on_invite; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def validate_on_invite=(value); end

  private

  # The random password, as set after an invitation, must conform
  # to any password format validation rules of the application.
  # This default fixes the most common scenarios: Passwords must contain
  # lower + upper case, a digit and a symbol.
  # For more unusual rules, this method can be overridden.
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#400
  def random_password; end

  class << self
    # source://devise/4.8.1/lib/devise/models.rb#32
    def available_configs; end

    # source://devise/4.8.1/lib/devise/models.rb#32
    def available_configs=(_arg0); end
  end
end

# source://devise/4.8.1/lib/devise.rb#59
Devise::NO_INPUT = T.let(T.unsafe(nil), Array)

# source://devise/4.8.1/lib/devise.rb#54
Devise::ROUTES = T.let(T.unsafe(nil), Hash)

# source://devise/4.8.1/lib/devise.rb#55
Devise::STRATEGIES = T.let(T.unsafe(nil), Hash)

# source://devise/4.8.1/lib/devise.rb#62
Devise::TRUE_VALUES = T.let(T.unsafe(nil), Array)

# source://devise/4.8.1/lib/devise.rb#56
Devise::URL_HELPERS = T.let(T.unsafe(nil), Hash)

# source://devise/4.8.1/lib/devise/version.rb#4
Devise::VERSION = T.let(T.unsafe(nil), String)

# source://devise_invitable//lib/devise_invitable.rb#1
module DeviseInvitable; end

# source://devise_invitable//lib/devise_invitable.rb#6
module DeviseInvitable::Controllers; end

# source://devise_invitable//lib/devise_invitable/controllers/helpers.rb#1
module DeviseInvitable::Controllers::Helpers
  extend ::ActiveSupport::Concern

  # source://devise_invitable//lib/devise_invitable/controllers/helpers.rb#11
  def after_accept_path_for(resource); end

  # source://devise_invitable//lib/devise_invitable/controllers/helpers.rb#7
  def after_invite_path_for(inviter, invitee = T.unsafe(nil)); end

  protected

  # source://devise_invitable//lib/devise_invitable/controllers/helpers.rb#17
  def authenticate_inviter!; end
end

# source://devise_invitable//lib/devise_invitable/rails.rb#2
class DeviseInvitable::Engine < ::Rails::Engine; end

# source://devise_invitable//lib/devise_invitable/inviter.rb#2
module DeviseInvitable::Inviter
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::DeviseInvitable::Inviter::ClassMethods

  # Return true if this user has invitations left to send
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/inviter.rb#15
  def has_invitations_left?; end

  # source://devise_invitable//lib/devise_invitable/inviter.rb#10
  def invitation_limit; end

  protected

  # source://devise_invitable//lib/devise_invitable/inviter.rb#29
  def decrement_invitation_limit!; end
end

# source://devise_invitable//lib/devise_invitable/inviter.rb#36
module DeviseInvitable::Inviter::ClassMethods
  # source://devise/4.8.1/lib/devise/models.rb#37
  def invitation_limit; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def invitation_limit=(value); end

  class << self
    # source://devise/4.8.1/lib/devise/models.rb#32
    def available_configs; end

    # source://devise/4.8.1/lib/devise/models.rb#32
    def available_configs=(_arg0); end
  end
end

# source://devise_invitable//lib/devise_invitable/mailer.rb#4
module DeviseInvitable::Mailer
  # Deliver an invitation email
  #
  # source://devise_invitable//lib/devise_invitable/mailer.rb#7
  def invitation_instructions(record, token, opts = T.unsafe(nil)); end
end

# source://devise_invitable//lib/devise_invitable/mapping.rb#2
module DeviseInvitable::Mapping
  private

  # source://devise_invitable//lib/devise_invitable/mapping.rb#5
  def default_controllers(options); end
end

# source://devise_invitable//lib/devise_invitable/parameter_sanitizer.rb#2
module DeviseInvitable::ParameterSanitizer
  # source://devise_invitable//lib/devise_invitable/parameter_sanitizer.rb#31
  def initialize(resource_class, resource_name, params); end
end
