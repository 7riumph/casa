# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sablon` gem.
# Please instead update this file by running `bin/tapioca gem sablon`.

# source://sablon//lib/sablon/version.rb#1
module Sablon
  class << self
    # @yield [Configuration.instance]
    #
    # source://sablon//lib/sablon.rb#21
    def configure; end

    # source://sablon//lib/sablon.rb#29
    def content(type, *args); end

    # source://sablon//lib/sablon.rb#25
    def template(path); end
  end
end

# Handles storing configuration data for the sablon module
#
# source://sablon//lib/sablon/configuration/html_tag.rb#2
class Sablon::Configuration
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [Configuration] a new instance of Configuration
  #
  # source://sablon//lib/sablon/configuration/configuration.rb#11
  def initialize; end

  # Returns the value of attribute defined_style_conversions.
  #
  # source://sablon//lib/sablon/configuration/configuration.rb#9
  def defined_style_conversions; end

  # Sets the attribute defined_style_conversions
  #
  # @param value the value to set the attribute defined_style_conversions to.
  #
  # source://sablon//lib/sablon/configuration/configuration.rb#9
  def defined_style_conversions=(_arg0); end

  # Returns the value of attribute permitted_html_tags.
  #
  # source://sablon//lib/sablon/configuration/configuration.rb#9
  def permitted_html_tags; end

  # Sets the attribute permitted_html_tags
  #
  # @param value the value to set the attribute permitted_html_tags to.
  #
  # source://sablon//lib/sablon/configuration/configuration.rb#9
  def permitted_html_tags=(_arg0); end

  # Adds a new tag to the permitted tags hash or replaces an existing one
  #
  # source://sablon//lib/sablon/configuration/configuration.rb#17
  def register_html_tag(tag_name, type = T.unsafe(nil), **options); end

  # Adds a new style property converter for the specified ast class and
  # CSS property name. The ast_class variable should be the class name
  # in lowercased snakecase as a symbol, i.e. MyClass -> :my_class.
  # The converter passed in must be a proc that accepts
  # a single argument (the value) and returns two values: the WordML property
  # name and its value. The converted property value can be a string, hash
  # or array.
  #
  # source://sablon//lib/sablon/configuration/configuration.rb#34
  def register_style_converter(ast_node, prop_name, converter); end

  # Removes a tag from the permitted tgs hash, returning it
  #
  # source://sablon//lib/sablon/configuration/configuration.rb#23
  def remove_html_tag(tag_name); end

  # Deletes a CSS converter from the hash by specifying the AST class
  # in lowercased snake case and the property name.
  #
  # source://sablon//lib/sablon/configuration/configuration.rb#45
  def remove_style_converter(ast_node, prop_name); end

  private

  # Defines an initial set of CSS -> WordML conversion lambdas stored in
  # a nested hash structure where the first key is the AST class and the
  # second is the conversion lambda
  #
  # source://sablon//lib/sablon/configuration/configuration.rb#107
  def initialize_css_style_conversion; end

  # Defines all of the initial HTML tags to be used by HTMLconverter
  #
  # source://sablon//lib/sablon/configuration/configuration.rb#52
  def initialize_html_tags; end
end

# Stores the information for a single HTML tag. This information
# is used by the HTMLConverter. An optional AST class can be defined,
# and if so conversion stops there and it is assumed the AST class
# will handle any child nodes unless the element is a block level tag.
# In the case of a block level tag the child nodes are processed by the
# AST builder again. If the AST class is omitted it is assumed the node
# should be "passed through" only transferring it's properties onto
# children. A block level tag must have an AST class associated with
# it. The block and inline status of tags is not affected by CSS.
# Permitted child tags are specified using the :allowed_children optional
# arg. The default value is [:_inline, :ul, :ol]. :_inline is a special
# reference to all inline type tags, :_block is equivalent for block
# type tags.
#
# == Parameters
#  * name - symbol or string of the HTML element tag name
#  * type - The type of HTML tag needs to be :inline or :block
#  * ast_class - class instance or symbol, the AST class or it's name
#                used to process the HTML node
#  * options - collects all other keyword arguments, Current kwargs are
#              `:properties`, `:attributes` and `:allowed_children`.
#
# Example
#  HTMLTag.new(:div, :block, ast_class: Sablon::HTMLConverter::Paragraph,
#              properties: { pStyle: 'Normal' })
#
# source://sablon//lib/sablon/configuration/html_tag.rb#28
class Sablon::Configuration::HTMLTag
  # Setup HTML tag information
  #
  # @return [HTMLTag] a new instance of HTMLTag
  #
  # source://sablon//lib/sablon/configuration/html_tag.rb#33
  def initialize(name, type, ast_class: T.unsafe(nil), **options); end

  # checks if the given tag is a permitted child element
  #
  # @return [Boolean]
  #
  # source://sablon//lib/sablon/configuration/html_tag.rb#58
  def allowed_child?(tag); end

  # Returns the value of attribute allowed_children.
  #
  # source://sablon//lib/sablon/configuration/html_tag.rb#29
  def allowed_children; end

  # Returns the value of attribute ast_class.
  #
  # source://sablon//lib/sablon/configuration/html_tag.rb#29
  def ast_class; end

  # Returns the value of attribute attributes.
  #
  # source://sablon//lib/sablon/configuration/html_tag.rb#29
  def attributes; end

  # Returns the value of attribute name.
  #
  # source://sablon//lib/sablon/configuration/html_tag.rb#29
  def name; end

  # Returns the value of attribute properties.
  #
  # source://sablon//lib/sablon/configuration/html_tag.rb#29
  def properties; end

  # Returns the value of attribute type.
  #
  # source://sablon//lib/sablon/configuration/html_tag.rb#29
  def type; end

  private

  # source://sablon//lib/sablon/configuration/html_tag.rb#72
  def allowed_children=(value); end

  # converts a string or symbol to a class defined under
  # Sablon::HTMLConverter
  #
  # source://sablon//lib/sablon/configuration/html_tag.rb#84
  def ast_class=(value); end
end

# source://sablon//lib/sablon/content.rb#4
module Sablon::Content
  class << self
    # source://sablon//lib/sablon/content.rb#19
    def make(type_id, *args); end

    # source://sablon//lib/sablon/content.rb#27
    def register(content_type); end

    # source://sablon//lib/sablon/content.rb#31
    def remove(content_type_or_id); end

    # source://sablon//lib/sablon/content.rb#6
    def wrap(value); end

    private

    # source://sablon//lib/sablon/content.rb#36
    def type_wrapping(value); end

    # source://sablon//lib/sablon/content.rb#40
    def types; end
  end
end

# Handles conversion of HTML -> WordML and addition into template
#
# source://sablon//lib/sablon/content.rb#159
class Sablon::Content::HTML < ::Struct
  include ::Sablon::Content

  # @return [HTML] a new instance of HTML
  #
  # source://sablon//lib/sablon/content.rb#164
  def initialize(value); end

  # source://sablon//lib/sablon/content.rb#168
  def append_to(paragraph, display_node, env); end

  class << self
    # source://sablon//lib/sablon/content.rb#161
    def id; end

    # @return [Boolean]
    #
    # source://sablon//lib/sablon/content.rb#162
    def wraps?(value); end
  end
end

# Handles reading image data and inserting it into the document
#
# source://sablon//lib/sablon/content.rb#176
class Sablon::Content::Image < ::Struct
  # @return [Image] a new instance of Image
  #
  # source://sablon//lib/sablon/content.rb#187
  def initialize(source, attributes = T.unsafe(nil)); end

  # source://sablon//lib/sablon/content.rb#217
  def append_to(paragraph, display_node, env); end

  # source://sablon//lib/sablon/content.rb#212
  def height; end

  # source://sablon//lib/sablon/content.rb#183
  def inspect; end

  # Returns the value of attribute local_rid.
  #
  # source://sablon//lib/sablon/content.rb#178
  def local_rid; end

  # Sets the attribute local_rid
  #
  # @param value the value to set the attribute local_rid to.
  #
  # source://sablon//lib/sablon/content.rb#178
  def local_rid=(_arg0); end

  # Returns the value of attribute rid_by_file.
  #
  # source://sablon//lib/sablon/content.rb#177
  def rid_by_file; end

  # source://sablon//lib/sablon/content.rb#207
  def width; end

  private

  # Convert centimeters or inches to Word specific emu format
  #
  # source://sablon//lib/sablon/content.rb#241
  def convert_to_emu(dim_str); end

  # Reads the data and attempts to find a filename from either the
  # attributes hash or a #filename method on the source object itself.
  # A filename is required inorder for MS Word to know the content type.
  #
  # source://sablon//lib/sablon/content.rb#224
  def process_readable(source, attributes); end

  class << self
    # source://sablon//lib/sablon/content.rb#180
    def id; end

    # @return [Boolean]
    #
    # source://sablon//lib/sablon/content.rb#181
    def wraps?(value); end
  end
end

# Handles simple text replacement of fields in the template
#
# source://sablon//lib/sablon/content.rb#46
class Sablon::Content::String < ::Struct
  include ::Sablon::Content

  # @return [String] a new instance of String
  #
  # source://sablon//lib/sablon/content.rb#53
  def initialize(value); end

  # source://sablon//lib/sablon/content.rb#57
  def append_to(paragraph, display_node, env); end

  class << self
    # source://sablon//lib/sablon/content.rb#48
    def id; end

    # @return [Boolean]
    #
    # source://sablon//lib/sablon/content.rb#49
    def wraps?(value); end
  end
end

# handles direct addition of WordML to the document template
#
# source://sablon//lib/sablon/content.rb#71
class Sablon::Content::WordML < ::Struct
  include ::Sablon::Content

  # @return [WordML] a new instance of WordML
  #
  # source://sablon//lib/sablon/content.rb#76
  def initialize(value); end

  # This allows proper equality checks with other WordML content objects.
  # Due to the fact the `xml` attribute is a live Nokogiri object
  # the default `==` comparison returns false unless it is the exact
  # same object being compared. This method instead checks if the XML
  # being added to the document is the same when the `other` object is
  # an instance of the WordML content class.
  #
  # source://sablon//lib/sablon/content.rb#99
  def ==(other); end

  # source://sablon//lib/sablon/content.rb#80
  def append_to(paragraph, display_node, env); end

  private

  # Adds the XML to be inserted in the document as siblings to the
  # node passed in. Run properties are merged here because of namespace
  # issues when working with a document fragment
  #
  # source://sablon//lib/sablon/content.rb#132
  def add_siblings_to(node, rpr_tag = T.unsafe(nil)); end

  # Returns `true` if all of the xml nodes to be inserted are
  #
  # @return [Boolean]
  #
  # source://sablon//lib/sablon/content.rb#110
  def all_inline?; end

  # Array of tags allowed to be a child of the w:p XML tag as defined
  # by the Open XML specification
  #
  # source://sablon//lib/sablon/content.rb#116
  def inline_tags; end

  # Merges the provided properties into the run proprties of the
  # node passed in. Properties are only added if they are not already
  # defined on the node itself.
  #
  # source://sablon//lib/sablon/content.rb#144
  def merge_rpr_tags(node, props); end

  class << self
    # source://sablon//lib/sablon/content.rb#73
    def id; end

    # @return [Boolean]
    #
    # source://sablon//lib/sablon/content.rb#74
    def wraps?(value); end
  end
end

# A context represents the user supplied arguments to render a
# template.
#
# This module contains transformation functions to turn a
# user supplied hash into a data structure suitable for rendering the
# docx template.
#
# source://sablon//lib/sablon/context.rb#8
module Sablon::Context
  class << self
    # source://sablon//lib/sablon/context.rb#10
    def transform_hash(hash); end

    private

    # source://sablon//lib/sablon/context.rb#27
    def transform_pair(key, value); end

    # source://sablon//lib/sablon/context.rb#16
    def transform_standard_key(key, value); end
  end
end

# source://sablon//lib/sablon.rb#19
class Sablon::ContextError < ::ArgumentError; end

# Stores classes used to build and interact with the template by treating
# it as a full document model instead of disparate components that are
# packaged together.
#
# source://sablon//lib/sablon/document_object_model/file_handler.rb#2
module Sablon::DOM
  class << self
    # Allows new handlers to be registered for different components of
    # the MS Word document. The pattern passed in is used to determine
    # if a file in the entry set should be handled by the class.
    #
    # source://sablon//lib/sablon/document_object_model/model.rb#15
    def register_dom_handler(pattern, klass); end

    # source://sablon//lib/sablon/document_object_model/model.rb#20
    def wrap_with_handler(entry_name, content); end

    private

    # source://sablon//lib/sablon/document_object_model/model.rb#31
    def handlers; end
  end
end

# Adds new content types to the document
#
# source://sablon//lib/sablon/document_object_model/content_types.rb#8
class Sablon::DOM::ContentTypes < ::Sablon::DOM::FileHandler
  # Sets up the class instance to handle new relationships for a document.
  # I only care about tags that have an integer component
  #
  # @return [ContentTypes] a new instance of ContentTypes
  #
  # source://sablon//lib/sablon/document_object_model/content_types.rb#19
  def initialize(xml_node); end

  # Adds a new content type to the file
  #
  # source://sablon//lib/sablon/document_object_model/content_types.rb#26
  def add_content_type(extension, type); end

  class << self
    # extends the Model class so it now has an "add_content_type" method
    #
    # source://sablon//lib/sablon/document_object_model/content_types.rb#9
    def extend_model(model_klass); end
  end
end

# An abstract class used to setup other file handling classes
#
# source://sablon//lib/sablon/document_object_model/file_handler.rb#4
class Sablon::DOM::FileHandler
  # All subclasses should be initialized only accepting the content
  # as a single argument.
  #
  # @return [FileHandler] a new instance of FileHandler
  #
  # source://sablon//lib/sablon/document_object_model/file_handler.rb#13
  def initialize(content); end

  # Finds the maximum value of an attribute by converting it to an
  # integer. Non numeric portions of values are ignored. The method can
  # be either xpath or css, xpath being the default.
  #
  # source://sablon//lib/sablon/document_object_model/file_handler.rb#18
  def max_attribute_value(xml_node, selector, attr_name, query_method: T.unsafe(nil)); end

  class << self
    # extends the Model class using instance eval with a block argument
    #
    # source://sablon//lib/sablon/document_object_model/file_handler.rb#7
    def extend_model(model_klass, &block); end
  end
end

# Object to represent an entire template and it's XML contents
#
# source://sablon//lib/sablon/document_object_model/model.rb#37
class Sablon::DOM::Model
  # setup the DOM by reading and storing all XML files in the template
  # in memory
  #
  # @return [Model] a new instance of Model
  #
  # source://sablon//lib/sablon/document_object_model/model.rb#43
  def initialize(zip_io_stream); end

  # Returns the corresponding DOM handled file
  #
  # source://sablon//lib/sablon/document_object_model/model.rb#56
  def [](entry_name); end

  # source://sablon//lib/sablon/document_object_model/content_types.rb#11
  def add_content_type(extension, type); end

  # source://sablon//lib/sablon/document_object_model/numbering.rb#14
  def add_list_definition(style); end

  # source://sablon//lib/sablon/document_object_model/relationships.rb#25
  def add_media(name, data, rel_attr); end

  # source://sablon//lib/sablon/document_object_model/relationships.rb#14
  def add_relationship(rel_attr); end

  # Returns the value of attribute current_entry.
  #
  # source://sablon//lib/sablon/document_object_model/model.rb#38
  def current_entry; end

  # Sets the attribute current_entry
  #
  # @param value the value to set the attribute current_entry to.
  #
  # source://sablon//lib/sablon/document_object_model/model.rb#38
  def current_entry=(_arg0); end

  # source://sablon//lib/sablon/document_object_model/relationships.rb#47
  def find_relationship_by(attribute, value, entry = T.unsafe(nil)); end

  # Returns the value of attribute zip_contents.
  #
  # source://sablon//lib/sablon/document_object_model/model.rb#39
  def zip_contents; end

  private

  # constructs the dom model using helper clases defined under this
  # namespace.
  #
  # source://sablon//lib/sablon/document_object_model/model.rb#73
  def build_dom(entries); end

  # source://sablon//lib/sablon/document_object_model/model.rb#81
  def create_entry_if_not_exist(name, init_content = T.unsafe(nil)); end

  # Determines how the content in the zip file entry should be wrapped
  #
  # source://sablon//lib/sablon/document_object_model/model.rb#63
  def wrap_entry(entry_name, content); end
end

# Manages the creation of new list definitions
#
# source://sablon//lib/sablon/document_object_model/numbering.rb#6
class Sablon::DOM::Numbering < ::Sablon::DOM::FileHandler
  # Sets up the class to add new list definitions to the number.xml
  # file
  #
  # @return [Numbering] a new instance of Numbering
  #
  # source://sablon//lib/sablon/document_object_model/numbering.rb#22
  def initialize(xml_node); end

  # adds a new relationship and returns the corresponding rId for it
  #
  # source://sablon//lib/sablon/document_object_model/numbering.rb#34
  def add_list_definition(style); end

  private

  # Creates a new abstract numbering definition tag to style a list
  #
  # source://sablon//lib/sablon/document_object_model/numbering.rb#65
  def abstract_tag(definition); end

  # Creates a new instance of the Definition struct, after incrementing
  # the max id values
  #
  # source://sablon//lib/sablon/document_object_model/numbering.rb#87
  def create_definition(style); end

  # Creates a new list definition tag to define a list
  #
  # source://sablon//lib/sablon/document_object_model/numbering.rb#56
  def definition_tag(definition); end

  # Locates and copies the first abstract numbering definition with
  # the expected style. If one can not be found an error is raised.
  #
  # source://sablon//lib/sablon/document_object_model/numbering.rb#75
  def find_abstract_definition(style); end

  # Finds the maximum value of an attribute by converting it to an
  # integer. Non numeric portions of values are ignored.
  #
  # source://sablon//lib/sablon/document_object_model/numbering.rb#51
  def max_attribute_value(selector, attr_name); end

  class << self
    # extends the Model class using instance eval with a block argument
    #
    # source://sablon//lib/sablon/document_object_model/numbering.rb#10
    def extend_model(model_klass, &block); end
  end
end

# source://sablon//lib/sablon/document_object_model/numbering.rb#7
class Sablon::DOM::Numbering::Definition < ::Struct
  # Returns the value of attribute abstract_id
  #
  # @return [Object] the current value of abstract_id
  def abstract_id; end

  # Sets the attribute abstract_id
  #
  # @param value [Object] the value to set the attribute abstract_id to.
  # @return [Object] the newly set value
  def abstract_id=(_); end

  # Returns the value of attribute numid
  #
  # @return [Object] the current value of numid
  def numid; end

  # Sets the attribute numid
  #
  # @param value [Object] the value to set the attribute numid to.
  # @return [Object] the newly set value
  def numid=(_); end

  # Returns the value of attribute style
  #
  # @return [Object] the current value of style
  def style; end

  # Sets the attribute style
  #
  # @param value [Object] the value to set the attribute style to.
  # @return [Object] the newly set value
  def style=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Adds new relationships to the entry's corresponding relationships file
#
# source://sablon//lib/sablon/document_object_model/relationships.rb#9
class Sablon::DOM::Relationships < ::Sablon::DOM::FileHandler
  # Sets up the class instance to handle new relationships for a document.
  # I only care about tags that have an integer component
  #
  # @return [Relationships] a new instance of Relationships
  #
  # source://sablon//lib/sablon/document_object_model/relationships.rb#73
  def initialize(xml_node); end

  # adds a new relationship and returns the corresponding rId for it
  #
  # source://sablon//lib/sablon/document_object_model/relationships.rb#87
  def add_relationship(rel_attr); end

  # Reurns an XML node based on the attribute value or nil if one does
  # not exist
  #
  # source://sablon//lib/sablon/document_object_model/relationships.rb#96
  def find_relationship_by(attribute, value); end

  # Finds the maximum value of an attribute by converting it to an
  # integer. Non numeric portions of values are ignored.
  #
  # source://sablon//lib/sablon/document_object_model/relationships.rb#82
  def max_attribute_value(selector, attr_name); end

  private

  # increments the max rid and returns it
  #
  # source://sablon//lib/sablon/document_object_model/relationships.rb#103
  def next_rid; end

  # Builds the relationship WordML tag and returns it
  #
  # source://sablon//lib/sablon/document_object_model/relationships.rb#108
  def relationship_tag(rel_attr); end

  class << self
    # extends the Model class so it now has an "add_relationship" method
    #
    # source://sablon//lib/sablon/document_object_model/relationships.rb#10
    def extend_model(model_klass); end

    # source://sablon//lib/sablon/document_object_model/relationships.rb#58
    def file_template; end

    # source://sablon//lib/sablon/document_object_model/relationships.rb#66
    def rels_entry_name_for(entry_name); end
  end
end

# Combines the user supplied context and template into a single object
# to manage data during template processing.
#
# source://sablon//lib/sablon/environment.rb#4
class Sablon::Environment
  # @return [Environment] a new instance of Environment
  #
  # source://sablon//lib/sablon/environment.rb#26
  def initialize(template, context = T.unsafe(nil)); end

  # returns a new environment with merged contexts
  #
  # source://sablon//lib/sablon/environment.rb#10
  def alter_context(context = T.unsafe(nil)); end

  # Returns the value of attribute context.
  #
  # source://sablon//lib/sablon/environment.rb#6
  def context; end

  # reader method for the DOM::Model instance stored on the template
  #
  # source://sablon//lib/sablon/environment.rb#16
  def document; end

  # Returns the value of attribute section_properties.
  #
  # source://sablon//lib/sablon/environment.rb#7
  def section_properties; end

  # source://sablon//lib/sablon/environment.rb#20
  def section_properties=(properties); end

  # Returns the value of attribute template.
  #
  # source://sablon//lib/sablon/environment.rb#5
  def template; end
end

# source://sablon//lib/sablon/operations.rb#156
module Sablon::Expression
  class << self
    # source://sablon//lib/sablon/operations.rb#186
    def parse(expression); end
  end
end

# source://sablon//lib/sablon/operations.rb#167
class Sablon::Expression::LookupOrMethodCall < ::Struct
  # source://sablon//lib/sablon/operations.rb#168
  def evaluate(context); end

  # source://sablon//lib/sablon/operations.rb#181
  def inspect; end
end

# source://sablon//lib/sablon/operations.rb#157
class Sablon::Expression::Variable < ::Struct
  # source://sablon//lib/sablon/operations.rb#158
  def evaluate(context); end

  # source://sablon//lib/sablon/operations.rb#162
  def inspect; end
end

# source://sablon//lib/sablon/html/ast_builder.rb#2
class Sablon::HTMLConverter
  # source://sablon//lib/sablon/html/converter.rb#17
  def build_ast(input); end

  # source://sablon//lib/sablon/html/converter.rb#6
  def process(input, env); end

  # source://sablon//lib/sablon/html/converter.rb#11
  def processed_ast(input); end
end

# Converts a nokogiri HTML fragment into an equivalent AST structure
#
# source://sablon//lib/sablon/html/ast_builder.rb#4
class Sablon::HTMLConverter::ASTBuilder
  # @return [ASTBuilder] a new instance of ASTBuilder
  #
  # source://sablon//lib/sablon/html/ast_builder.rb#31
  def initialize(env, nodes, properties); end

  # Returns the value of attribute nodes.
  #
  # source://sablon//lib/sablon/html/ast_builder.rb#5
  def nodes; end

  private

  # If the node doesn't allow inline elements, or text specifically,
  # drop all text nodes. This is largely meant to prevent whitespace
  # between tags from rasing an invalid structure error. Although it
  # will purge the node whether it contains nonblank characters or not.
  #
  # @return [Boolean]
  #
  # source://sablon//lib/sablon/html/ast_builder.rb#77
  def drop_text?(child); end

  # retrieves a HTMLTag instance from the cpermitted_html_tags hash or
  # raises an ArgumentError if the tag is not registered in the hash
  #
  # source://sablon//lib/sablon/html/ast_builder.rb#61
  def fetch_tag(tag_name); end

  # Merges node properties in a sppecifc
  #
  # source://sablon//lib/sablon/html/ast_builder.rb#83
  def merge_node_properties(node, tag, parent_properties); end

  # Loops over HTML nodes converting them to their configured AST class
  #
  # source://sablon//lib/sablon/html/ast_builder.rb#37
  def process_nodes(html_nodes, properties); end

  # Checking that the current tag is an allowed child of the parent_tag.
  # If the parent tag is nil then a block level tag is required.
  #
  # @raise [ContextError]
  #
  # source://sablon//lib/sablon/html/ast_builder.rb#67
  def validate_structure(parent, child); end

  class << self
    # Checks if there are any block level tags in the current node set
    # this is used at the root level to determine if top level text nodes
    # should be removed
    #
    # @return [Boolean]
    #
    # source://sablon//lib/sablon/html/ast_builder.rb#15
    def any_block_tags?(nodes); end

    # Retrieves a HTMLTag instance from the permitted_html_tags hash or
    # raises an ArgumentError if the tag is not registered
    #
    # source://sablon//lib/sablon/html/ast_builder.rb#21
    def fetch_tag(tag_name); end

    # source://sablon//lib/sablon/html/ast_builder.rb#7
    def html_to_ast(env, nodes, properties); end
  end
end

# A container for an array of AST nodes with convenience methods to
# work with the internal array as if it were a regular node
#
# source://sablon//lib/sablon/html/ast.rb#100
class Sablon::HTMLConverter::Collection < ::Sablon::HTMLConverter::Node
  # @return [Collection] a new instance of Collection
  #
  # source://sablon//lib/sablon/html/ast.rb#102
  def initialize(nodes); end

  # source://sablon//lib/sablon/html/ast.rb#123
  def <<(node); end

  # source://sablon//lib/sablon/html/ast.rb#108
  def accept(visitor); end

  # source://sablon//lib/sablon/html/ast.rb#119
  def inspect; end

  # Returns the value of attribute nodes.
  #
  # source://sablon//lib/sablon/html/ast.rb#101
  def nodes; end

  # source://sablon//lib/sablon/html/ast.rb#115
  def to_docx; end
end

# source://sablon//lib/sablon/html/visitor.rb#12
class Sablon::HTMLConverter::GrepVisitor
  # @return [GrepVisitor] a new instance of GrepVisitor
  #
  # source://sablon//lib/sablon/html/visitor.rb#14
  def initialize(pattern); end

  # Returns the value of attribute result.
  #
  # source://sablon//lib/sablon/html/visitor.rb#13
  def result; end

  # source://sablon//lib/sablon/html/visitor.rb#19
  def visit(node); end
end

# Creates a clickable URL in the word document, this only supports external
# urls only
#
# source://sablon//lib/sablon/html/ast.rb#528
class Sablon::HTMLConverter::Hyperlink < ::Sablon::HTMLConverter::Node
  # @return [Hyperlink] a new instance of Hyperlink
  #
  # source://sablon//lib/sablon/html/ast.rb#529
  def initialize(env, node, properties); end

  # source://sablon//lib/sablon/html/ast.rb#554
  def accept(visitor); end

  # source://sablon//lib/sablon/html/ast.rb#550
  def inspect; end

  # source://sablon//lib/sablon/html/ast.rb#546
  def to_docx; end

  private

  # source://sablon//lib/sablon/html/ast.rb#561
  def children_to_docx; end
end

# source://sablon//lib/sablon/html/visitor.rb#26
class Sablon::HTMLConverter::LastNewlineRemoverVisitor < ::Sablon::HTMLConverter::Visitor
  # source://sablon//lib/sablon/html/visitor.rb#27
  def visit_Paragraph(par); end
end

# Manages the child nodes of a list type tag
#
# source://sablon//lib/sablon/html/ast.rb#206
class Sablon::HTMLConverter::List < ::Sablon::HTMLConverter::Collection
  # @return [List] a new instance of List
  #
  # source://sablon//lib/sablon/html/ast.rb#207
  def initialize(env, node, properties); end

  # source://sablon//lib/sablon/html/ast.rb#227
  def inspect; end

  private

  # merges parent and child attributes together, preappending the parent's
  # values to allow the child node to override it if the value is already
  # defined on the child node.
  #
  # source://sablon//lib/sablon/html/ast.rb#251
  def merge_attributes(child, parent_attributes); end

  # moves any list tags that are a child of a list item tag up one level
  # so they become a sibling instead of a child
  #
  # source://sablon//lib/sablon/html/ast.rb#260
  def process_child_nodes(node); end

  # handles passing all attributes on the parent down to children
  #
  # source://sablon//lib/sablon/html/ast.rb#234
  def transfer_node_attributes(nodes, attributes); end
end

# Sets list item specific attributes registered on the node to properly
# generate a list paragraph
#
# source://sablon//lib/sablon/html/ast.rb#272
class Sablon::HTMLConverter::ListParagraph < ::Sablon::HTMLConverter::Paragraph
  # @return [ListParagraph] a new instance of ListParagraph
  #
  # source://sablon//lib/sablon/html/ast.rb#273
  def initialize(env, node, properties); end

  private

  # source://sablon//lib/sablon/html/ast.rb#284
  def transferred_properties; end
end

# Creates a blank line in the word document
#
# source://sablon//lib/sablon/html/ast.rb#509
class Sablon::HTMLConverter::Newline < ::Sablon::HTMLConverter::Run
  # @return [Newline] a new instance of Newline
  #
  # source://sablon//lib/sablon/html/ast.rb#510
  def initialize(*_arg0); end

  # source://sablon//lib/sablon/html/ast.rb#515
  def inspect; end

  private

  # source://sablon//lib/sablon/html/ast.rb#521
  def children_to_docx; end
end

# A top level abstract class to handle common logic for all AST nodes
#
# source://sablon//lib/sablon/html/ast.rb#8
class Sablon::HTMLConverter::Node
  # @return [Node] a new instance of Node
  #
  # source://sablon//lib/sablon/html/ast.rb#60
  def initialize(_env, _node, _properties); end

  # source://sablon//lib/sablon/html/ast.rb#65
  def accept(visitor); end

  # Simplifies usage at call sites by only requiring them to supply
  # the tag name to use and any child AST nodes to render
  #
  # source://sablon//lib/sablon/html/ast.rb#71
  def to_docx(tag); end

  private

  # Gracefully handles conversion of an attributes hash into a
  # string
  #
  # source://sablon//lib/sablon/html/ast.rb#86
  def attributes_to_docx; end

  # Acts like an abstract method allowing subclases full flexibility to
  # define any content inside the tags.
  #
  # source://sablon//lib/sablon/html/ast.rb#93
  def children_to_docx; end

  # Simplifies usage at call sites
  #
  # source://sablon//lib/sablon/html/ast.rb#80
  def transferred_properties; end

  class << self
    # handles conversion of a single attribute allowing recursion through
    # super classes. If the key exists and conversion is succesful a
    # symbol is returned to avoid conflicts with a CSS prop sharing the
    # same name. Keys without a conversion class are returned as is
    #
    # source://sablon//lib/sablon/html/ast.rb#48
    def convert_style_property(key, value); end

    # source://sablon//lib/sablon/html/ast.rb#11
    def node_name; end

    # maps the CSS style property to it's OpenXML equivalent. Not all CSS
    # properties have an equivalent, nor share the same behavior when
    # defined on different node types (Paragraph, Table and Run).
    #
    # source://sablon//lib/sablon/html/ast.rb#29
    def process_properties(properties); end

    # Returns a hash defined on the configuration object by default. However,
    # this method can be overridden by subclasses to return a different
    # node's style conversion config (i.e. :run) or a hash unrelated to the
    # config itself. The config object is used for all built-in classes to
    # allow for end-user customization via the configuration object
    #
    # source://sablon//lib/sablon/html/ast.rb#20
    def style_conversion; end
  end
end

# source://sablon//lib/sablon/html/ast.rb#9
Sablon::HTMLConverter::Node::PROPERTIES = T.let(T.unsafe(nil), Array)

# Manages the properties for an AST node, includes factory methods
# for easy use at calling sites.
#
# source://sablon//lib/sablon/html/node_properties.rb#5
class Sablon::HTMLConverter::NodeProperties
  # @return [NodeProperties] a new instance of NodeProperties
  #
  # source://sablon//lib/sablon/html/node_properties.rb#28
  def initialize(tagname, properties, whitelist); end

  # source://sablon//lib/sablon/html/node_properties.rb#37
  def [](key); end

  # source://sablon//lib/sablon/html/node_properties.rb#41
  def []=(key, value); end

  # source://sablon//lib/sablon/html/node_properties.rb#33
  def inspect; end

  # source://sablon//lib/sablon/html/node_properties.rb#45
  def to_docx; end

  # Returns the value of attribute transferred_properties.
  #
  # source://sablon//lib/sablon/html/node_properties.rb#6
  def transferred_properties; end

  private

  # processes properties adding those on the whitelist to the
  # properties instance variable and those not to the transferred_properties
  # isntance variable
  #
  # source://sablon//lib/sablon/html/node_properties.rb#54
  def filter_properties(properties, whitelist); end

  # processes attributes defined on the node into wordML property syntax
  #
  # source://sablon//lib/sablon/html/node_properties.rb#68
  def properties_word_ml; end

  # properties that have a list as the value get nested in tags and
  # each entry in the list is transformed. When a value is a hash the
  # keys in the hash are used to explicitly build the XML tag attributes.
  #
  # source://sablon//lib/sablon/html/node_properties.rb#75
  def transform_attr(key, value); end

  class << self
    # source://sablon//lib/sablon/html/node_properties.rb#8
    def paragraph(properties); end

    # source://sablon//lib/sablon/html/node_properties.rb#24
    def run(properties); end

    # source://sablon//lib/sablon/html/node_properties.rb#12
    def table(properties); end

    # source://sablon//lib/sablon/html/node_properties.rb#20
    def table_cell(properties); end

    # source://sablon//lib/sablon/html/node_properties.rb#16
    def table_row(properties); end
  end
end

# An AST node representing the top level content container for a word
# document. These cannot be nested within other paragraph elements
#
# source://sablon//lib/sablon/html/ast.rb#156
class Sablon::HTMLConverter::Paragraph < ::Sablon::HTMLConverter::Node
  # @return [Paragraph] a new instance of Paragraph
  #
  # source://sablon//lib/sablon/html/ast.rb#175
  def initialize(env, node, properties); end

  # source://sablon//lib/sablon/html/ast.rb#189
  def accept(visitor); end

  # source://sablon//lib/sablon/html/ast.rb#194
  def inspect; end

  # Returns the value of attribute runs.
  #
  # source://sablon//lib/sablon/html/ast.rb#157
  def runs; end

  # Sets the attribute runs
  #
  # @param value the value to set the attribute runs to.
  #
  # source://sablon//lib/sablon/html/ast.rb#157
  def runs=(_arg0); end

  # source://sablon//lib/sablon/html/ast.rb#185
  def to_docx; end

  private

  # source://sablon//lib/sablon/html/ast.rb#200
  def children_to_docx; end
end

# Permitted child tags defined by the OpenXML spec
#
# source://sablon//lib/sablon/html/ast.rb#164
Sablon::HTMLConverter::Paragraph::CHILD_TAGS = T.let(T.unsafe(nil), Array)

# source://sablon//lib/sablon/html/ast.rb#159
Sablon::HTMLConverter::Paragraph::PROPERTIES = T.let(T.unsafe(nil), Array)

# Stores all of the AST nodes from the current fragment of HTML being
# parsed
#
# source://sablon//lib/sablon/html/ast.rb#130
class Sablon::HTMLConverter::Root < ::Sablon::HTMLConverter::Collection
  # @return [Root] a new instance of Root
  #
  # source://sablon//lib/sablon/html/ast.rb#131
  def initialize(env, node); end

  # source://sablon//lib/sablon/html/ast.rb#143
  def grep(pattern); end

  # source://sablon//lib/sablon/html/ast.rb#149
  def inspect; end
end

# Create a run of text in the document, runs cannot be nested within
# each other
#
# source://sablon//lib/sablon/html/ast.rb#480
class Sablon::HTMLConverter::Run < ::Sablon::HTMLConverter::Node
  # @return [Run] a new instance of Run
  #
  # source://sablon//lib/sablon/html/ast.rb#485
  def initialize(_env, node, properties); end

  # source://sablon//lib/sablon/html/ast.rb#496
  def inspect; end

  # source://sablon//lib/sablon/html/ast.rb#492
  def to_docx; end

  private

  # source://sablon//lib/sablon/html/ast.rb#502
  def children_to_docx; end
end

# source://sablon//lib/sablon/html/ast.rb#481
Sablon::HTMLConverter::Run::PROPERTIES = T.let(T.unsafe(nil), Array)

# Builds a table from html table tags
#
# source://sablon//lib/sablon/html/ast.rb#290
class Sablon::HTMLConverter::Table < ::Sablon::HTMLConverter::Node
  # @return [Table] a new instance of Table
  #
  # source://sablon//lib/sablon/html/ast.rb#295
  def initialize(env, node, properties); end

  # source://sablon//lib/sablon/html/ast.rb#330
  def accept(visitor); end

  # source://sablon//lib/sablon/html/ast.rb#335
  def inspect; end

  # source://sablon//lib/sablon/html/ast.rb#319
  def to_docx; end

  private

  # source://sablon//lib/sablon/html/ast.rb#347
  def children_to_docx; end
end

# source://sablon//lib/sablon/html/ast.rb#291
Sablon::HTMLConverter::Table::PROPERTIES = T.let(T.unsafe(nil), Array)

# Converts html table cells into wordML table cells
#
# source://sablon//lib/sablon/html/ast.rb#388
class Sablon::HTMLConverter::TableCell < ::Sablon::HTMLConverter::Node
  # @return [TableCell] a new instance of TableCell
  #
  # source://sablon//lib/sablon/html/ast.rb#403
  def initialize(env, node, properties); end

  # source://sablon//lib/sablon/html/ast.rb#419
  def accept(visitor); end

  # source://sablon//lib/sablon/html/ast.rb#424
  def inspect; end

  # source://sablon//lib/sablon/html/ast.rb#415
  def to_docx; end

  private

  # source://sablon//lib/sablon/html/ast.rb#473
  def children_to_docx; end

  # Creates a new Paragraph AST node, with no children
  #
  # source://sablon//lib/sablon/html/ast.rb#468
  def new_paragraph(env); end

  # Wraps nodes in Paragraph AST nodes if needed to produced a valid
  # document
  #
  # source://sablon//lib/sablon/html/ast.rb#432
  def wrap_with_paragraphs(env, nodes); end

  # Returns a list of child tags that need to be wrapped in a paragraph
  #
  # source://sablon//lib/sablon/html/ast.rb#463
  def wrapped_by_paragraph; end
end

# Permitted child tags defined by the OpenXML spec
#
# source://sablon//lib/sablon/html/ast.rb#393
Sablon::HTMLConverter::TableCell::CHILD_TAGS = T.let(T.unsafe(nil), Array)

# source://sablon//lib/sablon/html/ast.rb#389
Sablon::HTMLConverter::TableCell::PROPERTIES = T.let(T.unsafe(nil), Array)

# Converts html table rows into wordML table rows
#
# source://sablon//lib/sablon/html/ast.rb#353
class Sablon::HTMLConverter::TableRow < ::Sablon::HTMLConverter::Node
  # @return [TableRow] a new instance of TableRow
  #
  # source://sablon//lib/sablon/html/ast.rb#357
  def initialize(env, node, properties); end

  # source://sablon//lib/sablon/html/ast.rb#371
  def accept(visitor); end

  # source://sablon//lib/sablon/html/ast.rb#376
  def inspect; end

  # source://sablon//lib/sablon/html/ast.rb#367
  def to_docx; end

  private

  # source://sablon//lib/sablon/html/ast.rb#382
  def children_to_docx; end
end

# source://sablon//lib/sablon/html/ast.rb#354
Sablon::HTMLConverter::TableRow::PROPERTIES = T.let(T.unsafe(nil), Array)

# source://sablon//lib/sablon/html/visitor.rb#3
class Sablon::HTMLConverter::Visitor
  # source://sablon//lib/sablon/html/visitor.rb#4
  def visit(node); end
end

# source://sablon//lib/sablon/parser/mail_merge.rb#2
module Sablon::Parser; end

# source://sablon//lib/sablon/parser/mail_merge.rb#3
class Sablon::Parser::MailMerge
  # source://sablon//lib/sablon/parser/mail_merge.rb#132
  def parse_fields(xml); end

  private

  # source://sablon//lib/sablon/parser/mail_merge.rb#147
  def build_complex_field(node); end
end

# source://sablon//lib/sablon/parser/mail_merge.rb#44
class Sablon::Parser::MailMerge::ComplexField < ::Sablon::Parser::MailMerge::MergeField
  # @return [ComplexField] a new instance of ComplexField
  #
  # source://sablon//lib/sablon/parser/mail_merge.rb#45
  def initialize(nodes); end

  # source://sablon//lib/sablon/parser/mail_merge.rb#70
  def ancestors(*args); end

  # source://sablon//lib/sablon/parser/mail_merge.rb#78
  def end_node; end

  # removes only the merge field in question
  #
  # source://sablon//lib/sablon/parser/mail_merge.rb#61
  def remove; end

  # source://sablon//lib/sablon/parser/mail_merge.rb#65
  def remove_parent(selector); end

  # source://sablon//lib/sablon/parser/mail_merge.rb#55
  def replace(content, env); end

  # source://sablon//lib/sablon/parser/mail_merge.rb#74
  def start_node; end

  # @return [Boolean]
  #
  # source://sablon//lib/sablon/parser/mail_merge.rb#51
  def valid?; end

  private

  # source://sablon//lib/sablon/parser/mail_merge.rb#84
  def pattern_node; end

  # source://sablon//lib/sablon/parser/mail_merge.rb#88
  def separate_node; end
end

# source://sablon//lib/sablon/parser/mail_merge.rb#4
class Sablon::Parser::MailMerge::MergeField
  # @return [MergeField] a new instance of MergeField
  #
  # source://sablon//lib/sablon/parser/mail_merge.rb#8
  def initialize; end

  # Returns the value of attribute block_reference_count.
  #
  # source://sablon//lib/sablon/parser/mail_merge.rb#5
  def block_reference_count; end

  # Sets the attribute block_reference_count
  #
  # @param value the value to set the attribute block_reference_count to.
  #
  # source://sablon//lib/sablon/parser/mail_merge.rb#5
  def block_reference_count=(_arg0); end

  # source://sablon//lib/sablon/parser/mail_merge.rb#16
  def expression; end

  # @return [Boolean]
  #
  # source://sablon//lib/sablon/parser/mail_merge.rb#12
  def valid?; end

  private

  # source://sablon//lib/sablon/parser/mail_merge.rb#39
  def get_display_node(node); end

  # removes all nodes associated with the merge field if the reference
  # count is less than or equal to 1
  #
  # source://sablon//lib/sablon/parser/mail_merge.rb#24
  def remove_or_decrement_ref(*nodes); end

  # source://sablon//lib/sablon/parser/mail_merge.rb#32
  def replace_field_display(node, content, env); end
end

# source://sablon//lib/sablon/parser/mail_merge.rb#6
Sablon::Parser::MailMerge::MergeField::KEY_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://sablon//lib/sablon/parser/mail_merge.rb#93
class Sablon::Parser::MailMerge::SimpleField < ::Sablon::Parser::MailMerge::MergeField
  # @return [SimpleField] a new instance of SimpleField
  #
  # source://sablon//lib/sablon/parser/mail_merge.rb#94
  def initialize(node); end

  # source://sablon//lib/sablon/parser/mail_merge.rb#116
  def ancestors(*args); end

  # source://sablon//lib/sablon/parser/mail_merge.rb#120
  def end_node; end

  # removes only the merge field in question
  #
  # source://sablon//lib/sablon/parser/mail_merge.rb#107
  def remove; end

  # removes the parent node containing the merge field
  #
  # source://sablon//lib/sablon/parser/mail_merge.rb#112
  def remove_parent(selector); end

  # source://sablon//lib/sablon/parser/mail_merge.rb#100
  def replace(content, env); end

  # source://sablon//lib/sablon/parser/mail_merge.rb#120
  def start_node; end

  private

  # source://sablon//lib/sablon/parser/mail_merge.rb#127
  def remove_extra_runs!; end
end

# source://sablon//lib/sablon/processor/document/blocks.rb#2
module Sablon::Processor; end

# This class manages processing of the XML portions of a word document
# that can contain mailmerge fields
#
# source://sablon//lib/sablon/processor/document/blocks.rb#3
class Sablon::Processor::Document
  # @return [Document] a new instance of Document
  #
  # source://sablon//lib/sablon/processor/document.rb#68
  def initialize(parser); end

  # source://sablon//lib/sablon/processor/document.rb#72
  def manipulate(xml_node, env); end

  private

  # source://sablon//lib/sablon/processor/document.rb#83
  def build_operations(fields); end

  # source://sablon//lib/sablon/processor/document.rb#89
  def cleanup(xml_node); end

  # source://sablon//lib/sablon/processor/document.rb#93
  def fill_empty_table_cells(xml_node); end

  class << self
    # source://sablon//lib/sablon/processor/document.rb#54
    def default_field_handler; end

    # source://sablon//lib/sablon/processor/document.rb#50
    def field_handlers; end

    # source://sablon//lib/sablon/processor/document.rb#64
    def parser; end

    # source://sablon//lib/sablon/processor/document.rb#59
    def process(xml_node, env); end

    # Adds a new handler to the OperationConstruction class. The handler
    # passed in should be an instance of the Handler class or implement
    # the same interface. Handlers cannot be replaced by this method,
    # instead the `replace_field_handler` method should be used which
    # internally removes the existing hander and registers the one passed
    # in. The name 'default' is special and will be called if no other
    # handlers can use the provided field.
    #
    # source://sablon//lib/sablon/processor/document.rb#18
    def register_field_handler(name, handler); end

    # Removes a handler from the hash and returns it
    #
    # source://sablon//lib/sablon/processor/document.rb#33
    def remove_field_handler(name); end

    # Replaces an existing handler
    #
    # source://sablon//lib/sablon/processor/document.rb#45
    def replace_field_handler(name, handler); end
  end
end

# source://sablon//lib/sablon/processor/document/blocks.rb#4
class Sablon::Processor::Document::Block
  # @return [Block] a new instance of Block
  #
  # source://sablon//lib/sablon/processor/document/blocks.rb#25
  def initialize(start_field, end_field); end

  # source://sablon//lib/sablon/processor/document/blocks.rb#54
  def body; end

  # Returns the value of attribute end_field.
  #
  # source://sablon//lib/sablon/processor/document/blocks.rb#5
  def end_field; end

  # Sets the attribute end_field
  #
  # @param value the value to set the attribute end_field to.
  #
  # source://sablon//lib/sablon/processor/document/blocks.rb#5
  def end_field=(_arg0); end

  # source://sablon//lib/sablon/processor/document/blocks.rb#68
  def end_node; end

  # source://sablon//lib/sablon/processor/document/blocks.rb#34
  def process(env); end

  # source://sablon//lib/sablon/processor/document/blocks.rb#46
  def remove_control_elements; end

  # source://sablon//lib/sablon/processor/document/blocks.rb#41
  def replace(content); end

  # Returns the value of attribute start_field.
  #
  # source://sablon//lib/sablon/processor/document/blocks.rb#5
  def start_field; end

  # Sets the attribute start_field
  #
  # @param value the value to set the attribute start_field to.
  #
  # source://sablon//lib/sablon/processor/document/blocks.rb#5
  def start_field=(_arg0); end

  # source://sablon//lib/sablon/processor/document/blocks.rb#64
  def start_node; end

  class << self
    # source://sablon//lib/sablon/processor/document/blocks.rb#7
    def enclosed_by(start_field, end_field); end

    # @return [Boolean]
    #
    # source://sablon//lib/sablon/processor/document/blocks.rb#13
    def encloses?(start_field, end_field); end

    # source://sablon//lib/sablon/processor/document/blocks.rb#17
    def parent(node); end

    # source://sablon//lib/sablon/processor/document/blocks.rb#21
    def parent_selector; end
  end
end

# Handles comment blocks in the template
#
# source://sablon//lib/sablon/processor/document/field_handlers.rb#105
class Sablon::Processor::Document::CommentHandler < ::Sablon::Processor::Document::FieldHandler
  # @return [CommentHandler] a new instance of CommentHandler
  #
  # source://sablon//lib/sablon/processor/document/field_handlers.rb#106
  def initialize; end

  # source://sablon//lib/sablon/processor/document/field_handlers.rb#110
  def build_statement(constructor, _field, _options = T.unsafe(nil)); end
end

# Handles conditional blocks in the template
#
# source://sablon//lib/sablon/processor/document/field_handlers.rb#58
class Sablon::Processor::Document::ConditionalHandler < ::Sablon::Processor::Document::FieldHandler
  # @return [ConditionalHandler] a new instance of ConditionalHandler
  #
  # source://sablon//lib/sablon/processor/document/field_handlers.rb#59
  def initialize; end

  # source://sablon//lib/sablon/processor/document/field_handlers.rb#63
  def build_statement(constructor, field, _options = T.unsafe(nil)); end

  private

  # Processes the main expression from each start field block to
  # simplify usage in Statement
  #
  # source://sablon//lib/sablon/processor/document/field_handlers.rb#80
  def process_blocks(blocks); end
end

# Handles each loops in the template
#
# source://sablon//lib/sablon/processor/document/field_handlers.rb#45
class Sablon::Processor::Document::EachLoopHandler < ::Sablon::Processor::Document::FieldHandler
  # @return [EachLoopHandler] a new instance of EachLoopHandler
  #
  # source://sablon//lib/sablon/processor/document/field_handlers.rb#46
  def initialize; end

  # source://sablon//lib/sablon/processor/document/field_handlers.rb#50
  def build_statement(constructor, field, _options = T.unsafe(nil)); end
end

# This class is used to setup field handlers to process different
# merge field expressions based on the expression text. The #handles?
# and #build_statement methods form the standard FieldHandler API and can
# be implemented however they are needed to be as long as the call
# signature stays the same.
#
# source://sablon//lib/sablon/processor/document/field_handlers.rb#9
class Sablon::Processor::Document::FieldHandler
  # Used when registering processors. The pattern tells the handler
  # what expression text to search for.
  #
  # @return [FieldHandler] a new instance of FieldHandler
  #
  # source://sablon//lib/sablon/processor/document/field_handlers.rb#12
  def initialize(pattern); end

  # Uses the provided arguments to construct a Statement object.
  # The constructor is an instance of the OperationConstruction class,
  # the field is the current merge field being evaluated and the options
  # hash defines any other parameters passed in during
  # OperationConstruction#consume. Currently the only option passed is
  # `:allow_insertion`.
  #
  # source://sablon//lib/sablon/processor/document/field_handlers.rb#27
  def build_statement(constructor, field, options = T.unsafe(nil)); end

  # Returns a non-nil value if the field expression matches the pattern
  #
  # @return [Boolean]
  #
  # source://sablon//lib/sablon/processor/document/field_handlers.rb#17
  def handles?(field); end
end

# source://sablon//lib/sablon/processor/document/blocks.rb#89
class Sablon::Processor::Document::ImageBlock < ::Sablon::Processor::Document::ParagraphBlock
  # source://sablon//lib/sablon/processor/document/blocks.rb#94
  def replace(image); end

  class << self
    # @return [Boolean]
    #
    # source://sablon//lib/sablon/processor/document/blocks.rb#90
    def encloses?(start_field, end_field); end
  end
end

# Handles image insertion fields
#
# source://sablon//lib/sablon/processor/document/field_handlers.rb#92
class Sablon::Processor::Document::ImageHandler < ::Sablon::Processor::Document::FieldHandler
  # @return [ImageHandler] a new instance of ImageHandler
  #
  # source://sablon//lib/sablon/processor/document/field_handlers.rb#93
  def initialize; end

  # source://sablon//lib/sablon/processor/document/field_handlers.rb#97
  def build_statement(constructor, field, _options = T.unsafe(nil)); end
end

# source://sablon//lib/sablon/processor/document/blocks.rb#124
class Sablon::Processor::Document::InlineParagraphBlock < ::Sablon::Processor::Document::Block
  # source://sablon//lib/sablon/processor/document/blocks.rb#139
  def end_node; end

  # source://sablon//lib/sablon/processor/document/blocks.rb#129
  def remove_control_elements; end

  # source://sablon//lib/sablon/processor/document/blocks.rb#135
  def start_node; end

  class << self
    # @return [Boolean]
    #
    # source://sablon//lib/sablon/processor/document/blocks.rb#125
    def encloses?(start_field, end_field); end
  end
end

# Handles simple text insertion
#
# source://sablon//lib/sablon/processor/document/field_handlers.rb#31
class Sablon::Processor::Document::InsertionHandler < ::Sablon::Processor::Document::FieldHandler
  # @return [InsertionHandler] a new instance of InsertionHandler
  #
  # source://sablon//lib/sablon/processor/document/field_handlers.rb#32
  def initialize; end

  # source://sablon//lib/sablon/processor/document/field_handlers.rb#36
  def build_statement(_constructor, field, options = T.unsafe(nil)); end
end

# source://sablon//lib/sablon/processor/document/operation_construction.rb#4
class Sablon::Processor::Document::OperationConstruction
  # @return [OperationConstruction] a new instance of OperationConstruction
  #
  # source://sablon//lib/sablon/processor/document/operation_construction.rb#5
  def initialize(fields, field_handlers, default_handler); end

  # source://sablon//lib/sablon/processor/document/operation_construction.rb#17
  def consume(allow_insertion); end

  # source://sablon//lib/sablon/processor/document/operation_construction.rb#30
  def consume_block(end_expression); end

  # Creates multiple blocks based on the sub expression patterns supplied
  # while searching for the end expresion. The start and end fields
  # of adjacent blocks are shared. For example in an if-else-endif
  # block the else field is the end for the if clause block and the
  # start of the else clause block.
  #
  # source://sablon//lib/sablon/processor/document/operation_construction.rb#48
  def consume_multi_block(end_expression, *sub_expr_patterns); end

  # source://sablon//lib/sablon/processor/document/operation_construction.rb#12
  def operations; end
end

# source://sablon//lib/sablon/processor/document/blocks.rb#83
class Sablon::Processor::Document::ParagraphBlock < ::Sablon::Processor::Document::Block
  class << self
    # @return [Boolean]
    #
    # source://sablon//lib/sablon/processor/document/blocks.rb#84
    def encloses?(start_field, end_field); end
  end
end

# source://sablon//lib/sablon/processor/document/blocks.rb#73
class Sablon::Processor::Document::RowBlock < ::Sablon::Processor::Document::Block
  class << self
    # @return [Boolean]
    #
    # source://sablon//lib/sablon/processor/document/blocks.rb#78
    def encloses?(start_field, end_field); end

    # source://sablon//lib/sablon/processor/document/blocks.rb#74
    def parent_selector; end
  end
end

# source://sablon//lib/sablon/processor/section_properties.rb#3
class Sablon::Processor::SectionProperties
  # @return [SectionProperties] a new instance of SectionProperties
  #
  # source://sablon//lib/sablon/processor/section_properties.rb#9
  def initialize(xml_node); end

  # source://sablon//lib/sablon/processor/section_properties.rb#18
  def start_page_number; end

  # source://sablon//lib/sablon/processor/section_properties.rb#22
  def start_page_number=(number); end

  # source://sablon//lib/sablon/processor/section_properties.rb#13
  def write_properties(properties = T.unsafe(nil)); end

  private

  # source://sablon//lib/sablon/processor/section_properties.rb#28
  def find_or_add_pg_num_type; end

  # source://sablon//lib/sablon/processor/section_properties.rb#36
  def pg_num_type; end

  class << self
    # source://sablon//lib/sablon/processor/section_properties.rb#4
    def process(xml_node, env); end
  end
end

# source://sablon//lib/sablon/operations.rb#3
module Sablon::Statement; end

# source://sablon//lib/sablon/operations.rb#118
class Sablon::Statement::Comment < ::Struct
  # source://sablon//lib/sablon/operations.rb#119
  def evaluate(_env); end
end

# source://sablon//lib/sablon/operations.rb#56
class Sablon::Statement::Condition
  # @return [Condition] a new instance of Condition
  #
  # source://sablon//lib/sablon/operations.rb#57
  def initialize(conditions); end

  # source://sablon//lib/sablon/operations.rb#66
  def evaluate(env); end

  private

  # source://sablon//lib/sablon/operations.rb#85
  def eval_conditional_blocks(env); end

  # @return [Boolean]
  #
  # source://sablon//lib/sablon/operations.rb#108
  def truthy?(value); end
end

# source://sablon//lib/sablon/operations.rb#124
class Sablon::Statement::Image < ::Struct
  # source://sablon//lib/sablon/operations.rb#125
  def evaluate(env); end

  private

  # source://sablon//lib/sablon/operations.rb#133
  def set_local_rid(env, image); end
end

# source://sablon//lib/sablon/operations.rb#4
class Sablon::Statement::Insertion < ::Struct
  # source://sablon//lib/sablon/operations.rb#5
  def evaluate(env); end
end

# source://sablon//lib/sablon/operations.rb#14
class Sablon::Statement::Loop < ::Struct
  # @raise [ContextError]
  #
  # source://sablon//lib/sablon/operations.rb#15
  def evaluate(env); end

  private

  # Increments the attribute value of each element with the id by 1
  #
  # source://sablon//lib/sablon/operations.rb#47
  def update_tag_attribute(content, tag_name, attr_name, init_val); end

  # updates all unique id's present in the xml being copied
  #
  # source://sablon//lib/sablon/operations.rb#31
  def update_unique_ids(env, content); end
end

# Creates a template from an MS Word doc that can be easily manipulated
#
# source://sablon//lib/sablon/template.rb#7
class Sablon::Template
  # @return [Template] a new instance of Template
  #
  # source://sablon//lib/sablon/template.rb#36
  def initialize(path); end

  # Returns the value of attribute document.
  #
  # source://sablon//lib/sablon/template.rb#8
  def document; end

  # Same as +render_to_string+ but writes the processed template to +output_path+.
  #
  # source://sablon//lib/sablon/template.rb#41
  def render_to_file(output_path, context, properties = T.unsafe(nil)); end

  # Process the template. The +context+ hash will be available in the template.
  #
  # source://sablon//lib/sablon/template.rb#48
  def render_to_string(context, properties = T.unsafe(nil)); end

  private

  # creates directories of the unzipped docx file in the newly created
  # docx file e.g. in case of word/_rels/document.xml.rels it creates
  # word/ and _rels directories to apply recursive zipping. This is a
  # hack to fix the issue of getting a corrupted file when any referencing
  # between the xml files happen like in the case of implementing hyperlinks.
  # The created_dirs array is augmented in place using '<<'
  #
  # source://sablon//lib/sablon/template.rb#103
  def create_dirs_in_zipfile(created_dirs, entry_path, output_stream); end

  # IMPORTANT: Open Office does not ignore whitespace around tags.
  # We need to render the xml without indent and whitespace.
  #
  # source://sablon//lib/sablon/template.rb#81
  def generate_output_file(zip_out, contents); end

  # Processes all of te entries searching for ones that match the pattern.
  # The hash is converted into an array first to avoid any possible
  # modification during iteration errors (i.e. creation of a new rels file).
  #
  # source://sablon//lib/sablon/template.rb#71
  def process(env); end

  # source://sablon//lib/sablon/template.rb#54
  def render(context, properties = T.unsafe(nil)); end

  class << self
    # Returns the processor classes with a pattern matching the
    # entry name. If none match nil is returned.
    #
    # source://sablon//lib/sablon/template.rb#26
    def get_processors(entry_name); end

    # source://sablon//lib/sablon/template.rb#31
    def processors; end

    # Adds a new processor to the processors hash. The +pattern+ is used
    # to select which files the processor should handle. Multiple processors
    # can be added for the same pattern.
    #
    # source://sablon//lib/sablon/template.rb#14
    def register_processor(pattern, klass, replace_all: T.unsafe(nil)); end
  end
end

# source://sablon//lib/sablon.rb#18
class Sablon::TemplateError < ::ArgumentError; end

# source://sablon//lib/sablon/version.rb#2
Sablon::VERSION = T.let(T.unsafe(nil), String)
