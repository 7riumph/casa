# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pdf-forms` gem.
# Please instead update this file by running `bin/tapioca gem pdf-forms`.

# coding UTF-8
#
# source://pdf-forms//lib/pdf_forms/version.rb#3
module PdfForms
  class << self
    # shorthand for PdfForms::PdftkWrapper.new(...)
    #
    # source://pdf-forms//lib/pdf_forms.rb#15
    def new(*args); end
  end
end

# source://pdf-forms//lib/pdf_forms/data_format.rb#4
class PdfForms::DataFormat
  # @return [DataFormat] a new instance of DataFormat
  #
  # source://pdf-forms//lib/pdf_forms/data_format.rb#7
  def initialize(data = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute options.
  #
  # source://pdf-forms//lib/pdf_forms/data_format.rb#5
  def options; end

  # write fdf content to path
  #
  # source://pdf-forms//lib/pdf_forms/data_format.rb#37
  def save_to(path); end

  # generate PDF content in this data format
  #
  # source://pdf-forms//lib/pdf_forms/data_format.rb#17
  def to_fdf; end

  # generate PDF content in this data format
  #
  # source://pdf-forms//lib/pdf_forms/data_format.rb#17
  def to_pdf_data; end

  private

  # source://pdf-forms//lib/pdf_forms/data_format.rb#43
  def encode_data(data); end
end

# Map keys and values to Adobe's FDF format.
#
# Straight port of Perl's PDF::FDF::Simple by Steffen Schwigon.
# Parsing FDF files is not supported (yet).
#
# source://pdf-forms//lib/pdf_forms/fdf.rb#9
class PdfForms::Fdf < ::PdfForms::DataFormat
  # @return [Fdf] a new instance of Fdf
  #
  # source://pdf-forms//lib/pdf_forms/fdf.rb#11
  def initialize(data = T.unsafe(nil), options = T.unsafe(nil)); end

  private

  # source://pdf-forms//lib/pdf_forms/fdf.rb#17
  def encode_data(fdf); end

  # pp 561 https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/pdf_reference_archives/PDFReference.pdf
  #
  # source://pdf-forms//lib/pdf_forms/fdf.rb#47
  def field(key, value); end

  # source://pdf-forms//lib/pdf_forms/fdf.rb#72
  def footer; end

  # pp 559 https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/pdf_reference_archives/PDFReference.pdf
  #
  # source://pdf-forms//lib/pdf_forms/fdf.rb#32
  def header; end

  # source://pdf-forms//lib/pdf_forms/fdf.rb#55
  def quote(value); end
end

# source://pdf-forms//lib/pdf_forms/fdf.rb#61
PdfForms::Fdf::FOOTER = T.let(T.unsafe(nil), String)

# Map keys and values to Adobe's FDF format.
#
# This is a variation of the original Fdf data format, values are encoded in UTF16 hexadesimal
# notation to improve compatibility with non ascii charsets.
#
# Information about hexadesimal FDF values was found here:
#
# http://stackoverflow.com/questions/6047970/weird-characters-when-filling-pdf-with-pdftk
#
# source://pdf-forms//lib/pdf_forms/fdf_hex.rb#13
class PdfForms::FdfHex < ::PdfForms::Fdf
  private

  # Fdf implementation encodes to ISO-8859-15 which we do not want here.
  #
  # source://pdf-forms//lib/pdf_forms/fdf_hex.rb#35
  def encode_data(fdf); end

  # source://pdf-forms//lib/pdf_forms/fdf_hex.rb#22
  def encode_many(values); end

  # source://pdf-forms//lib/pdf_forms/fdf_hex.rb#26
  def encode_value_as_hex(value); end

  # source://pdf-forms//lib/pdf_forms/fdf_hex.rb#16
  def field(key, value); end
end

# source://pdf-forms//lib/pdf_forms/field.rb#4
class PdfForms::Field
  # FieldType: Button
  # FieldName: Sprachoptionen_Inverssuche_Widerspruch
  # FieldFlags: 0
  # FieldJustification: Left
  # FieldStateOption: Ja
  # FieldStateOption: Off
  #
  # Representation of a PDF Form Field
  #
  # @return [Field] a new instance of Field
  #
  # source://pdf-forms//lib/pdf_forms/field.rb#13
  def initialize(field_description); end

  # source://pdf-forms//lib/pdf_forms/field.rb#56
  def flags; end

  # source://pdf-forms//lib/pdf_forms/field.rb#56
  def justification; end

  # source://pdf-forms//lib/pdf_forms/field.rb#56
  def max_length; end

  # source://pdf-forms//lib/pdf_forms/field.rb#56
  def name; end

  # source://pdf-forms//lib/pdf_forms/field.rb#56
  def name_alt; end

  # source://pdf-forms//lib/pdf_forms/field.rb#56
  def options; end

  # source://pdf-forms//lib/pdf_forms/field.rb#45
  def to_hash; end

  # source://pdf-forms//lib/pdf_forms/field.rb#56
  def type; end

  # source://pdf-forms//lib/pdf_forms/field.rb#56
  def value; end

  # source://pdf-forms//lib/pdf_forms/field.rb#56
  def value_default; end
end

# Common Fields
#
# source://pdf-forms//lib/pdf_forms/field.rb#55
PdfForms::Field::ATTRS = T.let(T.unsafe(nil), Array)

# source://pdf-forms//lib/pdf_forms/normalize_path.rb#7
module PdfForms::NormalizePath
  # source://pdf-forms//lib/pdf_forms/normalize_path.rb#9
  def normalize_path(path); end
end

# source://pdf-forms//lib/pdf_forms/pdf.rb#6
class PdfForms::Pdf
  include ::PdfForms::NormalizePath

  # @raise [IOError]
  # @return [Pdf] a new instance of Pdf
  #
  # source://pdf-forms//lib/pdf_forms/pdf.rb#11
  def initialize(path, pdftk, options = T.unsafe(nil)); end

  # the field object for the named field
  #
  # source://pdf-forms//lib/pdf_forms/pdf.rb#27
  def field(name); end

  # list of field objects for all defined fields
  #
  # Initialize the object with utf8_fields: true to get utf8 encoded field
  # names.
  #
  # source://pdf-forms//lib/pdf_forms/pdf.rb#22
  def fields; end

  # Returns the value of attribute options.
  #
  # source://pdf-forms//lib/pdf_forms/pdf.rb#9
  def options; end

  # Returns the value of attribute path.
  #
  # source://pdf-forms//lib/pdf_forms/pdf.rb#9
  def path; end

  private

  # source://pdf-forms//lib/pdf_forms/pdf.rb#33
  def read_fields; end
end

# source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#9
class PdfForms::PdftkError < ::StandardError; end

# Wraps calls to PdfTk
#
# source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#13
class PdfForms::PdftkWrapper
  include ::PdfForms::NormalizePath

  # Initializes a new wrapper instance. Pdftk will be autodetected from PATH:
  # PdftkWrapper.new(:flatten => true, :encrypt => true, :encrypt_options => 'allow Printing')
  #
  # The pdftk binary may also be explecitly specified:
  # PdftkWrapper.new('/usr/bin/pdftk', :flatten => true, :encrypt => true, :encrypt_options => 'allow Printing')
  #
  # Besides the options shown above, the drop_xfa or drop_xmp options are
  # also supported.
  #
  # @return [PdftkWrapper] a new instance of PdftkWrapper
  #
  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#29
  def initialize(*args); end

  # returns the commands output, check general execution success with
  # $?.success?
  #
  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#87
  def call_pdftk(*args); end

  # concatenate documents, can optionally specify page ranges
  #
  # args: in_file1, {in_file2 => ["1-2", "4-10"]}, ... , in_file_n, output
  #
  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#94
  def cat(*args); end

  # pdftk.fill_form '/path/to/form.pdf', '/path/to/destination.pdf', :field1 => 'value 1'
  #
  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#37
  def fill_form(template, destination, data = T.unsafe(nil), fill_options = T.unsafe(nil)); end

  # get field names for template
  #
  # Initialize the object with utf8_fields: true to get utf8 encoded field
  # names.
  #
  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#81
  def get_field_names(template); end

  # Get field metadata for template
  #
  # Initialize the object with utf8_fields: true to get utf8 encoded field
  # metadata.
  #
  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#73
  def get_fields(template); end

  # applies each page of the stamp PDF to the corresponding page of the input PDF
  # args: primary_file, stamp_file, output
  #
  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#124
  def multistamp(primary_file, stamp_file, output); end

  # Returns the value of attribute options.
  #
  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#17
  def options; end

  # Returns the value of attribute pdftk.
  #
  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#17
  def pdftk; end

  # pdftk.read '/path/to/form.pdf'
  # returns an instance of PdfForms::Pdf representing the given template
  #
  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#65
  def read(path); end

  # stamp one pdf with another
  #
  # args: primary_file, stamp_file, output
  #
  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#118
  def stamp(primary_file, stamp_file, output); end

  private

  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#146
  def append_options(args, local_options = T.unsafe(nil)); end

  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#130
  def data_format(data); end

  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#166
  def normalize_args(*args); end

  # source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#135
  def option_or_global(attrib, local = T.unsafe(nil)); end
end

# source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#139
PdfForms::PdftkWrapper::ALLOWED_OPTIONS = T.let(T.unsafe(nil), Array)

# source://pdf-forms//lib/pdf_forms/pdftk_wrapper.rb#19
PdfForms::PdftkWrapper::PDFTK = T.let(T.unsafe(nil), String)

# source://pdf-forms//lib/pdf_forms/version.rb#4
PdfForms::VERSION = T.let(T.unsafe(nil), String)

# Map keys and values to Adobe's XFDF format.
#
# source://pdf-forms//lib/pdf_forms/xfdf.rb#7
class PdfForms::XFdf < ::PdfForms::DataFormat
  # @return [XFdf] a new instance of XFdf
  #
  # source://pdf-forms//lib/pdf_forms/xfdf.rb#8
  def initialize(data = T.unsafe(nil), options = T.unsafe(nil)); end

  private

  # source://pdf-forms//lib/pdf_forms/xfdf.rb#14
  def encode_data(pdf_data); end

  # source://pdf-forms//lib/pdf_forms/xfdf.rb#29
  def field(key, value); end

  # source://pdf-forms//lib/pdf_forms/xfdf.rb#33
  def footer; end

  # source://pdf-forms//lib/pdf_forms/xfdf.rb#22
  def header; end

  # source://pdf-forms//lib/pdf_forms/xfdf.rb#18
  def quote(value); end
end
