# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `delayed_job` gem.
# Please instead update this file by running `bin/tapioca gem delayed_job`.

class ActiveRecord::Base
  include ::ActiveRecord::Core
  include ::ActiveRecord::Persistence
  include ::ActiveRecord::ReadonlyAttributes
  include ::ActiveRecord::ModelSchema
  include ::ActiveRecord::Inheritance
  include ::ActiveRecord::Scoping
  include ::ActiveRecord::Scoping::Default
  include ::ActiveRecord::Scoping::Named
  include ::ActiveRecord::Sanitization
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveRecord::AttributeAssignment
  include ::ActiveModel::Conversion
  include ::ActiveRecord::Integration
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveRecord::Validations
  include ::ActiveRecord::CounterCache
  include ::ActiveRecord::Attributes
  include ::ActiveRecord::Locking::Optimistic
  include ::ActiveRecord::Locking::Pessimistic
  include ::ActiveModel::AttributeMethods
  include ::ActiveRecord::AttributeMethods
  include ::ActiveRecord::Base::GeneratedAttributeMethods
  include ::ActiveRecord::Base::GeneratedAssociationMethods
  include ::ActiveRecord::AttributeMethods::Read
  include ::ActiveRecord::AttributeMethods::Write
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::ActiveRecord::AttributeMethods::Query
  include ::ActiveRecord::AttributeMethods::PrimaryKey
  include ::ActiveRecord::AttributeMethods::TimeZoneConversion
  include ::ActiveModel::Dirty
  include ::ActiveRecord::AttributeMethods::Dirty
  include ::ActiveRecord::AttributeMethods::Serialization
  include ::ActiveRecord::Callbacks
  include ::ActiveModel::Validations::Callbacks
  include ::ActiveRecord::Timestamp
  include ::ActiveRecord::Associations
  include ::ActiveModel::SecurePassword
  include ::ActiveRecord::AutosaveAssociation
  include ::ActiveRecord::NestedAttributes
  include ::ActiveRecord::Transactions
  include ::ActiveRecord::TouchLater
  include ::ActiveRecord::NoTouching
  include ::ActiveRecord::Reflection
  include ::ActiveModel::Serialization
  include ::ActiveModel::Serializers::JSON
  include ::ActiveRecord::Serialization
  include ::ActiveRecord::Store
  include ::ActiveRecord::SecureToken
  include ::ActiveRecord::SignedId
  include ::ActiveRecord::Suppressor
  include ::ActiveRecord::Encryption::EncryptableRecord
  include ::FriendlyId::UnfriendlyUtils
  extend ::ActiveModel::Naming
  extend ::ActiveSupport::Benchmarkable
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveRecord::ConnectionHandling
  extend ::ActiveRecord::QueryCache::ClassMethods
  extend ::ActiveRecord::Querying
  extend ::ActiveModel::Translation
  extend ::ActiveRecord::Translation
  extend ::ActiveRecord::DynamicMatchers
  extend ::ActiveRecord::DelegatedType
  extend ::ActiveRecord::Explain
  extend ::ActiveRecord::Enum
  extend ::ActiveRecord::Delegation::DelegateCache
  extend ::ActiveRecord::Aggregations::ClassMethods
  extend ::ActiveRecord::Core::ClassMethods
  extend ::ActiveRecord::Persistence::ClassMethods
  extend ::ActiveRecord::ReadonlyAttributes::ClassMethods
  extend ::ActiveRecord::ModelSchema::ClassMethods
  extend ::ActiveRecord::Inheritance::ClassMethods
  extend ::ActiveRecord::Scoping::ClassMethods
  extend ::ActiveRecord::Scoping::Default::ClassMethods
  extend ::ActiveRecord::Scoping::Named::ClassMethods
  extend ::ActiveRecord::Sanitization::ClassMethods
  extend ::ActiveModel::Conversion::ClassMethods
  extend ::ActiveRecord::Integration::ClassMethods
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveRecord::Validations::ClassMethods
  extend ::ActiveRecord::CounterCache::ClassMethods
  extend ::ActiveRecord::Attributes::ClassMethods
  extend ::ActiveRecord::Locking::Optimistic::ClassMethods
  extend ::ActiveModel::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Read::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Write::ClassMethods
  extend ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  extend ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Dirty::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Serialization::ClassMethods
  extend ::ActiveRecord::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::Callbacks::ClassMethods
  extend ::ActiveRecord::Timestamp::ClassMethods
  extend ::ActiveRecord::Associations::ClassMethods
  extend ::ActiveModel::SecurePassword::ClassMethods
  extend ::ActiveRecord::AutosaveAssociation::ClassMethods
  extend ::ActiveRecord::NestedAttributes::ClassMethods
  extend ::ActiveRecord::Transactions::ClassMethods
  extend ::ActiveRecord::NoTouching::ClassMethods
  extend ::ActiveRecord::Reflection::ClassMethods
  extend ::ActiveRecord::Store::ClassMethods
  extend ::ActiveRecord::SecureToken::ClassMethods
  extend ::ActiveRecord::SignedId::ClassMethods
  extend ::ActiveRecord::Suppressor::ClassMethods
  extend ::ActiveRecord::Encryption::EncryptableRecord::ClassMethods
  extend ::OrmAdapter::ToAdapter
  extend ::Filterrific::ActiveRecordExtension

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _before_commit_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _commit_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _create_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _destroy_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _find_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _initialize_callbacks; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
  def _reflections; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
  def _reflections?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _rollback_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_before_commit_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_commit_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_create_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_destroy_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_find_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_initialize_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_rollback_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_save_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_touch_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_update_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_validation_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _save_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _touch_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _update_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _validate_callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _validation_callbacks; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#52
  def _validators; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#52
  def _validators?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
  def aggregate_reflections; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
  def aggregate_reflections?; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
  def attribute_aliases; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
  def attribute_aliases?; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
  def attribute_method_matchers; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
  def attribute_method_matchers?; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
  def automatic_scope_inversing; end

  # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
  def automatic_scope_inversing?; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#16
  def cache_timestamp_format; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#16
  def cache_timestamp_format?; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#24
  def cache_versioning; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#24
  def cache_versioning?; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#32
  def collection_cache_versioning; end

  # source://activerecord/7.0.4/lib/active_record/integration.rb#32
  def collection_cache_versioning?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#171
  def column_for_attribute(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/core.rb#74
  def default_connection_handler; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#74
  def default_connection_handler?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#76
  def default_role; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#76
  def default_role?; end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#20
  def default_scope_override; end

  # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#19
  def default_scopes; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#78
  def default_shard; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#78
  def default_shard?; end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#116
  def defined_enums; end

  # source://activerecord/7.0.4/lib/active_record/enum.rb#116
  def defined_enums?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#26
  def destroy_association_async_job; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes; end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
  def encrypted_attributes?; end

  # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
  def include_root_in_json; end

  # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
  def include_root_in_json?; end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically; end

  # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
  def lock_optimistically?; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#20
  def logger; end

  # source://activerecord/7.0.4/lib/active_record/core.rb#20
  def logger?; end

  # source://activemodel/7.0.4/lib/active_model/naming.rb#244
  def model_name(*_arg0, **_arg1, &_arg2); end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options; end

  # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
  def nested_attributes_options?; end

  # source://paranoia/2.6.0/lib/paranoia.rb#293
  def paranoid?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
  def partial_inserts; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
  def partial_inserts?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
  def partial_updates; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
  def partial_updates?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
  def pluralize_table_names; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
  def pluralize_table_names?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
  def primary_key_prefix_type; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
  def primary_key_prefix_type?; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
  def record_timestamps; end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
  def record_timestamps=(_arg0); end

  # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
  def record_timestamps?; end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret; end

  # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
  def signed_id_verifier_secret?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
  def skip_time_zone_conversion_for_attributes; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
  def skip_time_zone_conversion_for_attributes?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
  def store_full_class_name; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
  def store_full_class_name?; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
  def store_full_sti_class; end

  # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
  def store_full_sti_class?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
  def table_name_prefix; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
  def table_name_prefix?; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
  def table_name_suffix; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
  def table_name_suffix?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
  def time_zone_aware_attributes; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
  def time_zone_aware_attributes?; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
  def time_zone_aware_types; end

  # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
  def time_zone_aware_types?; end

  # source://delayed_job//lib/delayed/serialization/active_record.rb#12
  def to_yaml_properties; end

  # source://activerecord/7.0.4/lib/active_record/model_schema.rb#171
  def type_for_attribute(*_arg0, **_arg1, &_arg2); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#48
  def validation_context; end

  private

  # source://paranoia/2.6.0/lib/paranoia.rb#309
  def deletion_time; end

  # source://paranoia/2.6.0/lib/paranoia.rb#297
  def paranoia_column; end

  # source://paranoia/2.6.0/lib/paranoia.rb#301
  def paranoia_column_value; end

  # source://paranoia/2.6.0/lib/paranoia.rb#305
  def paranoia_sentinel_value; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#48
  def validation_context=(_arg0); end

  class << self
    # source://paranoia/2.6.0/lib/paranoia.rb#283
    def I_AM_THE_DESTROYER!; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly; end

    # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly=(value); end

    # source://activerecord/7.0.4/lib/active_record/readonly_attributes.rb#8
    def _attr_readonly?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _before_commit_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _before_commit_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _commit_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _commit_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _create_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _create_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _destroy_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _destroy_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _find_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _find_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _initialize_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _initialize_callbacks=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
    def _reflections=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#11
    def _reflections?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _rollback_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _rollback_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _save_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _save_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _touch_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _touch_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _update_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _update_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _validate_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _validate_callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _validation_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _validation_callbacks=(value); end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators=(value); end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators?; end

    # source://paranoia/2.6.0/lib/paranoia.rb#246
    def acts_as_paranoid(options = T.unsafe(nil)); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_create(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_destroy(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_find(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_initialize(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_save(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_touch(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#144
    def after_update(*args, **options, &block); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
    def aggregate_reflections; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
    def aggregate_reflections=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#12
    def aggregate_reflections?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#82
    def application_record_class?; end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_create(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_destroy(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_save(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#137
    def around_update(*args, **options, &block); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#129
    def asynchronous_queries_session; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#133
    def asynchronous_queries_tracker; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases=(value); end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases?; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers=(value); end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers?; end

    # source://activerecord/7.0.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads; end

    # source://activerecord/7.0.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads=(value); end

    # source://activerecord/7.0.4/lib/active_record/attributes.rb#11
    def attributes_to_define_after_schema_loads?; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing; end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing=(value); end

    # source://activerecord/7.0.4/lib/active_record/reflection.rb#13
    def automatic_scope_inversing?; end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_create(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_destroy(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_save(*args, **options, &block); end

    # source://activemodel/7.0.4/lib/active_model/callbacks.rb#130
    def before_update(*args, **options, &block); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#68
    def belongs_to_required_by_default?; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#16
    def cache_timestamp_format; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#16
    def cache_timestamp_format=(value); end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#16
    def cache_timestamp_format?; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#24
    def cache_versioning; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#24
    def cache_versioning=(value); end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#24
    def cache_versioning?; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#32
    def collection_cache_versioning; end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#32
    def collection_cache_versioning=(value); end

    # source://activerecord/7.0.4/lib/active_record/integration.rb#32
    def collection_cache_versioning?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#56
    def configurations; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#50
    def configurations=(config); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#201
    def connected_to_stack; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#215
    def connection_class; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#211
    def connection_class=(b); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#219
    def connection_class?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#223
    def connection_class_for_self; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#94
    def connection_handler; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#98
    def connection_handler=(handler); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#102
    def connection_handlers; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#111
    def connection_handlers=(handlers); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#188
    def current_preventing_writes; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#147
    def current_role; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#169
    def current_shard; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#74
    def default_connection_handler; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#74
    def default_connection_handler=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#74
    def default_connection_handler?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#76
    def default_role; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#76
    def default_role=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#76
    def default_role?; end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#20
    def default_scope_override; end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#20
    def default_scope_override=(value); end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#19
    def default_scopes; end

    # source://activerecord/7.0.4/lib/active_record/scoping/default.rb#19
    def default_scopes=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#78
    def default_shard; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#78
    def default_shard=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#78
    def default_shard?; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums; end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums=(value); end

    # source://activerecord/7.0.4/lib/active_record/enum.rb#116
    def defined_enums?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#26
    def destroy_association_async_job; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#26
    def destroy_association_async_job=(value); end

    # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes; end

    # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes=(value); end

    # source://activerecord/7.0.4/lib/active_record/encryption/encryptable_record.rb#11
    def encrypted_attributes?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#66
    def enumerate_columns_in_select_statements?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#72
    def has_many_inversing; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#72
    def has_many_inversing=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#72
    def has_many_inversing?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#158
    def immutable_strings_by_default?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#157
    def implicit_order_column; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#157
    def implicit_order_column=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#157
    def implicit_order_column?; end

    # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json; end

    # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json=(value); end

    # source://activemodel/7.0.4/lib/active_model/serializers/json.rb#15
    def include_root_in_json?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#160
    def inheritance_column; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#311
    def inheritance_column=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#160
    def inheritance_column?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#155
    def internal_metadata_table_name?; end

    # source://activerecord/7.0.4/lib/active_record/store.rb#99
    def local_stored_attributes; end

    # source://activerecord/7.0.4/lib/active_record/store.rb#99
    def local_stored_attributes=(_arg0); end

    # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically; end

    # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically=(value); end

    # source://activerecord/7.0.4/lib/active_record/locking/optimistic.rb#56
    def lock_optimistically?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#20
    def logger; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#20
    def logger=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#20
    def logger?; end

    # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options; end

    # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options=(value); end

    # source://activerecord/7.0.4/lib/active_record/nested_attributes.rb#15
    def nested_attributes_options?; end

    # source://paranoia/2.6.0/lib/paranoia.rb#292
    def paranoid?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#18
    def partial_inserts?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/dirty.rb#17
    def partial_updates?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#156
    def pluralize_table_names?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#151
    def primary_key_prefix_type?; end

    # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
    def record_timestamps; end

    # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
    def record_timestamps=(value); end

    # source://activerecord/7.0.4/lib/active_record/timestamp.rb#47
    def record_timestamps?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#154
    def schema_migrations_table_name?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#80
    def shard_selector; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#80
    def shard_selector=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#80
    def shard_selector?; end

    # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret; end

    # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret=(value); end

    # source://activerecord/7.0.4/lib/active_record/signed_id.rb#13
    def signed_id_verifier_secret?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#71
    def skip_time_zone_conversion_for_attributes?; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
    def store_full_class_name; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
    def store_full_class_name=(value); end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#42
    def store_full_class_name?; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class; end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class=(value); end

    # source://activerecord/7.0.4/lib/active_record/inheritance.rb#46
    def store_full_sti_class?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#70
    def strict_loading_by_default; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#70
    def strict_loading_by_default=(value); end

    # source://activerecord/7.0.4/lib/active_record/core.rb#70
    def strict_loading_by_default?; end

    # source://activerecord/7.0.4/lib/active_record/core.rb#238
    def strict_loading_violation!(owner:, reflection:); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
    def table_name_prefix; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
    def table_name_prefix=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#152
    def table_name_prefix?; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
    def table_name_suffix; end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
    def table_name_suffix=(value); end

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#153
    def table_name_suffix?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#70
    def time_zone_aware_attributes?; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types; end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types=(value); end

    # source://activerecord/7.0.4/lib/active_record/attribute_methods/time_zone_conversion.rb#72
    def time_zone_aware_types?; end

    # source://delayed_job//lib/delayed/serialization/active_record.rb#6
    def yaml_new(klass, _tag, val); end

    private

    # source://activerecord/7.0.4/lib/active_record/model_schema.rb#160
    def _inheritance_column=(value); end
  end
end

module ActiveRecord::Base::GeneratedAssociationMethods; end
module ActiveRecord::Base::GeneratedAttributeMethods; end

# source://orm_adapter/0.5.0/lib/orm_adapter/adapters/active_record.rb#81
ActiveRecord::Base::OrmAdapter = OrmAdapter::ActiveRecord

module ActiveRecord::Callbacks::ClassMethods
  include ::ActiveModel::Callbacks
end

module Delayed; end
module Delayed::Backend; end

module Delayed::Backend::Base
  mixes_in_class_methods ::Delayed::Backend::Base::ClassMethods

  # @return [Boolean]
  #
  # source://delayed_job//lib/delayed/backend/base.rb#129
  def destroy_failed_jobs?; end

  # Returns the value of attribute error.
  #
  # source://delayed_job//lib/delayed/backend/base.rb#47
  def error; end

  # source://delayed_job//lib/delayed/backend/base.rb#48
  def error=(error); end

  # source://delayed_job//lib/delayed/backend/base.rb#135
  def fail!; end

  # @return [Boolean]
  #
  # source://delayed_job//lib/delayed/backend/base.rb#53
  def failed; end

  # @return [Boolean]
  #
  # source://delayed_job//lib/delayed/backend/base.rb#53
  def failed?; end

  # source://delayed_job//lib/delayed/backend/base.rb#98
  def hook(name, *args); end

  # source://delayed_job//lib/delayed/backend/base.rb#77
  def invoke_job; end

  # source://delayed_job//lib/delayed/backend/base.rb#114
  def max_attempts; end

  # source://delayed_job//lib/delayed/backend/base.rb#118
  def max_run_time; end

  # source://delayed_job//lib/delayed/backend/base.rb#60
  def name; end

  # source://delayed_job//lib/delayed/backend/base.rb#71
  def payload_object; end

  # source://delayed_job//lib/delayed/backend/base.rb#66
  def payload_object=(object); end

  # source://delayed_job//lib/delayed/backend/base.rb#106
  def reschedule_at; end

  # Unlock this job (note: not saved to DB)
  #
  # source://delayed_job//lib/delayed/backend/base.rb#93
  def unlock; end

  protected

  # Call during reload operation to clear out internal state
  #
  # source://delayed_job//lib/delayed/backend/base.rb#147
  def reset; end

  # source://delayed_job//lib/delayed/backend/base.rb#142
  def set_default_run_at; end

  class << self
    # @private
    #
    # source://delayed_job//lib/delayed/backend/base.rb#4
    def included(base); end
  end
end

module Delayed::Backend::Base::ClassMethods
  # Hook method that is called after a new worker is forked
  #
  # source://delayed_job//lib/delayed/backend/base.rb#39
  def after_fork; end

  # Hook method that is called before a new worker is forked
  #
  # source://delayed_job//lib/delayed/backend/base.rb#36
  def before_fork; end

  # Add a job to the queue
  #
  # source://delayed_job//lib/delayed/backend/base.rb#10
  def enqueue(*args); end

  # source://delayed_job//lib/delayed/backend/base.rb#15
  def enqueue_job(options); end

  # Allow the backend to attempt recovery from reserve errors
  #
  # source://delayed_job//lib/delayed/backend/base.rb#33
  def recover_from(_error); end

  # source://delayed_job//lib/delayed/backend/base.rb#24
  def reserve(worker, max_run_time = T.unsafe(nil)); end

  # source://delayed_job//lib/delayed/backend/base.rb#41
  def work_off(num = T.unsafe(nil)); end
end

# source://delayed_job//lib/delayed/backend/base.rb#58
Delayed::Backend::Base::ParseObjectFromYaml = T.let(T.unsafe(nil), Regexp)

class Delayed::Backend::JobPreparer
  # @return [JobPreparer] a new instance of JobPreparer
  #
  # source://delayed_job//lib/delayed/backend/job_preparer.rb#6
  def initialize(*args); end

  # Returns the value of attribute args.
  #
  # source://delayed_job//lib/delayed/backend/job_preparer.rb#4
  def args; end

  # Returns the value of attribute options.
  #
  # source://delayed_job//lib/delayed/backend/job_preparer.rb#4
  def options; end

  # source://delayed_job//lib/delayed/backend/job_preparer.rb#11
  def prepare; end

  private

  # source://delayed_job//lib/delayed/backend/job_preparer.rb#38
  def handle_deprecation; end

  # source://delayed_job//lib/delayed/backend/job_preparer.rb#21
  def set_payload; end

  # source://delayed_job//lib/delayed/backend/job_preparer.rb#33
  def set_priority; end

  # source://delayed_job//lib/delayed/backend/job_preparer.rb#25
  def set_queue_name; end
end

class Delayed::Callback
  # @return [Callback] a new instance of Callback
  #
  # source://delayed_job//lib/delayed/lifecycle.rb#56
  def initialize; end

  # source://delayed_job//lib/delayed/lifecycle.rb#71
  def add(type, &callback); end

  # source://delayed_job//lib/delayed/lifecycle.rb#64
  def execute(*args, &block); end
end

module Delayed::Compatibility
  class << self
    # source://delayed_job//lib/delayed/compatibility.rb#8
    def executable_prefix; end

    # source://delayed_job//lib/delayed/compatibility.rb#12
    def proxy_object_class; end
  end
end

module Delayed::DelayMail
  # source://delayed_job//lib/delayed/performable_mailer.rb#12
  def delay(options = T.unsafe(nil)); end
end

class Delayed::DelayProxy < ::ActiveSupport::ProxyObject
  # @return [DelayProxy] a new instance of DelayProxy
  #
  # source://delayed_job//lib/delayed/message_sending.rb#3
  def initialize(payload_class, target, options); end

  # source://delayed_job//lib/delayed/message_sending.rb#10
  def method_missing(method, *args); end
end

class Delayed::DeserializationError < ::StandardError; end
class Delayed::FatalBackendError < ::RuntimeError; end
class Delayed::InvalidCallback < ::RuntimeError; end

# source://delayed_job//lib/delayed/worker.rb#71
Delayed::Job = Delayed::Backend::ActiveRecord::Job

class Delayed::Lifecycle
  # @return [Lifecycle] a new instance of Lifecycle
  #
  # source://delayed_job//lib/delayed/lifecycle.rb#15
  def initialize; end

  # source://delayed_job//lib/delayed/lifecycle.rb#25
  def after(event, &block); end

  # source://delayed_job//lib/delayed/lifecycle.rb#29
  def around(event, &block); end

  # source://delayed_job//lib/delayed/lifecycle.rb#21
  def before(event, &block); end

  # source://delayed_job//lib/delayed/lifecycle.rb#33
  def run_callbacks(event, *args, &block); end

  private

  # source://delayed_job//lib/delayed/lifecycle.rb#45
  def add(type, event, &block); end

  # @raise [InvalidCallback]
  #
  # source://delayed_job//lib/delayed/lifecycle.rb#50
  def missing_callback(event); end
end

# source://delayed_job//lib/delayed/lifecycle.rb#5
Delayed::Lifecycle::EVENTS = T.let(T.unsafe(nil), Hash)

module Delayed::MessageSending
  # source://delayed_job//lib/delayed/message_sending.rb#17
  def __delay__(options = T.unsafe(nil)); end

  # source://delayed_job//lib/delayed/message_sending.rb#17
  def delay(options = T.unsafe(nil)); end

  # source://delayed_job//lib/delayed/message_sending.rb#27
  def send_at(time, method, *args); end

  # source://delayed_job//lib/delayed/message_sending.rb#22
  def send_later(method, *args); end
end

module Delayed::MessageSendingClassMethods
  # source://delayed_job//lib/delayed/message_sending.rb#34
  def handle_asynchronously(method, opts = T.unsafe(nil)); end
end

class Delayed::PerformableMailer < ::Delayed::PerformableMethod
  # source://delayed_job//lib/delayed/performable_mailer.rb#5
  def perform; end
end

class Delayed::PerformableMethod
  # @raise [NoMethodError]
  # @return [PerformableMethod] a new instance of PerformableMethod
  #
  # source://delayed_job//lib/delayed/performable_method.rb#5
  def initialize(object, method_name, args); end

  # Returns the value of attribute args.
  #
  # source://delayed_job//lib/delayed/performable_method.rb#3
  def args; end

  # Sets the attribute args
  #
  # @param value the value to set the attribute args to.
  #
  # source://delayed_job//lib/delayed/performable_method.rb#3
  def args=(_arg0); end

  # source://delayed_job//lib/delayed/performable_method.rb#17
  def display_name; end

  # serialize to YAML
  #
  # source://delayed_job//lib/delayed/psych_ext.rb#4
  def encode_with(coder); end

  # source://delayed_job//lib/delayed/performable_method.rb#29
  def method(sym); end

  # source://delayed_job//lib/delayed/performable_method.rb#34
  def method_missing(symbol, *args); end

  # Returns the value of attribute method_name.
  #
  # source://delayed_job//lib/delayed/performable_method.rb#3
  def method_name; end

  # Sets the attribute method_name
  #
  # @param value the value to set the attribute method_name to.
  #
  # source://delayed_job//lib/delayed/performable_method.rb#3
  def method_name=(_arg0); end

  # Returns the value of attribute object.
  #
  # source://delayed_job//lib/delayed/performable_method.rb#3
  def object; end

  # Sets the attribute object
  #
  # @param value the value to set the attribute object to.
  #
  # source://delayed_job//lib/delayed/performable_method.rb#3
  def object=(_arg0); end

  # source://delayed_job//lib/delayed/performable_method.rb#25
  def perform; end

  # @return [Boolean]
  #
  # source://delayed_job//lib/delayed/performable_method.rb#39
  def respond_to?(symbol, include_private = T.unsafe(nil)); end
end

class Delayed::Plugin
  # @return [Plugin] a new instance of Plugin
  #
  # source://delayed_job//lib/delayed/plugin.rb#11
  def initialize; end

  # source://delayed_job//lib/delayed/plugin.rb#5
  def callback_block; end

  # source://delayed_job//lib/delayed/plugin.rb#5
  def callback_block=(_arg0); end

  # source://delayed_job//lib/delayed/plugin.rb#5
  def callback_block?; end

  class << self
    # source://delayed_job//lib/delayed/plugin.rb#5
    def callback_block; end

    # source://delayed_job//lib/delayed/plugin.rb#5
    def callback_block=(value); end

    # source://delayed_job//lib/delayed/plugin.rb#5
    def callback_block?; end

    # source://delayed_job//lib/delayed/plugin.rb#7
    def callbacks(&block); end
  end
end

module Delayed::Plugins; end

class Delayed::Plugins::Bugsnag < ::Delayed::Plugin
  class << self
    # source://delayed_job//lib/delayed/plugin.rb#5
    def callback_block; end

    # source://bugsnag/6.24.2/lib/bugsnag/integrations/delayed_job.rb#16
    def delayed_job_version; end
  end
end

class Delayed::Plugins::ClearLocks < ::Delayed::Plugin
  class << self
    # source://delayed_job//lib/delayed/plugin.rb#5
    def callback_block; end
  end
end

module Delayed::PsychExt; end

class Delayed::PsychExt::ToRuby < ::Psych::Visitors::ToRuby
  # defined? is triggering something really messed up in
  # jruby causing both the if AND else clauses to execute,
  # however if the check is run here, everything is fine
  #
  # source://delayed_job//lib/delayed/psych_ext.rb#90
  def jruby_is_seriously_borked; end

  # source://delayed_job//lib/delayed/psych_ext.rb#94
  def resolve_class(klass_name); end

  # source://delayed_job//lib/delayed/psych_ext.rb#30
  def visit_Psych_Nodes_Mapping(object); end
end

class Delayed::Railtie < ::Rails::Railtie; end

class Delayed::Worker
  # @return [Worker] a new instance of Worker
  #
  # source://delayed_job//lib/delayed/worker.rb#130
  def initialize(options = T.unsafe(nil)); end

  # source://delayed_job//lib/delayed/worker.rb#30
  def backend; end

  # source://delayed_job//lib/delayed/worker.rb#22
  def default_log_level; end

  # source://delayed_job//lib/delayed/worker.rb#22
  def default_log_level=(val); end

  # source://delayed_job//lib/delayed/worker.rb#22
  def default_priority; end

  # source://delayed_job//lib/delayed/worker.rb#22
  def default_priority=(val); end

  # source://delayed_job//lib/delayed/worker.rb#28
  def default_queue_name; end

  # source://delayed_job//lib/delayed/worker.rb#28
  def default_queue_name=(val); end

  # source://delayed_job//lib/delayed/worker.rb#22
  def delay_jobs; end

  # source://delayed_job//lib/delayed/worker.rb#22
  def delay_jobs=(val); end

  # source://delayed_job//lib/delayed/worker.rb#22
  def destroy_failed_jobs; end

  # source://delayed_job//lib/delayed/worker.rb#22
  def destroy_failed_jobs=(val); end

  # source://delayed_job//lib/delayed/worker.rb#22
  def exit_on_complete; end

  # source://delayed_job//lib/delayed/worker.rb#22
  def exit_on_complete=(val); end

  # source://delayed_job//lib/delayed/worker.rb#259
  def failed(job); end

  # source://delayed_job//lib/delayed/worker.rb#272
  def job_say(job, text, level = T.unsafe(nil)); end

  # source://delayed_job//lib/delayed/worker.rb#22
  def logger; end

  # source://delayed_job//lib/delayed/worker.rb#22
  def logger=(val); end

  # source://delayed_job//lib/delayed/worker.rb#288
  def max_attempts(job); end

  # source://delayed_job//lib/delayed/worker.rb#22
  def max_attempts=(val); end

  # source://delayed_job//lib/delayed/worker.rb#22
  def max_priority; end

  # source://delayed_job//lib/delayed/worker.rb#22
  def max_priority=(val); end

  # source://delayed_job//lib/delayed/worker.rb#292
  def max_run_time(job); end

  # source://delayed_job//lib/delayed/worker.rb#22
  def max_run_time=(val); end

  # source://delayed_job//lib/delayed/worker.rb#22
  def min_priority; end

  # source://delayed_job//lib/delayed/worker.rb#22
  def min_priority=(val); end

  # Every worker has a unique name which by default is the pid of the process. There are some
  # advantages to overriding this with something which survives worker restarts:  Workers can
  # safely resume working on tasks which are locked by themselves. The worker will assume that
  # it crashed before.
  #
  # source://delayed_job//lib/delayed/worker.rb#147
  def name; end

  # Sets the name of the worker.
  # Setting the name to nil will reset the default worker name
  #
  # source://delayed_job//lib/delayed/worker.rb#154
  def name=(_arg0); end

  # name_prefix is ignored if name is set directly
  #
  # source://delayed_job//lib/delayed/worker.rb#33
  def name_prefix; end

  # name_prefix is ignored if name is set directly
  #
  # source://delayed_job//lib/delayed/worker.rb#33
  def name_prefix=(_arg0); end

  # source://delayed_job//lib/delayed/worker.rb#22
  def plugins; end

  # source://delayed_job//lib/delayed/worker.rb#22
  def plugins=(val); end

  # source://delayed_job//lib/delayed/worker.rb#30
  def queue_attributes; end

  # source://delayed_job//lib/delayed/worker.rb#22
  def queues; end

  # source://delayed_job//lib/delayed/worker.rb#22
  def queues=(val); end

  # source://delayed_job//lib/delayed/worker.rb#61
  def raise_signal_exceptions; end

  # source://delayed_job//lib/delayed/worker.rb#61
  def raise_signal_exceptions=(val); end

  # source://delayed_job//lib/delayed/worker.rb#22
  def read_ahead; end

  # source://delayed_job//lib/delayed/worker.rb#22
  def read_ahead=(val); end

  # Reschedule the job in the future (when a job fails).
  # Uses an exponential scale depending on the number of failed attempts.
  #
  # source://delayed_job//lib/delayed/worker.rb#247
  def reschedule(job, time = T.unsafe(nil)); end

  # source://delayed_job//lib/delayed/worker.rb#227
  def run(job); end

  # source://delayed_job//lib/delayed/worker.rb#277
  def say(text, level = T.unsafe(nil)); end

  # source://delayed_job//lib/delayed/worker.rb#22
  def sleep_delay; end

  # source://delayed_job//lib/delayed/worker.rb#22
  def sleep_delay=(val); end

  # source://delayed_job//lib/delayed/worker.rb#156
  def start; end

  # source://delayed_job//lib/delayed/worker.rb#198
  def stop; end

  # @return [Boolean]
  #
  # source://delayed_job//lib/delayed/worker.rb#202
  def stop?; end

  # Do num jobs and return stats on success/failure.
  # Exit early if interrupted.
  #
  # source://delayed_job//lib/delayed/worker.rb#208
  def work_off(num = T.unsafe(nil)); end

  protected

  # source://delayed_job//lib/delayed/worker.rb#302
  def handle_failed_job(job, error); end

  # source://delayed_job//lib/delayed/worker.rb#327
  def reload!; end

  # Run the next job we can get an exclusive lock on.
  # If no jobs are left we return nil
  #
  # source://delayed_job//lib/delayed/worker.rb#310
  def reserve_and_run_one_job; end

  # source://delayed_job//lib/delayed/worker.rb#315
  def reserve_job; end

  # source://delayed_job//lib/delayed/worker.rb#298
  def say_queue(queue); end

  class << self
    # source://delayed_job//lib/delayed/worker.rb#94
    def after_fork; end

    # source://delayed_job//lib/delayed/worker.rb#30
    def backend; end

    # source://delayed_job//lib/delayed/worker.rb#64
    def backend=(backend); end

    # source://delayed_job//lib/delayed/worker.rb#83
    def before_fork; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def default_log_level; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def default_log_level=(val); end

    # source://delayed_job//lib/delayed/worker.rb#22
    def default_priority; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def default_priority=(val); end

    # source://delayed_job//lib/delayed/worker.rb#28
    def default_queue_name; end

    # source://delayed_job//lib/delayed/worker.rb#28
    def default_queue_name=(val); end

    # @return [Boolean]
    #
    # source://delayed_job//lib/delayed/worker.rb#122
    def delay_job?(job); end

    # source://delayed_job//lib/delayed/worker.rb#22
    def delay_jobs; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def delay_jobs=(val); end

    # source://delayed_job//lib/delayed/worker.rb#22
    def destroy_failed_jobs; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def destroy_failed_jobs=(val); end

    # source://delayed_job//lib/delayed/worker.rb#22
    def exit_on_complete; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def exit_on_complete=(val); end

    # source://delayed_job//lib/delayed/worker.rb#79
    def guess_backend; end

    # source://delayed_job//lib/delayed/worker.rb#106
    def lifecycle; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def logger; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def logger=(val); end

    # source://delayed_job//lib/delayed/worker.rb#22
    def max_attempts; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def max_attempts=(val); end

    # source://delayed_job//lib/delayed/worker.rb#22
    def max_priority; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def max_priority=(val); end

    # source://delayed_job//lib/delayed/worker.rb#22
    def max_run_time; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def max_run_time=(val); end

    # source://delayed_job//lib/delayed/worker.rb#22
    def min_priority; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def min_priority=(val); end

    # source://delayed_job//lib/delayed/worker.rb#22
    def plugins; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def plugins=(val); end

    # source://delayed_job//lib/delayed/worker.rb#30
    def queue_attributes; end

    # source://delayed_job//lib/delayed/worker.rb#75
    def queue_attributes=(val); end

    # source://delayed_job//lib/delayed/worker.rb#22
    def queues; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def queues=(val); end

    # source://delayed_job//lib/delayed/worker.rb#61
    def raise_signal_exceptions; end

    # source://delayed_job//lib/delayed/worker.rb#61
    def raise_signal_exceptions=(val); end

    # source://delayed_job//lib/delayed/worker.rb#22
    def read_ahead; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def read_ahead=(val); end

    # @return [Boolean]
    #
    # source://delayed_job//lib/delayed/worker.rb#118
    def reload_app?; end

    # source://delayed_job//lib/delayed/worker.rb#35
    def reset; end

    # source://delayed_job//lib/delayed/worker.rb#113
    def setup_lifecycle; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def sleep_delay; end

    # source://delayed_job//lib/delayed/worker.rb#22
    def sleep_delay=(val); end
  end
end

# source://delayed_job//lib/delayed/worker.rb#16
Delayed::Worker::DEFAULT_DEFAULT_PRIORITY = T.let(T.unsafe(nil), Integer)

# source://delayed_job//lib/delayed/worker.rb#17
Delayed::Worker::DEFAULT_DELAY_JOBS = T.let(T.unsafe(nil), TrueClass)

# source://delayed_job//lib/delayed/worker.rb#12
Delayed::Worker::DEFAULT_LOG_LEVEL = T.let(T.unsafe(nil), String)

# source://delayed_job//lib/delayed/worker.rb#14
Delayed::Worker::DEFAULT_MAX_ATTEMPTS = T.let(T.unsafe(nil), Integer)

# source://delayed_job//lib/delayed/worker.rb#15
Delayed::Worker::DEFAULT_MAX_RUN_TIME = T.let(T.unsafe(nil), ActiveSupport::Duration)

# source://delayed_job//lib/delayed/worker.rb#18
Delayed::Worker::DEFAULT_QUEUES = T.let(T.unsafe(nil), Array)

# source://delayed_job//lib/delayed/worker.rb#19
Delayed::Worker::DEFAULT_QUEUE_ATTRIBUTES = T.let(T.unsafe(nil), ActiveSupport::HashWithIndifferentAccess)

# source://delayed_job//lib/delayed/worker.rb#20
Delayed::Worker::DEFAULT_READ_AHEAD = T.let(T.unsafe(nil), Integer)

# source://delayed_job//lib/delayed/worker.rb#13
Delayed::Worker::DEFAULT_SLEEP_DELAY = T.let(T.unsafe(nil), Integer)

class Delayed::WorkerTimeout < ::Timeout::Error
  # source://delayed_job//lib/delayed/exceptions.rb#5
  def message; end
end

module Psych
  class << self
    # source://delayed_job//lib/delayed/psych_ext.rb#15
    def load_dj(yaml); end
  end
end

# source://psych/4.0.3/psych/versions.rb#5
Psych::VERSION = T.let(T.unsafe(nil), String)
