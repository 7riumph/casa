# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `bugsnag` gem.
# Please instead update this file by running `bin/tapioca gem bugsnag`.

module Bugsnag
  class << self
    # Add values to metadata
    #
    # @overload add_metadata
    # @overload add_metadata
    # @return [void]
    #
    # source://bugsnag//lib/bugsnag.rb#408
    def add_metadata(section, key_or_data, *args); end

    # Add the given callback to the list of on_breadcrumb callbacks
    #
    # The on_breadcrumb callbacks will be called when a breadcrumb is left and
    # are passed the {Breadcrumbs::Breadcrumb Breadcrumb} object
    #
    # Returning false from an on_breadcrumb callback will cause the breadcrumb
    # to be ignored and will prevent any remaining callbacks from being called
    #
    # @param callback [Proc, Method, #call]
    # @return [void]
    #
    # source://bugsnag//lib/bugsnag.rb#344
    def add_on_breadcrumb(callback); end

    # Add the given callback to the list of on_error callbacks
    #
    # The on_error callbacks will be called when an error is captured or reported
    # and are passed a {Bugsnag::Report} object
    #
    # Returning false from an on_error callback will cause the error to be ignored
    # and will prevent any remaining callbacks from being called
    #
    # @param callback [Proc, Method, #call]
    # @return [void]
    #
    # source://bugsnag//lib/bugsnag.rb#317
    def add_on_error(callback); end

    # Checks if an at_exit handler has been added.
    #
    # The {Bugsnag#configure} method will add this automatically, but it can be
    # added manually using {Bugsnag#register_at_exit}.
    #
    # @return [Boolean]
    #
    # source://bugsnag//lib/bugsnag.rb#177
    def at_exit_handler_installed?; end

    # Allow access to "before notify" callbacks as an array.
    #
    # These callbacks will be called whenever an error notification is being made.
    #
    # @deprecated Use {Bugsnag#add_on_error} instead
    #
    # source://bugsnag//lib/bugsnag.rb#236
    def before_notify_callbacks; end

    # Returns the current list of breadcrumbs
    #
    # This is a per-thread circular buffer, containing at most 'max_breadcrumbs'
    # breadcrumbs
    #
    # @return [Bugsnag::Utility::CircularBuffer]
    #
    # source://bugsnag//lib/bugsnag.rb#367
    def breadcrumbs; end

    # Returns the client's Cleaner object, or creates one if not yet created.
    #
    # @api private
    # @return [Cleaner]
    #
    # source://bugsnag//lib/bugsnag.rb#377
    def cleaner; end

    # Clear values from metadata
    #
    # @overload clear_metadata
    # @overload clear_metadata
    # @return [void]
    #
    # source://bugsnag//lib/bugsnag.rb#425
    def clear_metadata(section, *args); end

    # Returns the client's Configuration object, or creates one if not yet created.
    #
    # @return [Configuration]
    #
    # source://bugsnag//lib/bugsnag.rb#185
    def configuration; end

    # Configure the Bugsnag notifier application-wide settings.
    #
    # Yields a {Configuration} object to use to set application settings.
    #
    # @return [void]
    # @yieldparam configuration [Configuration]
    #
    # source://bugsnag//lib/bugsnag.rb#55
    def configure(validate_api_key = T.unsafe(nil)); end

    # Leave a breadcrumb to be attached to subsequent reports
    #
    # @param name [String] the main breadcrumb name/message
    # @param meta_data [Hash] String, Numeric, or Boolean meta data to attach
    # @param type [String] the breadcrumb type, see {Bugsnag::BreadcrumbType}
    # @param auto [Symbol] set to :auto if the breadcrumb is automatically created
    # @return [void]
    #
    # source://bugsnag//lib/bugsnag.rb#276
    def leave_breadcrumb(name, meta_data = T.unsafe(nil), type = T.unsafe(nil), auto = T.unsafe(nil)); end

    # Load a specific integration.
    #
    # @param integration [Symbol] One of the integrations in {INTEGRATIONS}
    # @return [void]
    #
    # source://bugsnag//lib/bugsnag.rb#259
    def load_integration(integration); end

    # Attempts to load all integrations through auto-discovery.
    #
    # @return [void]
    #
    # source://bugsnag//lib/bugsnag.rb#244
    def load_integrations; end

    # Global metadata added to every event
    #
    # @return [Hash]
    #
    # source://bugsnag//lib/bugsnag.rb#388
    def metadata; end

    # Explicitly notify of an exception.
    #
    # Optionally accepts a block to append metadata to the yielded report.
    #
    # source://bugsnag//lib/bugsnag.rb#74
    def notify(exception, auto_notify = T.unsafe(nil), &block); end

    # Stop any events being attributed to the current session until it is
    # resumed or a new session is started
    #
    # @return [void]
    # @see resume_session
    #
    # source://bugsnag//lib/bugsnag.rb#215
    def pause_session; end

    # Registers an at_exit function to automatically catch errors on exit.
    #
    # @return [void]
    #
    # source://bugsnag//lib/bugsnag.rb#153
    def register_at_exit; end

    # Remove the given callback from the list of on_breadcrumb callbacks
    #
    # Note that this must be the same instance that was passed to
    # {add_on_breadcrumb}, otherwise it will not be removed
    #
    # @param callback [Proc, Method, #call]
    # @return [void]
    #
    # source://bugsnag//lib/bugsnag.rb#356
    def remove_on_breadcrumb(callback); end

    # Remove the given callback from the list of on_error callbacks
    #
    # Note that this must be the same Proc instance that was passed to
    # {Bugsnag#add_on_error}, otherwise it will not be removed
    #
    # @param callback [Proc]
    # @return [void]
    #
    # source://bugsnag//lib/bugsnag.rb#329
    def remove_on_error(callback); end

    # Resume the current session if it was previously paused. If there is no
    # current session, a new session will be started
    #
    # @return [Boolean] true if a paused session was resumed
    # @see pause_session
    #
    # source://bugsnag//lib/bugsnag.rb#226
    def resume_session; end

    # Returns the client's SessionTracker object, or creates one if not yet created.
    #
    # @return [SessionTracker]
    #
    # source://bugsnag//lib/bugsnag.rb#194
    def session_tracker; end

    # Starts a new session, which allows Bugsnag to track error rates across
    # releases
    #
    # @return [void]
    #
    # source://bugsnag//lib/bugsnag.rb#204
    def start_session; end

    private

    # source://bugsnag//lib/bugsnag.rb#439
    def abort_reason(exception, auto_notify); end

    # Verifies the current endpoint setup
    #
    # If only a notify_endpoint has been set, session tracking will be disabled
    # If only a session_endpoint has been set, and ArgumentError will be raised
    #
    # source://bugsnag//lib/bugsnag.rb#501
    def check_endpoint_setup; end

    # Check if the API key is valid and warn (once) if it is not
    #
    # source://bugsnag//lib/bugsnag.rb#488
    def check_key_valid; end

    # Deliver the notification to Bugsnag
    #
    # @param report [Report]
    # @return void
    #
    # source://bugsnag//lib/bugsnag.rb#456
    def deliver_notification(report); end

    # Convert the Report object to JSON
    #
    # We ensure the report is safe to send by removing recursion, fixing
    # encoding errors and redacting metadata according to "meta_data_filters"
    #
    # @param report [Report]
    # @return [String]
    #
    # source://bugsnag//lib/bugsnag.rb#520
    def report_to_json(report); end

    # @return [Boolean]
    #
    # source://bugsnag//lib/bugsnag.rb#431
    def should_deliver_notification?(exception, auto_notify); end

    # When running a script with 'bundle exec', uncaught exceptions will be
    # converted to "friendly errors" which has the side effect of wrapping them
    # in a SystemExit
    #
    # By default we ignore SystemExit, so need to unwrap the original exception
    # in order to avoid ignoring real errors
    #
    # @param exception [Exception]
    # @return [Exception]
    #
    # source://bugsnag//lib/bugsnag.rb#537
    def unwrap_bundler_exception(exception); end
  end
end

module Bugsnag::BreadcrumbType; end

# source://bugsnag//lib/bugsnag/breadcrumb_type.rb#5
Bugsnag::BreadcrumbType::ERROR = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/breadcrumb_type.rb#6
Bugsnag::BreadcrumbType::LOG = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/breadcrumb_type.rb#7
Bugsnag::BreadcrumbType::MANUAL = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/breadcrumb_type.rb#8
Bugsnag::BreadcrumbType::NAVIGATION = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/breadcrumb_type.rb#9
Bugsnag::BreadcrumbType::PROCESS = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/breadcrumb_type.rb#10
Bugsnag::BreadcrumbType::REQUEST = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/breadcrumb_type.rb#11
Bugsnag::BreadcrumbType::STATE = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/breadcrumb_type.rb#12
Bugsnag::BreadcrumbType::USER = T.let(T.unsafe(nil), String)

module Bugsnag::Breadcrumbs; end

class Bugsnag::Breadcrumbs::Breadcrumb
  # Creates a breadcrumb
  #
  # This will not have been validated, which must occur before this is attached to a report
  #
  # @api private
  # @param name [String] the breadcrumb name
  # @param type [String] the breadcrumb type from Bugsnag::BreadcrumbType
  # @param meta_data [Hash, nil] a hash containing strings, numbers, or booleans, or nil
  # @param auto [Symbol] set to `:auto` if the breadcrumb is automatically generated
  # @return [Breadcrumb] a new instance of Breadcrumb
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#31
  def initialize(name, type, meta_data, auto); end

  # @return [Boolean] set to `true` if the breadcrumb was automatically generated
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#15
  def auto; end

  # Flags the breadcrumb to be ignored
  #
  # Ignored breadcrumbs will not be attached to a report
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#48
  def ignore!; end

  # Checks if the `ignore!` method has been called
  #
  # Ignored breadcrumbs will not be attached to a report
  #
  # @return [True] if `ignore!` has been called
  # @return [nil] if `ignore` has not been called
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#59
  def ignore?; end

  # The breadcrumb message
  #
  # @return [String]
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#86
  def message; end

  # @param message [String]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#92
  def message=(message); end

  # @deprecated Use {#metadata} instead
  # @return [Hash, nil] metadata hash containing strings, numbers, or booleans, or nil
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#12
  def meta_data; end

  # @deprecated Use {#metadata} instead
  # @return [Hash, nil] metadata hash containing strings, numbers, or booleans, or nil
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#12
  def meta_data=(_arg0); end

  # A Hash containing arbitrary metadata associated with this breadcrumb
  #
  # @return [Hash, nil]
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#99
  def metadata; end

  # @param metadata [Hash, nil]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#105
  def metadata=(metadata); end

  # @deprecated Use {#message} instead
  # @return [String] the breadcrumb name
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#5
  def name; end

  # @deprecated Use {#message} instead
  # @return [String] the breadcrumb name
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#5
  def name=(_arg0); end

  # @return [Time] a Time object referring to breadcrumb creation time
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#18
  def timestamp; end

  # Outputs the breadcrumb data in a formatted hash
  #
  # These adhere to the breadcrumb format as defined in the Bugsnag error reporting API
  #
  # @return [Hash] Hash representation of the breadcrumb
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#69
  def to_h; end

  # @return [String] the breadcrumb type
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#8
  def type; end

  # @return [String] the breadcrumb type
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumb.rb#8
  def type=(_arg0); end
end

# source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumbs.rb#4
Bugsnag::Breadcrumbs::ERROR_BREADCRUMB_TYPE = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumbs.rb#9
Bugsnag::Breadcrumbs::LOG_BREADCRUMB_TYPE = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumbs.rb#5
Bugsnag::Breadcrumbs::MANUAL_BREADCRUMB_TYPE = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumbs.rb#6
Bugsnag::Breadcrumbs::NAVIGATION_BREADCRUMB_TYPE = T.let(T.unsafe(nil), String)

class Bugsnag::Breadcrumbs::OnBreadcrumbCallbackList
  # @return [OnBreadcrumbCallbackList] a new instance of OnBreadcrumbCallbackList
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/on_breadcrumb_callback_list.rb#5
  def initialize(configuration); end

  # @param callback [Proc, Method, #call]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/on_breadcrumb_callback_list.rb#14
  def add(callback); end

  # @param breadcrumb [Breadcrumb]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/on_breadcrumb_callback_list.rb#32
  def call(breadcrumb); end

  # @param callback [Proc, Method, #call]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/on_breadcrumb_callback_list.rb#23
  def remove(callback); end
end

# source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumbs.rb#8
Bugsnag::Breadcrumbs::PROCESS_BREADCRUMB_TYPE = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumbs.rb#7
Bugsnag::Breadcrumbs::REQUEST_BREADCRUMB_TYPE = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumbs.rb#11
Bugsnag::Breadcrumbs::STATE_BREADCRUMB_TYPE = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumbs.rb#10
Bugsnag::Breadcrumbs::USER_BREADCRUMB_TYPE = T.let(T.unsafe(nil), String)

# @deprecated Use {Bugsnag::BreadcrumbType} instead
#
# source://bugsnag//lib/bugsnag/breadcrumbs/breadcrumbs.rb#3
Bugsnag::Breadcrumbs::VALID_BREADCRUMB_TYPES = T.let(T.unsafe(nil), Array)

# Validates a given breadcrumb before it is stored
class Bugsnag::Breadcrumbs::Validator
  # @param configuration [Bugsnag::Configuration] The current configuration
  # @return [Validator] a new instance of Validator
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/validator.rb#9
  def initialize(configuration); end

  # Validates a given breadcrumb.
  #
  # @param breadcrumb [Bugsnag::Breadcrumbs::Breadcrumb] the breadcrumb to be validated
  #
  # source://bugsnag//lib/bugsnag/breadcrumbs/validator.rb#17
  def validate(breadcrumb); end
end

# @api private
class Bugsnag::Cleaner
  # @api private
  # @param configuration [Configuration]
  # @return [Cleaner] a new instance of Cleaner
  #
  # source://bugsnag//lib/bugsnag/cleaner.rb#14
  def initialize(configuration); end

  # @api private
  #
  # source://bugsnag//lib/bugsnag/cleaner.rb#18
  def clean_object(object); end

  # @api private
  # @param url [String]
  # @return [String]
  #
  # source://bugsnag//lib/bugsnag/cleaner.rb#27
  def clean_url(url); end

  # @api private
  # @param key [String, #to_s]
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/cleaner.rb#49
  def filters_match?(key); end

  private

  # @api private
  #
  # source://bugsnag//lib/bugsnag/cleaner.rb#91
  def clean_string(str); end

  # This method calculates whether we need to filter deeply or not; i.e. whether
  # we should match both with and without 'request.params'
  #
  # This is cached on the instance variable '@deep_filters' for performance
  # reasons
  #
  # @api private
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/cleaner.rb#83
  def deep_filters?; end

  # If someone has a Rails filter like /^stuff\.secret/, it won't match
  # "request.params.stuff.secret", so we try it both with and without the
  # "request.params." bit.
  #
  # @api private
  # @param key [String, #to_s]
  # @param scope [String]
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/cleaner.rb#177
  def filters_match_deeply?(key, scope); end

  # Should the given scope be filtered?
  #
  # @api private
  # @param scope [String]
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/cleaner.rb#199
  def scope_should_be_filtered?(scope); end

  # @api private
  #
  # source://bugsnag//lib/bugsnag/cleaner.rb#105
  def traverse_object(obj, seen, scope); end
end

# @api private
#
# source://bugsnag//lib/bugsnag/cleaner.rb#6
Bugsnag::Cleaner::FILTERED = T.let(T.unsafe(nil), String)

# @api private
#
# source://bugsnag//lib/bugsnag/cleaner.rb#8
Bugsnag::Cleaner::OBJECT = T.let(T.unsafe(nil), String)

# @api private
#
# source://bugsnag//lib/bugsnag/cleaner.rb#10
Bugsnag::Cleaner::OBJECT_WITH_ID_AND_CLASS = T.let(T.unsafe(nil), String)

# @api private
#
# source://bugsnag//lib/bugsnag/cleaner.rb#9
Bugsnag::Cleaner::RAISED = T.let(T.unsafe(nil), String)

# @api private
#
# source://bugsnag//lib/bugsnag/cleaner.rb#7
Bugsnag::Cleaner::RECURSION = T.let(T.unsafe(nil), String)

# @api private
class Bugsnag::CodeExtractor
  # @api private
  # @param configuration [Configuration]
  # @return [CodeExtractor] a new instance of CodeExtractor
  #
  # source://bugsnag//lib/bugsnag/code_extractor.rb#8
  def initialize(configuration); end

  # Add a file and its corresponding trace hash to be processed.
  #
  # @api private
  # @param path [String] The full path to the file
  # @param trace [Hash]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/code_extractor.rb#19
  def add_file(path, trace); end

  # Add the code to the hashes that were given in {#add_file} by modifying
  # them in-place. They will have a new ':code' key containing a hash of line
  # number => string of code for that line
  #
  # @api private
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/code_extractor.rb#46
  def extract!; end

  private

  # @api private
  # @param code [Hash{Integer => String}]
  # @param traces [Array<Hash>]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/code_extractor.rb#100
  def associate_code_with_trace(code, traces); end

  # @api private
  # @param path [String]
  # @param traces [Array<Hash>]
  # @param line_numbers [Set<Integer>]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/code_extractor.rb#78
  def extract_from(path, traces, line_numbers); end

  # @api private
  # @param code [Hash{Integer => String}]
  # @param line_number [Integer]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/code_extractor.rb#124
  def trim_excess_lines(code, line_number); end
end

# @api private
#
# source://bugsnag//lib/bugsnag/code_extractor.rb#4
Bugsnag::CodeExtractor::MAXIMUM_LINES_TO_KEEP = T.let(T.unsafe(nil), Integer)

class Bugsnag::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#216
  def initialize; end

  # Add values to metadata
  #
  # @overload add_metadata
  # @overload add_metadata
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#642
  def add_metadata(section, key_or_data, *args); end

  # Add the given callback to the list of on_breadcrumb callbacks
  #
  # The on_breadcrumb callbacks will be called when a breadcrumb is left and
  # are passed the {Breadcrumbs::Breadcrumb Breadcrumb} object
  #
  # Returning false from an on_breadcrumb callback will cause the breadcrumb
  # to be ignored and will prevent any remaining callbacks from being called
  #
  # @param callback [Proc, Method, #call]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#610
  def add_on_breadcrumb(callback); end

  # Add the given callback to the list of on_error callbacks
  #
  # The on_error callbacks will be called when an error is captured or reported
  # and are passed a {Bugsnag::Report} object
  #
  # Returning false from an on_error callback will cause the error to be ignored
  # and will prevent any remaining callbacks from being called
  #
  # @param callback [Proc, Method, #call]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#583
  def add_on_error(callback); end

  # Your Integration API Key
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#23
  def api_key; end

  # Your Integration API Key
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#23
  def api_key=(_arg0); end

  # Get the type of application executing the current code
  #
  # This is usually used to represent if you are running in a Rails server,
  # Sidekiq job, Rake task etc... Bugsnag will automatically detect most
  # application types for you
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#335
  def app_type; end

  # Set the type of application executing the current code
  #
  # If an app_type is set, this will be used instead of the automatically
  # detected app_type that Bugsnag would otherwise use
  #
  # @param app_type [String]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#347
  def app_type=(app_type); end

  # The current version of your application
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#55
  def app_version; end

  # The current version of your application
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#55
  def app_version=(_arg0); end

  # Whether Bugsnag should automatically record sessions
  #
  # @deprecated Use {#auto_track_sessions} instead
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#124
  def auto_capture_sessions; end

  # Whether Bugsnag should automatically record sessions
  #
  # @deprecated Use {#auto_track_sessions} instead
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#124
  def auto_capture_sessions=(_arg0); end

  # Whether notifications should automatically be sent
  #
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#36
  def auto_notify; end

  # Whether notifications should automatically be sent
  #
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#36
  def auto_notify=(_arg0); end

  # Whether sessions should be tracked automatically
  #
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#714
  def auto_track_sessions; end

  # @param track_sessions [Boolean]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#720
  def auto_track_sessions=(track_sessions); end

  # Callables to be run before a breadcrumb is logged
  #
  # @return [Array<#call>]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#152
  def before_breadcrumb_callbacks; end

  # Callables to be run before a breadcrumb is logged
  #
  # @return [Array<#call>]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#152
  def before_breadcrumb_callbacks=(_arg0); end

  # Returns the current list of breadcrumbs
  #
  # This is a per-thread circular buffer, containing at most 'max_breadcrumbs'
  # breadcrumbs
  #
  # @return [Bugsnag::Utility::CircularBuffer]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#490
  def breadcrumbs; end

  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#39
  def ca_file; end

  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#39
  def ca_file=(_arg0); end

  # Clear values from metadata
  #
  # @overload clear_metadata
  # @overload clear_metadata
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#661
  def clear_metadata(section, *args); end

  # Clears the array of data attached to every error notification.
  #
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#424
  def clear_request_data; end

  # The default context for all future events
  # Setting this will disable automatic context setting
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#174
  def context; end

  # The default context for all future events
  # Setting this will disable automatic context setting
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#174
  def context=(_arg0); end

  # Has the context been explicitly set?
  #
  # This is necessary to differentiate between the context not being set and
  # the context being set to 'nil' explicitly
  #
  # @api private
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#675
  def context_set?; end

  # Logs a debug level message
  #
  # @param message [String, #to_s] The message to log
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#456
  def debug(message); end

  # Used to set a new default delivery method that will be used if one is not
  # set with #delivery_method.
  #
  # @api private
  # @param delivery_method [Symbol]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#323
  def default_delivery_method=(delivery_method); end

  # Gets the delivery_method that Bugsnag will use to communicate with the
  # notification endpoint.
  #
  # @return [Symbol]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#299
  def delivery_method; end

  # Sets the delivery_method that Bugsnag will use to communicate with the
  # notification endpoint.
  #
  # The default delivery methods are ':thread_queue' and ':synchronous'.
  #
  # @param delivery_method [Symbol]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#311
  def delivery_method=(delivery_method); end

  # Get the detected app_type, which is used when one isn't set explicitly
  #
  # @api private
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#357
  def detected_app_type; end

  # Set the detected app_type, which is used when one isn't set explicitly
  #
  # This allows Bugsnag's integrations to say 'this is a Rails app' while
  # allowing the user to overwrite this if they wish
  #
  # @api private
  # @param app_type [String]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#371
  def detected_app_type=(app_type); end

  # Disables session tracking and delivery. Cannot be undone
  #
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#567
  def disable_sessions; end

  # Exception classes that will be discarded and not sent to Bugsnag
  #
  # @return [Set<String, Regexp>]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#119
  def discard_classes; end

  # Exception classes that will be discarded and not sent to Bugsnag
  #
  # @return [Set<String, Regexp>]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#119
  def discard_classes=(_arg0); end

  # Whether events will be delivered
  #
  # @api private
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#137
  def enable_events; end

  # Whether sessions will be delivered
  #
  # @api private
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#142
  def enable_sessions; end

  # A list of strings indicating allowable automatic breadcrumb types
  #
  # @deprecated Use {#enabled_breadcrumb_types} instead
  # @return [Array<String>]
  # @see Bugsnag::BreadcrumbType
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#148
  def enabled_automatic_breadcrumb_types; end

  # A list of strings indicating allowable automatic breadcrumb types
  #
  # @deprecated Use {#enabled_breadcrumb_types} instead
  # @return [Array<String>]
  # @see Bugsnag::BreadcrumbType
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#148
  def enabled_automatic_breadcrumb_types=(_arg0); end

  # A list of breadcrumb types that Bugsnag will collect automatically
  #
  # @return [Array<String>]
  # @see Bugsnag::BreadcrumbType
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#701
  def enabled_breadcrumb_types; end

  # @param breadcrumb_types [Array<String>]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#707
  def enabled_breadcrumb_types=(breadcrumb_types); end

  # A list of which release stages should cause notifications to be sent
  #
  # @return [Array<String>, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#687
  def enabled_release_stages; end

  # @param release_stages [Array<String>, nil]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#693
  def enabled_release_stages=(release_stages); end

  # The URL error notifications will be delivered to
  #
  # @deprecated Use {#endpoints} instead
  # @return [String]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#498
  def endpoint; end

  # Sets the notification endpoint
  #
  # @deprecated Use {#endpoints} instead
  # @param new_notify_endpoint [String] The URL to deliver error notifications to
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#510
  def endpoint=(new_notify_endpoint); end

  # The URLs to send events and sessions to
  #
  # @return [EndpointConfiguration]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#132
  def endpoints; end

  # source://bugsnag//lib/bugsnag/configuration.rb#546
  def endpoints=(endpoint_configuration); end

  # Logs an error level message
  #
  # @param message [String, #to_s] The message to log
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#448
  def error(message); end

  # The name or descriptor of the Ruby server host
  #
  # @return [String]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#111
  def hostname; end

  # The name or descriptor of the Ruby server host
  #
  # @return [String]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#111
  def hostname=(_arg0); end

  # @deprecated Use {#discard_classes} instead
  # @return [Set<Class, Proc>]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#128
  def ignore_classes; end

  # @deprecated Use {#discard_classes} instead
  # @return [Set<Class, Proc>]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#128
  def ignore_classes=(_arg0); end

  # Logs an info level message
  #
  # @param message [String, #to_s] The message to log
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#432
  def info(message); end

  # @api private
  # @return [MiddlewareStack]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#83
  def internal_middleware; end

  # @api private
  # @return [MiddlewareStack]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#83
  def internal_middleware=(_arg0); end

  # The logger to use for Bugsnag log messages
  #
  # @return [Logger]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#75
  def logger; end

  # The logger to use for Bugsnag log messages
  #
  # @return [Logger]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#75
  def logger=(_arg0); end

  # The maximum allowable amount of breadcrumbs per thread
  #
  # @return [Integer]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#156
  def max_breadcrumbs; end

  # Sets the maximum allowable amount of breadcrumbs
  #
  # @param new_max_breadcrumbs [Integer] the new maximum breadcrumb limit
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#478
  def max_breadcrumbs=(new_max_breadcrumbs); end

  # A list of keys that should be filtered out from the report and breadcrumb
  # metadata before sending them to Bugsnag
  #
  # @deprecated Use {#redacted_keys} instead
  # @return [Set<String, Regexp>]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#61
  def meta_data_filters; end

  # A list of keys that should be filtered out from the report and breadcrumb
  # metadata before sending them to Bugsnag
  #
  # @deprecated Use {#redacted_keys} instead
  # @return [Set<String, Regexp>]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#61
  def meta_data_filters=(_arg0); end

  # Global metadata added to every event
  #
  # @return [Hash]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#178
  def metadata; end

  # The middleware stack that will run on every notification
  #
  # @return [MiddlewareStack]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#79
  def middleware; end

  # The middleware stack that will run on every notification
  #
  # @return [MiddlewareStack]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#79
  def middleware=(_arg0); end

  # The URL error notifications will be delivered to
  #
  # @deprecated Use {#endpoints} instead
  # @return [String]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#498
  def notify_endpoint; end

  # A list of which release stages should cause notifications to be sent
  #
  # @deprecated Use {#enabled_release_stages} instead
  # @return [Array<String>, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#32
  def notify_release_stages; end

  # A list of which release stages should cause notifications to be sent
  #
  # @deprecated Use {#enabled_release_stages} instead
  # @return [Array<String>, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#32
  def notify_release_stages=(_arg0); end

  # Expose on_breadcrumb_callbacks internally for Bugsnag.leave_breadcrumb
  #
  # @api private
  # @return [Breadcrumbs::OnBreadcrumbCallbackList]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#187
  def on_breadcrumb_callbacks; end

  # Parses and sets proxy from a uri
  #
  # @param uri [String, #to_s] The URI to parse and extract proxy details from
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#465
  def parse_proxy(uri); end

  # Any stacktrace lines that match this path will be marked as 'in project'
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#51
  def project_root; end

  # Any stacktrace lines that match this path will be marked as 'in project'
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#51
  def project_root=(_arg0); end

  # The host address of the HTTP proxy that should be used when making requests
  #
  # @return [String, nil]
  # @see parse_proxy
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#88
  def proxy_host; end

  # The host address of the HTTP proxy that should be used when making requests
  #
  # @return [String, nil]
  # @see parse_proxy
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#88
  def proxy_host=(_arg0); end

  # The password for the user that should be used when making requests via a HTTP proxy
  #
  # @return [String, nil]
  # @see parse_proxy
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#103
  def proxy_password; end

  # The password for the user that should be used when making requests via a HTTP proxy
  #
  # @return [String, nil]
  # @see parse_proxy
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#103
  def proxy_password=(_arg0); end

  # The port number of the HTTP proxy that should be used when making requests
  #
  # @return [Integer, nil]
  # @see parse_proxy
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#93
  def proxy_port; end

  # The port number of the HTTP proxy that should be used when making requests
  #
  # @return [Integer, nil]
  # @see parse_proxy
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#93
  def proxy_port=(_arg0); end

  # The user that should be used when making requests via a HTTP proxy
  #
  # @return [String, nil]
  # @see parse_proxy
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#98
  def proxy_user; end

  # The user that should be used when making requests via a HTTP proxy
  #
  # @return [String, nil]
  # @see parse_proxy
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#98
  def proxy_user=(_arg0); end

  # A set of keys that should be redacted from the report and breadcrumb
  # metadata before sending them to Bugsnag
  #
  # When adding strings, keys that are equal to the string (ignoring case)
  # will be redacted. When adding regular expressions, any keys which match
  # the regular expression will be redacted
  #
  # @return [Set<String, Regexp>]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#71
  def redacted_keys; end

  # A set of keys that should be redacted from the report and breadcrumb
  # metadata before sending them to Bugsnag
  #
  # When adding strings, keys that are equal to the string (ignoring case)
  # will be redacted. When adding regular expressions, any keys which match
  # the regular expression will be redacted
  #
  # @return [Set<String, Regexp>]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#71
  def redacted_keys=(_arg0); end

  # The current stage of the release process, e.g. 'development', production'
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#27
  def release_stage; end

  # The current stage of the release process, e.g. 'development', production'
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#27
  def release_stage=(_arg0); end

  # Remove the given callback from the list of on_breadcrumb callbacks
  #
  # Note that this must be the same instance that was passed to
  # {add_on_breadcrumb}, otherwise it will not be removed
  #
  # @param callback [Proc, Method, #call]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#622
  def remove_on_breadcrumb(callback); end

  # Remove the given callback from the list of on_error callbacks
  #
  # Note that this must be the same instance that was passed to
  # {#add_on_error}, otherwise it will not be removed
  #
  # @param callback [Proc, Method, #call]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#595
  def remove_on_error(callback); end

  # Returns the array of data that will be automatically attached to every
  # error notification.
  #
  # @return [Hash]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#397
  def request_data; end

  # @api private
  # @return [Hash{String => String}]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#115
  def runtime_versions; end

  # @api private
  # @return [Hash{String => String}]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#115
  def runtime_versions=(_arg0); end

  # @api private
  # @return [Array<String>]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#182
  def scopes_to_filter; end

  # Whether code snippets from the exception stacktrace should be sent with notifications
  #
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#47
  def send_code; end

  # Whether code snippets from the exception stacktrace should be sent with notifications
  #
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#47
  def send_code=(_arg0); end

  # Whether to automatically attach the Rack environment to notifications
  #
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#43
  def send_environment; end

  # Whether to automatically attach the Rack environment to notifications
  #
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#43
  def send_environment=(_arg0); end

  # The URL session notifications will be delivered to
  #
  # @deprecated Use {#endpoints} instead
  # @return [String]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#519
  def session_endpoint; end

  # Sets the sessions endpoint
  #
  # @deprecated Use {#endpoints} instead
  # @param new_session_endpoint [String] The URL to deliver session notifications to
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#530
  def session_endpoint=(new_session_endpoint); end

  # Sets the notification and session endpoints
  #
  # @deprecated Use {#endpoints} instead
  # @param new_notify_endpoint [String] The URL to deliver error notifications to
  # @param new_session_endpoint [String] The URL to deliver session notifications to
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#542
  def set_endpoints(new_notify_endpoint, new_session_endpoint); end

  # Sets an entry in the array of data attached to every error notification.
  #
  # @param key [String, #to_s]
  # @param value [Object]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#407
  def set_request_data(key, value); end

  # Indicates whether the notifier should send a notification based on the
  # configured release stage.
  #
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#380
  def should_notify_release_stage?; end

  # The HTTP request timeout, defaults to 15 seconds
  #
  # @return [Integer]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#107
  def timeout; end

  # The HTTP request timeout, defaults to 15 seconds
  #
  # @return [Integer]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#107
  def timeout=(_arg0); end

  # Whether Bugsnag should automatically record sessions
  #
  # @deprecated Use {#auto_track_sessions} instead
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#124
  def track_sessions; end

  # Whether Bugsnag should automatically record sessions
  #
  # @deprecated Use {#auto_track_sessions} instead
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#124
  def track_sessions=(_arg0); end

  # Unsets an entry in the array of data attached to every error notification.
  #
  # @param key [String, #to_s]
  # @param value [Object]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#416
  def unset_request_data(key, value); end

  # Tests whether the configured API key is valid.
  #
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#388
  def valid_api_key?; end

  # @deprecated Use {vendor_paths} instead
  # @return [Regexp]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#160
  def vendor_path; end

  # @deprecated Use {vendor_paths} instead
  # @return [Regexp]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#160
  def vendor_path=(_arg0); end

  # An array of paths within the {project_root} that should not be considered
  # as "in project"
  #
  # These paths should be relative to the {project_root} and will only match
  # whole directory names
  #
  # @return [Array<String>]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#169
  def vendor_paths; end

  # An array of paths within the {project_root} that should not be considered
  # as "in project"
  #
  # These paths should be relative to the {project_root} and will only match
  # whole directory names
  #
  # @return [Array<String>]
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#169
  def vendor_paths=(_arg0); end

  # Logs a warning level message
  #
  # @param message [String, #to_s] The message to log
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#440
  def warn(message); end

  private

  # source://bugsnag//lib/bugsnag/configuration.rb#730
  def default_hostname; end

  # Sets the attribute scopes_to_filter
  #
  # @param value the value to set the attribute scopes_to_filter to.
  #
  # source://bugsnag//lib/bugsnag/configuration.rb#726
  def scopes_to_filter=(_arg0); end
end

# source://bugsnag//lib/bugsnag/configuration.rb#189
Bugsnag::Configuration::API_KEY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://bugsnag//lib/bugsnag/configuration.rb#194
Bugsnag::Configuration::DEFAULT_ENDPOINT = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/configuration.rb#205
Bugsnag::Configuration::DEFAULT_MAX_BREADCRUMBS = T.let(T.unsafe(nil), Integer)

# source://bugsnag//lib/bugsnag/configuration.rb#196
Bugsnag::Configuration::DEFAULT_META_DATA_FILTERS = T.let(T.unsafe(nil), Array)

# source://bugsnag//lib/bugsnag/configuration.rb#192
Bugsnag::Configuration::DEFAULT_NOTIFY_ENDPOINT = T.let(T.unsafe(nil), String)

# @api private
#
# source://bugsnag//lib/bugsnag/configuration.rb#211
Bugsnag::Configuration::DEFAULT_SCOPES_TO_FILTER = T.let(T.unsafe(nil), Array)

# source://bugsnag//lib/bugsnag/configuration.rb#193
Bugsnag::Configuration::DEFAULT_SESSION_ENDPOINT = T.let(T.unsafe(nil), String)

# Path to vendored code. Used to mark file paths as out of project.
#
# source://bugsnag//lib/bugsnag/configuration.rb#208
Bugsnag::Configuration::DEFAULT_VENDOR_PATH = T.let(T.unsafe(nil), Regexp)

# source://bugsnag//lib/bugsnag/configuration.rb#728
Bugsnag::Configuration::PROG_NAME = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/configuration.rb#190
Bugsnag::Configuration::THREAD_LOCAL_NAME = T.let(T.unsafe(nil), String)

module Bugsnag::Delivery
  class << self
    # Reference a delivery method by name
    #
    # source://bugsnag//lib/bugsnag/delivery.rb#21
    def [](name); end

    # Add a delivery method to the list of supported methods. Any registered
    # method can then be used by name in Configuration.
    #
    # ```
    # require 'bugsnag'
    # Bugsnag::Delivery.register(:my_delivery_queue, MyDeliveryQueue)
    # Bugsnag.configure do |config|
    #   config.delivery_method = :my_delivery_queue
    # end
    # ```
    #
    # source://bugsnag//lib/bugsnag/delivery.rb#15
    def register(name, delivery_method); end

    private

    # source://bugsnag//lib/bugsnag/delivery.rb#26
    def delivery_methods; end
  end
end

class Bugsnag::Delivery::Synchronous
  class << self
    # Attempts to deliver a payload to the given endpoint synchronously.
    #
    # source://bugsnag//lib/bugsnag/delivery/synchronous.rb#10
    def deliver(url, body, configuration, options = T.unsafe(nil)); end

    private

    # source://bugsnag//lib/bugsnag/delivery/synchronous.rb#58
    def default_headers; end

    # source://bugsnag//lib/bugsnag/delivery/synchronous.rb#54
    def path(uri); end

    # source://bugsnag//lib/bugsnag/delivery/synchronous.rb#28
    def request(url, body, configuration, options); end
  end
end

class Bugsnag::Delivery::ThreadQueue < ::Bugsnag::Delivery::Synchronous
  class << self
    # Queues a given payload to be delivered asynchronously
    #
    # @param url [String]
    # @param get_payload [Proc] A Proc that will return the payload.
    # @param configuration [Bugsnag::Configuration]
    # @param options [Hash]
    # @return [void]
    #
    # source://bugsnag//lib/bugsnag/delivery/thread_queue.rb#19
    def serialize_and_deliver(url, get_payload, configuration, options = T.unsafe(nil)); end

    private

    # source://bugsnag//lib/bugsnag/delivery/thread_queue.rb#44
    def start_once!; end
  end
end

# source://bugsnag//lib/bugsnag/delivery/thread_queue.rb#6
Bugsnag::Delivery::ThreadQueue::MAX_OUTSTANDING_REQUESTS = T.let(T.unsafe(nil), Integer)

# source://bugsnag//lib/bugsnag/delivery/thread_queue.rb#8
Bugsnag::Delivery::ThreadQueue::MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

# source://bugsnag//lib/bugsnag/delivery/thread_queue.rb#7
Bugsnag::Delivery::ThreadQueue::STOP = T.let(T.unsafe(nil), Object)

class Bugsnag::EndpointConfiguration
  # @return [EndpointConfiguration] a new instance of EndpointConfiguration
  #
  # source://bugsnag//lib/bugsnag/endpoint_configuration.rb#6
  def initialize(notify, sessions); end

  # Returns the value of attribute notify.
  #
  # source://bugsnag//lib/bugsnag/endpoint_configuration.rb#3
  def notify; end

  # Returns the value of attribute sessions.
  #
  # source://bugsnag//lib/bugsnag/endpoint_configuration.rb#4
  def sessions; end
end

# @api private
class Bugsnag::EndpointValidator
  class << self
    # @api private
    #
    # source://bugsnag//lib/bugsnag/endpoint_validator.rb#4
    def validate(endpoints); end
  end
end

# @api private
class Bugsnag::EndpointValidator::Result
  # @api private
  # @return [Result] a new instance of Result
  #
  # source://bugsnag//lib/bugsnag/endpoint_validator.rb#35
  def initialize(valid, keep_events_enabled_for_backwards_compatibility = T.unsafe(nil), reason = T.unsafe(nil)); end

  # @api private
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/endpoint_validator.rb#45
  def keep_events_enabled_for_backwards_compatibility?; end

  # @api private
  #
  # source://bugsnag//lib/bugsnag/endpoint_validator.rb#33
  def reason; end

  # @api private
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/endpoint_validator.rb#41
  def valid?; end

  class << self
    # @api private
    #
    # source://bugsnag//lib/bugsnag/endpoint_validator.rb#71
    def invalid_notify; end

    # @api private
    #
    # source://bugsnag//lib/bugsnag/endpoint_validator.rb#75
    def invalid_session; end

    # @api private
    #
    # source://bugsnag//lib/bugsnag/endpoint_validator.rb#67
    def invalid_urls; end

    # @api private
    #
    # source://bugsnag//lib/bugsnag/endpoint_validator.rb#59
    def missing_notify; end

    # @api private
    #
    # source://bugsnag//lib/bugsnag/endpoint_validator.rb#63
    def missing_session; end

    # @api private
    #
    # source://bugsnag//lib/bugsnag/endpoint_validator.rb#55
    def missing_urls; end

    # factory functions
    #
    # @api private
    #
    # source://bugsnag//lib/bugsnag/endpoint_validator.rb#51
    def valid; end
  end
end

# @api private
#
# source://bugsnag//lib/bugsnag/endpoint_validator.rb#29
Bugsnag::EndpointValidator::Result::INVALID_NOTIFY_URL = T.let(T.unsafe(nil), String)

# @api private
#
# source://bugsnag//lib/bugsnag/endpoint_validator.rb#30
Bugsnag::EndpointValidator::Result::INVALID_SESSION_URL = T.let(T.unsafe(nil), String)

# @api private
#
# source://bugsnag//lib/bugsnag/endpoint_validator.rb#28
Bugsnag::EndpointValidator::Result::INVALID_URLS = T.let(T.unsafe(nil), String)

# @api private
#
# source://bugsnag//lib/bugsnag/endpoint_validator.rb#25
Bugsnag::EndpointValidator::Result::MISSING_NOTIFY_URL = T.let(T.unsafe(nil), String)

# @api private
#
# source://bugsnag//lib/bugsnag/endpoint_validator.rb#26
Bugsnag::EndpointValidator::Result::MISSING_SESSION_URL = T.let(T.unsafe(nil), String)

# @api private
#
# source://bugsnag//lib/bugsnag/endpoint_validator.rb#24
Bugsnag::EndpointValidator::Result::MISSING_URLS = T.let(T.unsafe(nil), String)

class Bugsnag::Error
  # @return [Error] a new instance of Error
  #
  # source://bugsnag//lib/bugsnag/error.rb#18
  def initialize(error_class, error_message, stacktrace); end

  # @return [String] the error's class name
  #
  # source://bugsnag//lib/bugsnag/error.rb#4
  def error_class; end

  # @return [String] the error's class name
  #
  # source://bugsnag//lib/bugsnag/error.rb#4
  def error_class=(_arg0); end

  # @return [String] the error's message
  #
  # source://bugsnag//lib/bugsnag/error.rb#7
  def error_message; end

  # @return [String] the error's message
  #
  # source://bugsnag//lib/bugsnag/error.rb#7
  def error_message=(_arg0); end

  # @return [Hash] the error's processed stacktrace
  #
  # source://bugsnag//lib/bugsnag/error.rb#10
  def stacktrace; end

  # @return [String] the type of error (always "ruby")
  #
  # source://bugsnag//lib/bugsnag/error.rb#13
  def type; end

  # @return [String] the type of error (always "ruby")
  #
  # source://bugsnag//lib/bugsnag/error.rb#13
  def type=(_arg0); end
end

# @api private
#
# source://bugsnag//lib/bugsnag/error.rb#16
Bugsnag::Error::TYPE = T.let(T.unsafe(nil), String)

# For now Event is just an alias of Report. This points to the same object so
# any changes to Report will also affect Event
#
# source://bugsnag//lib/bugsnag/event.rb#6
Bugsnag::Event = Bugsnag::Report

module Bugsnag::Helpers
  class << self
    # Merges r_hash into l_hash recursively, favouring the values in r_hash.
    #
    # Returns a new array consisting of the merged values
    #
    # source://bugsnag//lib/bugsnag/helpers.rb#46
    def deep_merge(l_hash, r_hash); end

    # Merges r_hash into l_hash recursively, favouring the values in r_hash.
    #
    # Overwrites the values in the existing l_hash
    #
    # source://bugsnag//lib/bugsnag/helpers.rb#62
    def deep_merge!(l_hash, r_hash); end

    # Wrapper for trimming stacktraces
    #
    # source://bugsnag//lib/bugsnag/helpers.rb#110
    def extract_exception(payload, &block); end

    # source://bugsnag//lib/bugsnag/helpers.rb#166
    def get_payload_length(value); end

    # Check if a value is a raw type which should not be trimmed, truncated
    # or converted to a string
    #
    # @return [Boolean]
    #
    # source://bugsnag//lib/bugsnag/helpers.rb#132
    def is_json_raw_type?(value); end

    # Validate that the serialized JSON string value is below maximum payload
    # length
    #
    # @return [Boolean]
    #
    # source://bugsnag//lib/bugsnag/helpers.rb#162
    def payload_too_long?(value); end

    # Remove `metaData` from array of `events` within object
    #
    # source://bugsnag//lib/bugsnag/helpers.rb#212
    def remove_metadata_from_events(object); end

    # If possible, convert the provided object to a string and trim to the
    # maximum allowed string length
    #
    # source://bugsnag//lib/bugsnag/helpers.rb#185
    def trim_as_string(text); end

    # Trim the size of value if the serialized JSON value is longer than is
    # accepted by Bugsnag
    #
    # source://bugsnag//lib/bugsnag/helpers.rb#17
    def trim_if_needed(value); end

    # Take the metadata from the events and trim it down
    #
    # source://bugsnag//lib/bugsnag/helpers.rb#120
    def trim_metadata(payload); end

    # Remove all code from stacktraces
    #
    # source://bugsnag//lib/bugsnag/helpers.rb#89
    def trim_stacktrace_code(payload); end

    # Truncate stacktraces
    #
    # source://bugsnag//lib/bugsnag/helpers.rb#100
    def trim_stacktrace_functions(payload); end

    # source://bugsnag//lib/bugsnag/helpers.rb#195
    def trim_strings_in_array(collection); end

    # source://bugsnag//lib/bugsnag/helpers.rb#174
    def trim_strings_in_hash(hash); end

    # Trim all strings to be less than the maximum allowed string length
    #
    # source://bugsnag//lib/bugsnag/helpers.rb#147
    def trim_strings_in_value(value); end

    # Shorten array until it fits within the payload size limit when serialized
    #
    # source://bugsnag//lib/bugsnag/helpers.rb#138
    def truncate_array(array); end

    # source://bugsnag//lib/bugsnag/helpers.rb#220
    def truncate_arrays_in_hash(hash); end

    # source://bugsnag//lib/bugsnag/helpers.rb#200
    def truncate_arrays_in_value(value); end

    # Truncate exception messages
    #
    # source://bugsnag//lib/bugsnag/helpers.rb#80
    def truncate_exception_messages(payload); end
  end
end

# source://bugsnag//lib/bugsnag/helpers.rb#10
Bugsnag::Helpers::MAX_ARRAY_LENGTH = T.let(T.unsafe(nil), Integer)

# source://bugsnag//lib/bugsnag/helpers.rb#9
Bugsnag::Helpers::MAX_PAYLOAD_LENGTH = T.let(T.unsafe(nil), Integer)

# source://bugsnag//lib/bugsnag/helpers.rb#8
Bugsnag::Helpers::MAX_STRING_LENGTH = T.let(T.unsafe(nil), Integer)

# source://bugsnag//lib/bugsnag/helpers.rb#11
Bugsnag::Helpers::MAX_TRIM_STACK_FRAMES = T.let(T.unsafe(nil), Integer)

# source://bugsnag//lib/bugsnag/helpers.rb#12
Bugsnag::Helpers::RAW_DATA_TYPES = T.let(T.unsafe(nil), Array)

# source://bugsnag//lib/bugsnag/helpers.rb#76
Bugsnag::Helpers::TRUNCATION_INFO = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag.rb#43
Bugsnag::INTEGRATIONS = T.let(T.unsafe(nil), Array)

# source://bugsnag//lib/bugsnag.rb#42
Bugsnag::LOCK = T.let(T.unsafe(nil), Thread::Mutex)

module Bugsnag::MetaData
  # Returns the value of attribute bugsnag_context.
  #
  # source://bugsnag//lib/bugsnag/meta_data.rb#5
  def bugsnag_context; end

  # Sets the attribute bugsnag_context
  #
  # @param value the value to set the attribute bugsnag_context to.
  #
  # source://bugsnag//lib/bugsnag/meta_data.rb#5
  def bugsnag_context=(_arg0); end

  # Returns the value of attribute bugsnag_grouping_hash.
  #
  # source://bugsnag//lib/bugsnag/meta_data.rb#6
  def bugsnag_grouping_hash; end

  # Sets the attribute bugsnag_grouping_hash
  #
  # @param value the value to set the attribute bugsnag_grouping_hash to.
  #
  # source://bugsnag//lib/bugsnag/meta_data.rb#6
  def bugsnag_grouping_hash=(_arg0); end

  # Returns the value of attribute bugsnag_meta_data.
  #
  # source://bugsnag//lib/bugsnag/meta_data.rb#3
  def bugsnag_meta_data; end

  # Sets the attribute bugsnag_meta_data
  #
  # @param value the value to set the attribute bugsnag_meta_data to.
  #
  # source://bugsnag//lib/bugsnag/meta_data.rb#3
  def bugsnag_meta_data=(_arg0); end

  # Returns the value of attribute bugsnag_user_id.
  #
  # source://bugsnag//lib/bugsnag/meta_data.rb#4
  def bugsnag_user_id; end

  # Sets the attribute bugsnag_user_id
  #
  # @param value the value to set the attribute bugsnag_user_id to.
  #
  # source://bugsnag//lib/bugsnag/meta_data.rb#4
  def bugsnag_user_id=(_arg0); end
end

module Bugsnag::Middleware; end

# Adds breadcrumbs to the report
class Bugsnag::Middleware::Breadcrumbs
  # @param next_callable [#call] the next callable middleware
  # @return [Breadcrumbs] a new instance of Breadcrumbs
  #
  # source://bugsnag//lib/bugsnag/middleware/breadcrumbs.rb#7
  def initialize(next_callable); end

  # Execute this middleware
  #
  # @param report [Bugsnag::Report] the report being iterated over
  #
  # source://bugsnag//lib/bugsnag/middleware/breadcrumbs.rb#15
  def call(report); end
end

# Calls all configured callbacks passing an error report
class Bugsnag::Middleware::Callbacks
  # @return [Callbacks] a new instance of Callbacks
  #
  # source://bugsnag//lib/bugsnag/middleware/callbacks.rb#5
  def initialize(bugsnag); end

  # source://bugsnag//lib/bugsnag/middleware/callbacks.rb#9
  def call(report); end
end

# Sets the severity to info for low-importance errors
class Bugsnag::Middleware::ClassifyError
  # @return [ClassifyError] a new instance of ClassifyError
  #
  # source://bugsnag//lib/bugsnag/middleware/classify_error.rb#20
  def initialize(bugsnag); end

  # source://bugsnag//lib/bugsnag/middleware/classify_error.rb#24
  def call(report); end
end

# source://bugsnag//lib/bugsnag/middleware/classify_error.rb#5
Bugsnag::Middleware::ClassifyError::INFO_CLASSES = T.let(T.unsafe(nil), Array)

# Extracts and appends clearance user information
class Bugsnag::Middleware::ClearanceUser
  # @return [ClearanceUser] a new instance of ClearanceUser
  #
  # source://bugsnag//lib/bugsnag/middleware/clearance_user.rb#7
  def initialize(bugsnag); end

  # source://bugsnag//lib/bugsnag/middleware/clearance_user.rb#11
  def call(report); end
end

# source://bugsnag//lib/bugsnag/middleware/clearance_user.rb#5
Bugsnag::Middleware::ClearanceUser::COMMON_USER_FIELDS = T.let(T.unsafe(nil), Array)

# Attaches delayed_job information to an error report
class Bugsnag::Middleware::DelayedJob
  # @return [DelayedJob] a new instance of DelayedJob
  #
  # source://bugsnag//lib/bugsnag/middleware/delayed_job.rb#10
  def initialize(bugsnag); end

  # source://bugsnag//lib/bugsnag/middleware/delayed_job.rb#14
  def call(report); end

  # source://bugsnag//lib/bugsnag/middleware/delayed_job.rb#49
  def construct_job_payload(payload); end

  private

  # source://bugsnag//lib/bugsnag/middleware/delayed_job.rb#83
  def get_context(payload_data, active_job_data); end
end

# Active Job's queue adapter sets the "display_name" to this format. This
# breaks the event context as the ID and arguments are included, which will
# differ between executions of the same job
#
# source://bugsnag//lib/bugsnag/middleware/delayed_job.rb#8
Bugsnag::Middleware::DelayedJob::ACTIVE_JOB_DISPLAY_NAME = T.let(T.unsafe(nil), Regexp)

# Determines if the exception should be ignored based on the configured
# `discard_classes`
class Bugsnag::Middleware::DiscardErrorClass
  # @param middleware [#call] The next middleware to call
  # @return [DiscardErrorClass] a new instance of DiscardErrorClass
  #
  # source://bugsnag//lib/bugsnag/middleware/discard_error_class.rb#8
  def initialize(middleware); end

  # @param report [Report]
  #
  # source://bugsnag//lib/bugsnag/middleware/discard_error_class.rb#14
  def call(report); end
end

# Extracts data from the exception.
class Bugsnag::Middleware::ExceptionMetaData
  # @return [ExceptionMetaData] a new instance of ExceptionMetaData
  #
  # source://bugsnag//lib/bugsnag/middleware/exception_meta_data.rb#5
  def initialize(bugsnag); end

  # source://bugsnag//lib/bugsnag/middleware/exception_meta_data.rb#9
  def call(report); end
end

# Determines if the exception should be ignored based on the configured
# `ignore_classes`
#
# @deprecated Use {DiscardErrorClass} instead
class Bugsnag::Middleware::IgnoreErrorClass
  # @return [IgnoreErrorClass] a new instance of IgnoreErrorClass
  #
  # source://bugsnag//lib/bugsnag/middleware/ignore_error_class.rb#8
  def initialize(bugsnag); end

  # source://bugsnag//lib/bugsnag/middleware/ignore_error_class.rb#12
  def call(report); end
end

# Extracts and attaches mailman data to an error report
class Bugsnag::Middleware::Mailman
  # @return [Mailman] a new instance of Mailman
  #
  # source://bugsnag//lib/bugsnag/middleware/mailman.rb#5
  def initialize(bugsnag); end

  # source://bugsnag//lib/bugsnag/middleware/mailman.rb#9
  def call(report); end
end

# Extracts and attaches rack data to an error report
class Bugsnag::Middleware::RackRequest
  # @return [RackRequest] a new instance of RackRequest
  #
  # source://bugsnag//lib/bugsnag/middleware/rack_request.rb#10
  def initialize(bugsnag); end

  # source://bugsnag//lib/bugsnag/middleware/rack_request.rb#14
  def call(report); end

  private

  # source://bugsnag//lib/bugsnag/middleware/rack_request.rb#140
  def add_cookies(report, request); end

  # source://bugsnag//lib/bugsnag/middleware/rack_request.rb#108
  def add_request_body(report, request, env); end

  # source://bugsnag//lib/bugsnag/middleware/rack_request.rb#88
  def format_headers(env, referer); end

  # source://bugsnag//lib/bugsnag/middleware/rack_request.rb#117
  def parsed_request_body(request, env); end

  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/middleware/rack_request.rb#150
  def record_cookies?; end
end

# source://bugsnag//lib/bugsnag/middleware/rack_request.rb#8
Bugsnag::Middleware::RackRequest::COOKIE_HEADER = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/middleware/rack_request.rb#7
Bugsnag::Middleware::RackRequest::SPOOF = T.let(T.unsafe(nil), String)

# Extracts and attaches rails and rack environment data to an error report
class Bugsnag::Middleware::Rails3Request
  # @return [Rails3Request] a new instance of Rails3Request
  #
  # source://bugsnag//lib/bugsnag/middleware/rails3_request.rb#7
  def initialize(bugsnag); end

  # source://bugsnag//lib/bugsnag/middleware/rails3_request.rb#11
  def call(report); end
end

# source://bugsnag//lib/bugsnag/middleware/rails3_request.rb#5
Bugsnag::Middleware::Rails3Request::SPOOF = T.let(T.unsafe(nil), String)

# Extracts and attaches rake task information to an error report
class Bugsnag::Middleware::Rake
  # @return [Rake] a new instance of Rake
  #
  # source://bugsnag//lib/bugsnag/middleware/rake.rb#5
  def initialize(bugsnag); end

  # source://bugsnag//lib/bugsnag/middleware/rake.rb#9
  def call(report); end
end

# Attaches information about current session to an error report
class Bugsnag::Middleware::SessionData
  # @return [SessionData] a new instance of SessionData
  #
  # source://bugsnag//lib/bugsnag/middleware/session_data.rb#5
  def initialize(bugsnag); end

  # source://bugsnag//lib/bugsnag/middleware/session_data.rb#9
  def call(report); end
end

# Attaches Sidekiq job information to an error report
class Bugsnag::Middleware::Sidekiq
  # @return [Sidekiq] a new instance of Sidekiq
  #
  # source://bugsnag//lib/bugsnag/middleware/sidekiq.rb#5
  def initialize(bugsnag); end

  # source://bugsnag//lib/bugsnag/middleware/sidekiq.rb#9
  def call(report); end
end

# Attaches any "Did you mean?" suggestions to the report
class Bugsnag::Middleware::SuggestionData
  # @return [SuggestionData] a new instance of SuggestionData
  #
  # source://bugsnag//lib/bugsnag/middleware/suggestion_data.rb#9
  def initialize(bugsnag); end

  # source://bugsnag//lib/bugsnag/middleware/suggestion_data.rb#13
  def call(report); end
end

# source://bugsnag//lib/bugsnag/middleware/suggestion_data.rb#6
Bugsnag::Middleware::SuggestionData::CAPTURE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://bugsnag//lib/bugsnag/middleware/suggestion_data.rb#7
Bugsnag::Middleware::SuggestionData::DELIMITER = T.let(T.unsafe(nil), String)

# Extracts and attaches user information from Warden to an error report
class Bugsnag::Middleware::WardenUser
  # @return [WardenUser] a new instance of WardenUser
  #
  # source://bugsnag//lib/bugsnag/middleware/warden_user.rb#8
  def initialize(bugsnag); end

  # source://bugsnag//lib/bugsnag/middleware/warden_user.rb#12
  def call(report); end
end

# source://bugsnag//lib/bugsnag/middleware/warden_user.rb#6
Bugsnag::Middleware::WardenUser::COMMON_USER_FIELDS = T.let(T.unsafe(nil), Array)

# source://bugsnag//lib/bugsnag/middleware/warden_user.rb#5
Bugsnag::Middleware::WardenUser::SCOPE_PATTERN = T.let(T.unsafe(nil), Regexp)

class Bugsnag::MiddlewareStack
  # Creates the middleware stack.
  #
  # @return [MiddlewareStack] a new instance of MiddlewareStack
  #
  # source://bugsnag//lib/bugsnag/middleware_stack.rb#7
  def initialize; end

  # Disable the given middleware. This removes them from the list of
  # middleware and ensures they cannot be added again
  #
  # See also {#remove}
  #
  # source://bugsnag//lib/bugsnag/middleware_stack.rb#75
  def disable(*middlewares); end

  # Inserts a new middleware to use after a given middleware already added.
  #
  # Will return early if given middleware is disabled or already added.
  # New middleware will be inserted last if the existing middleware is not already included.
  #
  # source://bugsnag//lib/bugsnag/middleware_stack.rb#31
  def insert_after(after, new_middleware); end

  # Inserts a new middleware to use before a given middleware already added.
  #
  # Will return early if given middleware is disabled or already added.
  # New middleware will be inserted last if the existing middleware is not already included.
  #
  # source://bugsnag//lib/bugsnag/middleware_stack.rb#55
  def insert_before(before, new_middleware); end

  # Allows the user to proxy methods for more complex functionality.
  #
  # source://bugsnag//lib/bugsnag/middleware_stack.rb#95
  def method_missing(method, *args, &block); end

  # Remove the given middleware from the list of middleware
  #
  # This is like {#disable} but allows the middleware to be added again
  #
  # source://bugsnag//lib/bugsnag/middleware_stack.rb#87
  def remove(*middlewares); end

  # Runs the middleware stack.
  #
  # source://bugsnag//lib/bugsnag/middleware_stack.rb#101
  def run(report); end

  # Defines a new middleware to use in the middleware call sequence.
  #
  # Will return early if given middleware is disabled or already included.
  #
  # source://bugsnag//lib/bugsnag/middleware_stack.rb#17
  def use(new_middleware); end

  private

  # Generates a list of middleware procs that are ready to be run
  # Pass each one a reference to the next in the queue
  #
  # @return [Array<Proc>]
  #
  # source://bugsnag//lib/bugsnag/middleware_stack.rb#133
  def middleware_procs; end
end

# source://bugsnag//lib/bugsnag.rb#45
Bugsnag::NIL_EXCEPTION_DESCRIPTION = T.let(T.unsafe(nil), String)

# @api private
class Bugsnag::OnErrorCallbacks
  # @api private
  # @return [OnErrorCallbacks] a new instance of OnErrorCallbacks
  #
  # source://bugsnag//lib/bugsnag/on_error_callbacks.rb#4
  def initialize(next_middleware, callbacks); end

  # @api private
  # @param report [Report]
  #
  # source://bugsnag//lib/bugsnag/on_error_callbacks.rb#11
  def call(report); end
end

# Automatically captures and adds Rack request information to error reports
class Bugsnag::Rack
  # @return [Rack] a new instance of Rack
  #
  # source://bugsnag//lib/bugsnag/integrations/rack.rb#10
  def initialize(app); end

  # Wraps a call to the application with error capturing
  #
  # source://bugsnag//lib/bugsnag/integrations/rack.rb#43
  def call(env); end
end

# source://bugsnag//lib/bugsnag/integrations/rack.rb#6
Bugsnag::Rack::FRAMEWORK_ATTRIBUTES = T.let(T.unsafe(nil), Hash)

module Bugsnag::Rails; end

# source://bugsnag//lib/bugsnag/integrations/rails/rails_breadcrumbs.rb#4
Bugsnag::Rails::DEFAULT_RAILS_BREADCRUMBS = T.let(T.unsafe(nil), Array)

class Bugsnag::Railtie < ::Rails::Railtie
  # Subscribes to an ActiveSupport event, leaving a breadcrumb when it triggers
  #
  # @api private
  # @param event [Hash] details of the event to subscribe to
  #
  # source://bugsnag//lib/bugsnag/integrations/railtie.rb#21
  def event_subscription(event); end

  class << self
    # Do we need to rescue (& notify) in Active Record callbacks?
    #
    # On Rails versions < 4.2, Rails did not raise errors in AR callbacks
    # On Rails version 4.2, a config option was added to control this
    # On Rails version 5.0, the config option was removed and errors in callbacks
    # always bubble up
    #
    # @api private
    # @return [Boolean]
    #
    # source://bugsnag//lib/bugsnag/integrations/railtie.rb#59
    def rescue_in_active_record_callbacks?; end
  end
end

# source://bugsnag//lib/bugsnag/integrations/railtie.rb#12
Bugsnag::Railtie::FRAMEWORK_ATTRIBUTES = T.let(T.unsafe(nil), Hash)

class Bugsnag::Report
  # Initializes a new report from an exception.
  #
  # @return [Report] a new instance of Report
  #
  # source://bugsnag//lib/bugsnag/report.rb#116
  def initialize(exception, passed_configuration, auto_notify = T.unsafe(nil)); end

  # Add values to metadata
  #
  # @overload add_metadata
  # @overload add_metadata
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/report.rb#339
  def add_metadata(section, key_or_data, *args); end

  # Add a new metadata tab to this notification.
  #
  # @deprecated Use {#add_metadata} instead
  # @param name [String, #to_s] The name of the tab to add
  # @param value [Hash, Object] The value to add to the tab. If the tab already
  #   exists, this will be merged with the existing values. If a Hash is not
  #   given, the value will be placed into the 'custom' tab
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/report.rb#177
  def add_tab(name, value); end

  # Your Integration API Key
  #
  # @return [String, nil]
  # @see Configuration#api_key
  #
  # source://bugsnag//lib/bugsnag/report.rb#31
  def api_key; end

  # Your Integration API Key
  #
  # @return [String, nil]
  # @see Configuration#api_key
  #
  # source://bugsnag//lib/bugsnag/report.rb#31
  def api_key=(_arg0); end

  # The type of application executing the current code
  #
  # @return [String, nil]
  # @see Configuration#app_type
  #
  # source://bugsnag//lib/bugsnag/report.rb#36
  def app_type; end

  # The type of application executing the current code
  #
  # @return [String, nil]
  # @see Configuration#app_type
  #
  # source://bugsnag//lib/bugsnag/report.rb#36
  def app_type=(_arg0); end

  # The current version of your application
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/report.rb#40
  def app_version; end

  # The current version of your application
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/report.rb#40
  def app_version=(_arg0); end

  # Builds and returns the exception payload for this notification.
  #
  # @return [Hash]
  #
  # source://bugsnag//lib/bugsnag/report.rb#207
  def as_json; end

  # Context set automatically by Bugsnag uses this attribute, which prevents
  # it from overwriting the user-supplied context
  #
  # @api private
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/report.rb#165
  def automatic_context; end

  # Context set automatically by Bugsnag uses this attribute, which prevents
  # it from overwriting the user-supplied context
  #
  # @api private
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/report.rb#165
  def automatic_context=(_arg0); end

  # The list of breadcrumbs attached to this report
  #
  # @return [Array<Breadcrumb>]
  #
  # source://bugsnag//lib/bugsnag/report.rb#44
  def breadcrumbs; end

  # The list of breadcrumbs attached to this report
  #
  # @return [Array<Breadcrumb>]
  #
  # source://bugsnag//lib/bugsnag/report.rb#44
  def breadcrumbs=(_arg0); end

  # Clear values from metadata
  #
  # @overload clear_metadata
  # @overload clear_metadata
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/report.rb#356
  def clear_metadata(section, *args); end

  # @api private
  # @return [Configuration]
  #
  # source://bugsnag//lib/bugsnag/report.rb#48
  def configuration; end

  # @api private
  # @return [Configuration]
  #
  # source://bugsnag//lib/bugsnag/report.rb#48
  def configuration=(_arg0); end

  # Additional context for this report
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/report.rb#152
  def context; end

  # Additional context for this report
  #
  # @return [String, nil]
  #
  # source://bugsnag//lib/bugsnag/report.rb#158
  def context=(_arg0); end

  # The delivery method that will be used for this report
  #
  # @return [Symbol]
  # @see Configuration#delivery_method
  #
  # source://bugsnag//lib/bugsnag/report.rb#53
  def delivery_method; end

  # The delivery method that will be used for this report
  #
  # @return [Symbol]
  # @see Configuration#delivery_method
  #
  # source://bugsnag//lib/bugsnag/report.rb#53
  def delivery_method=(_arg0); end

  # A list of errors in this report
  #
  # @return [Array<Error>]
  #
  # source://bugsnag//lib/bugsnag/report.rb#108
  def errors; end

  # The list of exceptions in this report
  #
  # @deprecated Use {#errors} instead
  # @return [Array<Hash>]
  #
  # source://bugsnag//lib/bugsnag/report.rb#58
  def exceptions; end

  # The list of exceptions in this report
  #
  # @deprecated Use {#errors} instead
  # @return [Array<Hash>]
  #
  # source://bugsnag//lib/bugsnag/report.rb#58
  def exceptions=(_arg0); end

  # All errors with the same grouping hash will be grouped in the Bugsnag app
  #
  # @return [String]
  #
  # source://bugsnag//lib/bugsnag/report.rb#71
  def grouping_hash; end

  # All errors with the same grouping hash will be grouped in the Bugsnag app
  #
  # @return [String]
  #
  # source://bugsnag//lib/bugsnag/report.rb#71
  def grouping_hash=(_arg0); end

  # Returns the headers required for the notification.
  #
  # @return [Hash{String => String}]
  #
  # source://bugsnag//lib/bugsnag/report.rb#250
  def headers; end

  # @return [String]
  # @see Configuration#hostname
  #
  # source://bugsnag//lib/bugsnag/report.rb#62
  def hostname; end

  # @return [String]
  # @see Configuration#hostname
  #
  # source://bugsnag//lib/bugsnag/report.rb#62
  def hostname=(_arg0); end

  # Tells the client this report should not be sent.
  #
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/report.rb#278
  def ignore!; end

  # Whether this report should be ignored and not sent.
  #
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/report.rb#262
  def ignore?; end

  # Arbitrary metadata attached to this report
  #
  # @deprecated Use {#metadata} instead
  # @return [Hash]
  #
  # source://bugsnag//lib/bugsnag/report.rb#76
  def meta_data; end

  # Arbitrary metadata attached to this report
  #
  # @deprecated Use {#metadata} instead
  # @return [Hash]
  #
  # source://bugsnag//lib/bugsnag/report.rb#76
  def meta_data=(_arg0); end

  # A Hash containing arbitrary metadata
  #
  # @return [Hash]
  #
  # source://bugsnag//lib/bugsnag/report.rb#305
  def metadata; end

  # @param metadata [Hash]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/report.rb#311
  def metadata=(metadata); end

  # The Exception instance this report was created for
  #
  # @return [Exception]
  #
  # source://bugsnag//lib/bugsnag/report.rb#112
  def original_error; end

  # The raw Exception instances for this report
  #
  # @deprecated Use {#original_error} instead
  # @return [Array<Exception>]
  # @see #exceptions
  #
  # source://bugsnag//lib/bugsnag/report.rb#82
  def raw_exceptions; end

  # The raw Exception instances for this report
  #
  # @deprecated Use {#original_error} instead
  # @return [Array<Exception>]
  # @see #exceptions
  #
  # source://bugsnag//lib/bugsnag/report.rb#82
  def raw_exceptions=(_arg0); end

  # The current stage of the release process, e.g. 'development', production'
  #
  # @return [String, nil]
  # @see Configuration#release_stage
  #
  # source://bugsnag//lib/bugsnag/report.rb#87
  def release_stage; end

  # The current stage of the release process, e.g. 'development', production'
  #
  # @return [String, nil]
  # @see Configuration#release_stage
  #
  # source://bugsnag//lib/bugsnag/report.rb#87
  def release_stage=(_arg0); end

  # Removes a metadata tab from this notification.
  #
  # @deprecated Use {#clear_metadata} instead
  # @param name [String]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/report.rb#197
  def remove_tab(name); end

  # Data from the current HTTP request. May be nil if no data has been recorded
  #
  # @return [Hash, nil]
  #
  # source://bugsnag//lib/bugsnag/report.rb#319
  def request; end

  # Data set on the configuration to be attached to every error notification.
  #
  # @return [Hash]
  #
  # source://bugsnag//lib/bugsnag/report.rb#270
  def request_data; end

  # @api private
  # @return [Hash{String => String}]
  # @see Configuration#runtime_versions
  #
  # source://bugsnag//lib/bugsnag/report.rb#67
  def runtime_versions; end

  # @api private
  # @return [Hash{String => String}]
  # @see Configuration#runtime_versions
  #
  # source://bugsnag//lib/bugsnag/report.rb#67
  def runtime_versions=(_arg0); end

  # The session that active when this report was generated
  #
  # @return [Hash]
  # @see SessionTracker#get_current_session
  #
  # source://bugsnag//lib/bugsnag/report.rb#92
  def session; end

  # The session that active when this report was generated
  #
  # @return [Hash]
  # @see SessionTracker#get_current_session
  #
  # source://bugsnag//lib/bugsnag/report.rb#92
  def session=(_arg0); end

  # Set information about the current user
  #
  # Additional user fields can be added as metadata in a "user" section
  #
  # Setting a field to 'nil' will remove it from the user data
  #
  # @param id [String, nil]
  # @param email [String, nil]
  # @param name [String, nil]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/report.rb#371
  def set_user(id = T.unsafe(nil), email = T.unsafe(nil), name = T.unsafe(nil)); end

  # The severity of this report, e.g. 'error', 'warning'
  #
  # @return [String]
  #
  # source://bugsnag//lib/bugsnag/report.rb#96
  def severity; end

  # The severity of this report, e.g. 'error', 'warning'
  #
  # @return [String]
  #
  # source://bugsnag//lib/bugsnag/report.rb#96
  def severity=(_arg0); end

  # @api private
  # @return [Hash]
  #
  # source://bugsnag//lib/bugsnag/report.rb#100
  def severity_reason; end

  # @api private
  # @return [Hash]
  #
  # source://bugsnag//lib/bugsnag/report.rb#100
  def severity_reason=(_arg0); end

  # Generates a summary to be attached as a breadcrumb
  #
  # @return [Hash] a Hash containing the report's error class, error message, and severity
  #
  # source://bugsnag//lib/bugsnag/report.rb#286
  def summary; end

  # Whether this report is for a handled or unhandled error
  #
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/report.rb#26
  def unhandled; end

  # source://bugsnag//lib/bugsnag/report.rb#378
  def unhandled=(new_unhandled); end

  # Returns true if the unhandled flag has been changed from its initial value
  #
  # @api private
  # @return [Boolean]
  #
  # source://bugsnag//lib/bugsnag/report.rb#390
  def unhandled_overridden?; end

  # The current user when this report was generated
  #
  # @return [Hash]
  #
  # source://bugsnag//lib/bugsnag/report.rb#104
  def user; end

  # The current user when this report was generated
  #
  # @return [Hash]
  #
  # source://bugsnag//lib/bugsnag/report.rb#104
  def user=(_arg0); end

  private

  # source://bugsnag//lib/bugsnag/report.rb#431
  def error_class(exception); end

  # source://bugsnag//lib/bugsnag/report.rb#425
  def generate_error_list; end

  # source://bugsnag//lib/bugsnag/report.rb#415
  def generate_exception_list; end

  # source://bugsnag//lib/bugsnag/report.rb#437
  def generate_raw_exceptions(exception); end

  # source://bugsnag//lib/bugsnag/report.rb#396
  def update_handled_counts(is_unhandled, was_unhandled); end
end

# source://bugsnag//lib/bugsnag/report.rb#22
Bugsnag::Report::CURRENT_PAYLOAD_VERSION = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/report.rb#15
Bugsnag::Report::ERROR_CLASS = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/report.rb#16
Bugsnag::Report::HANDLED_EXCEPTION = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/report.rb#20
Bugsnag::Report::MAX_EXCEPTIONS_TO_UNWRAP = T.let(T.unsafe(nil), Integer)

# source://bugsnag//lib/bugsnag/report.rb#9
Bugsnag::Report::NOTIFIER_NAME = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/report.rb#11
Bugsnag::Report::NOTIFIER_URL = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/report.rb#10
Bugsnag::Report::NOTIFIER_VERSION = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/report.rb#13
Bugsnag::Report::UNHANDLED_EXCEPTION = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/report.rb#14
Bugsnag::Report::UNHANDLED_EXCEPTION_MIDDLEWARE = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/report.rb#18
Bugsnag::Report::USER_CALLBACK_SET_SEVERITY = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/report.rb#17
Bugsnag::Report::USER_SPECIFIED_SEVERITY = T.let(T.unsafe(nil), String)

class Bugsnag::SessionTracker
  # Initializes the session tracker.
  #
  # @return [SessionTracker] a new instance of SessionTracker
  #
  # source://bugsnag//lib/bugsnag/session_tracker.rb#27
  def initialize; end

  # Starts a new session, storing it on the current thread.
  #
  # This allows Bugsnag to track error rates for a release.
  #
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/session_tracker.rb#39
  def create_session; end

  # Stop any events being attributed to the current session until it is
  # resumed or a new session is started
  #
  # @return [void]
  # @see resume_session
  #
  # source://bugsnag//lib/bugsnag/session_tracker.rb#66
  def pause_session; end

  # Resume the current session if it was previously paused. If there is no
  # current session, a new session will be started
  #
  # @return [Boolean] true if a paused session was resumed
  # @see pause_session
  #
  # source://bugsnag//lib/bugsnag/session_tracker.rb#81
  def resume_session; end

  # Delivers the current session_counts lists to the session endpoint.
  #
  # source://bugsnag//lib/bugsnag/session_tracker.rb#102
  def send_sessions; end

  # Returns the value of attribute session_counts.
  #
  # source://bugsnag//lib/bugsnag/session_tracker.rb#11
  def session_counts; end

  # Starts a new session, storing it on the current thread.
  #
  # This allows Bugsnag to track error rates for a release.
  #
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/session_tracker.rb#39
  def start_session; end

  private

  # source://bugsnag//lib/bugsnag/session_tracker.rb#139
  def add_session(min); end

  # source://bugsnag//lib/bugsnag/session_tracker.rb#143
  def deliver(session_payload); end

  # source://bugsnag//lib/bugsnag/session_tracker.rb#116
  def start_delivery_thread; end

  class << self
    # Returns the session information for this thread.
    #
    # source://bugsnag//lib/bugsnag/session_tracker.rb#21
    def get_current_session; end

    # Sets the session information for this thread.
    #
    # source://bugsnag//lib/bugsnag/session_tracker.rb#15
    def set_current_session(session); end
  end
end

# source://bugsnag//lib/bugsnag/session_tracker.rb#9
Bugsnag::SessionTracker::MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

# source://bugsnag//lib/bugsnag/session_tracker.rb#8
Bugsnag::SessionTracker::SESSION_PAYLOAD_VERSION = T.let(T.unsafe(nil), String)

# source://bugsnag//lib/bugsnag/session_tracker.rb#7
Bugsnag::SessionTracker::THREAD_SESSION = T.let(T.unsafe(nil), String)

module Bugsnag::Stacktrace
  class << self
    # Process a backtrace and the configuration into a parsed stacktrace.
    #
    # @param backtrace [Array, nil] If nil, 'caller' will be used instead
    # @param configuration [Configuration]
    # @return [Array]
    #
    # source://bugsnag//lib/bugsnag/stacktrace.rb#17
    def process(backtrace, configuration); end

    # @api private
    # @return [Boolean]
    #
    # source://bugsnag//lib/bugsnag/stacktrace.rb#72
    def vendor_path?(configuration, file_path); end
  end
end

# e.g. "org/jruby/RubyKernel.java:1264:in `catch'"
#
# source://bugsnag//lib/bugsnag/stacktrace.rb#6
Bugsnag::Stacktrace::BACKTRACE_LINE_REGEX = T.let(T.unsafe(nil), Regexp)

# e.g. "org.jruby.Ruby.runScript(Ruby.java:807)"
#
# source://bugsnag//lib/bugsnag/stacktrace.rb#9
Bugsnag::Stacktrace::JAVA_BACKTRACE_REGEX = T.let(T.unsafe(nil), Regexp)

module Bugsnag::Utility; end

# A container class with a maximum size, that removes oldest items as required.
#
# @api private
class Bugsnag::Utility::CircularBuffer
  include ::Enumerable

  # @api private
  # @param max_items [Integer] the initial maximum number of items
  # @return [CircularBuffer] a new instance of CircularBuffer
  #
  # source://bugsnag//lib/bugsnag/utility/circular_buffer.rb#14
  def initialize(max_items = T.unsafe(nil)); end

  # Adds an item to the circular buffer
  #
  # If this causes the buffer to exceed its maximum items, the oldest item will be removed
  #
  # @api private
  # @param item [Object] the item to add to the buffer
  # @return [self] returns itself to allow method chaining
  #
  # source://bugsnag//lib/bugsnag/utility/circular_buffer.rb#26
  def <<(item); end

  # Iterates over the buffer
  #
  # @api private
  # @yield [Object] sequentially gives stored items to the block
  #
  # source://bugsnag//lib/bugsnag/utility/circular_buffer.rb#36
  def each(&block); end

  # @api private
  # @return [Integer] the current maximum allowable number of items
  #
  # source://bugsnag//lib/bugsnag/utility/circular_buffer.rb#10
  def max_items; end

  # Sets the maximum allowable number of items
  #
  # If the current number of items exceeds the new maximum, oldest items will be removed
  # until this is no longer the case
  #
  # @api private
  # @param new_max_items [Integer] the new allowed item maximum
  #
  # source://bugsnag//lib/bugsnag/utility/circular_buffer.rb#47
  def max_items=(new_max_items); end

  private

  # Trims the buffer down to the current maximum allowable item number
  #
  # @api private
  #
  # source://bugsnag//lib/bugsnag/utility/circular_buffer.rb#56
  def trim_buffer; end
end

# @api private
class Bugsnag::Utility::Duplicator
  class << self
    # Duplicate (deep clone) the given object
    #
    # @api private
    # @param object [Object]
    # @param seen_objects [Hash<String, Object>]
    # @return [Object]
    #
    # source://bugsnag//lib/bugsnag/utility/duplicator.rb#11
    def duplicate(object, seen_objects = T.unsafe(nil)); end

    private

    # @api private
    #
    # source://bugsnag//lib/bugsnag/utility/duplicator.rb#33
    def duplicate_array(array, seen_objects); end

    # @api private
    #
    # source://bugsnag//lib/bugsnag/utility/duplicator.rb#103
    def duplicate_generic_object(object, seen_objects); end

    # @api private
    #
    # source://bugsnag//lib/bugsnag/utility/duplicator.rb#48
    def duplicate_hash(hash, seen_objects); end

    # Ranges are immutable but the values they contain may not be
    #
    # For example, a range of "a".."z" can be mutated: range.first.upcase!
    #
    # @api private
    #
    # source://bugsnag//lib/bugsnag/utility/duplicator.rb#67
    def duplicate_range(range, seen_objects); end

    # @api private
    #
    # source://bugsnag//lib/bugsnag/utility/duplicator.rb#85
    def duplicate_struct(struct, seen_objects); end
  end
end

# @api private
class Bugsnag::Utility::MetadataDelegate
  # Add values to metadata
  #
  # @api private
  # @overload add_metadata
  # @overload add_metadata
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/utility/metadata_delegate.rb#26
  def add_metadata(metadata, section, key_or_data, value = T.unsafe(nil)); end

  # Clear values from metadata
  #
  # @api private
  # @overload clear_metadata
  # @overload clear_metadata
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/utility/metadata_delegate.rb#52
  def clear_metadata(metadata, section, key = T.unsafe(nil)); end

  private

  # Merge new metadata into the existing metadata
  #
  # Any keys with a 'nil' value in the new metadata will be deleted from the
  # existing metadata
  #
  # @api private
  # @param existing_metadata [Hash]
  # @param section [String, Symbol]
  # @param new_metadata [Hash]
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/utility/metadata_delegate.rb#72
  def merge_metadata(existing_metadata, section, new_metadata); end

  # Overwrite the value in metadata's section & key
  #
  # @api private
  # @param metadata [Hash]
  # @param section [String, Symbol]
  # @param key [String, Symbol]
  # @param value
  # @return [void]
  #
  # source://bugsnag//lib/bugsnag/utility/metadata_delegate.rb#95
  def overwrite_metadata(metadata, section, key, value); end
end

# nil is a valid metadata value, so we need a sentinel object so we can tell
# if the value parameter has been provided
#
# @api private
#
# source://bugsnag//lib/bugsnag/utility/metadata_delegate.rb#6
Bugsnag::Utility::MetadataDelegate::NOT_PROVIDED = T.let(T.unsafe(nil), Object)

# source://bugsnag//lib/bugsnag/version.rb#2
Bugsnag::VERSION = T.let(T.unsafe(nil), String)

module Delayed; end
class Delayed::DeserializationError < ::StandardError; end
class Delayed::FatalBackendError < ::RuntimeError; end
class Delayed::InvalidCallback < ::RuntimeError; end

# source://delayed_job/4.1.10/lib/delayed/worker.rb#71
Delayed::Job = Delayed::Backend::ActiveRecord::Job

module Delayed::Plugins; end

class Delayed::Plugins::Bugsnag < ::Delayed::Plugin
  class << self
    # source://delayed_job/4.1.10/lib/delayed/plugin.rb#5
    def callback_block; end

    # DelayedJob doesn't have an easy way to fetch its version, but we can use
    # Gem.loaded_specs to get the version instead
    #
    # source://bugsnag//lib/bugsnag/integrations/delayed_job.rb#16
    def delayed_job_version; end
  end
end

class Delayed::Railtie < ::Rails::Railtie; end
